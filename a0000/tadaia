
LOGIC-INT-RAL-002:
(* Release Label (2) *)
PARM L_RECCOD LIKE(NAME=RECCOD);
PARM L_EXT FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
SET TITLE("Interfaz de Albaran de entrada de Proveedor");
SET FILES(FINAL-CLOSE=MINE);
DCL I FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_ANTARTPRICOD LIKE(NAME=ARTPRICOD);
DCL L_ARTCOD LIKE(NAME=ARTCOD);
DCL L_ARTPRICOD LIKE(NAME=ARTPRICOD);
DCL L_CANREC LIKE(NAME=CANREC);
DCL L_CANTIDAD LIKE(NAME=CANUNI);
DCL L_CANUNI LIKE(NAME=CANUNI);
DCL L_CERAMICAS FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=600,SUBTYPE=ALPHA);
DCL L_CNTDORMAT LIKE(NAME=CNTDORMAT);
DCL L_DESGLOSE FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_EXISTE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_FECAL FORMAT(TYPE=CHAR,BYTES=10,SUBTYPE=DATE);
DCL L_FECCAD LIKE(NAME=FECCAD);
DCL L_FECFAB LIKE(NAME=FECFAB);
DCL L_FECHA FORMAT(TYPE=CHAR,BYTES=10,SUBTYPE=DATE);
DCL L_HORA FORMAT(TYPE=CHAR,BYTES=8,SUBTYPE=TIME);
DCL L_INCIDE LIKE(NAME=INCIDE);
DCL L_NDOCOD LIKE(NAME=NDOCOD);
DCL L_NUMUNI FORMAT(TYPE=FLOAT,LENGTH=11,DECIMAL=2,BYTES=8,SUBTYPE=NUMERIC);
DCL L_PES LIKE(NAME=PES);
DCL L_PESACUM FORMAT(TYPE=INT,LENGTH=12,SUBTYPE=NUMERIC);
DCL L_PESREC FORMAT(TYPE=INT,LENGTH=12,SUBTYPE=NUMERIC);
DCL L_PESRECVAL LIKE(NAME=PESRECVAL);
DCL L_PESUNI LIKE(NAME=PESUNI);
DCL L_PESVAR LIKE(NAME=PESVAR);
DCL L_PRECOM FORMAT(TYPE=INT,LENGTH=11,SUBTYPE=NUMERIC);
DCL L_PROP FORMAT(TYPE=CHAR,LENGTH=16,BYTES=16,SUBTYPE=ALPHA);
DCL L_RECORDCOD LIKE(NAME=RECORDCOD);
DCL L_RECORDLIN LIKE(NAME=RECORDLIN);
DCL L_RECORDLINDES LIKE(NAME=RECORDLIN);
DCL L_VALALF LIKE(NAME=VALALF);
(****************************************************************************)
(* Titulo: Interfaz de Albaran de Entrada de Proveedor                      *)
(* Descripcion                                                              *)
(*    Este programa genera una interfaz para una recepcion  cuyo codigo     *)
(*    recibe como parametro. Esta interfaz informa al ordenador central de  *)
(*    la mercancia recibida.                                                *)
(*--------------------------------------------------------------------------*)
(* Historia:                                                                *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 27/03/02                                       *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: GPZ, CHUPS, V2xx                               *)
(*    Descripcion          : Se envian nuevos registros con el desglose de  *)
(*                         los contenedores de la descarga                  *)
(*                         Se define un nuevo parametro para saber si hay   *)
(*                         que enviar esta informacion o no.                *)
(*                         DESGLOSE-CNT-RAL de la Categoria INSTALACION     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 12/04/02                                       *)
(*    Programador          : YMA                                            *)
(*    Proyecto o incidencia: CHUPS.                                         *)
(*    Descripcion          : Se envia el numero de linea de las ordenes de  *)
(*                         recepcion en el caso de que sea una orden, si es *)
(*                         una descarga mandamos lo que se graba ne RECLIN. *)
(*                         Se controla con el parametro TRASP-LIN-RAL si se *)
(*                         envia el fichero con el campo RECORDLIN o no.    *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 23/05/02                                       *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2it solicitado por PCC01                      *)
(*    Descripcion          : Se aÀade el estado del contenido.              *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 11/06/02                                       *)
(*    Programador          : EV                                             *)
(*    Descripicon          : Se soluciona la incidencia cuando se reciben   *)
(*                           varias descargas contra una misma orden, se    *)
(*                           enviaba la cantidad recibida de la orden en    *)
(*                           lugar de la cantidad de la descarga.           *)
(*                           el problema era un aceso a RECLIN por RECORDLIN*)
(*                           Se aÀade a este acceso RECLIN.RECCOD=L_RECCOD. *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 11/06/02                                       *)
(*    Programador          : EV                                             *)
(*    Descripicon          : SE QUITA EL ACCESO AL PARAMETRO TRASP-LIN-RAL  *)
(*                           porque el envio de la linea del pedido pasa a  *)
(*                           ser est-ndar.                                  *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 03/10/03                                       *)
(*    Programador          : DMT                                            *)
(*    Descripicon          : Se modifica la variable #ALBARA para que tenga *)
(*                           17 caracteres de largo en vez de 12 y se adapte*)
(*                           al estandar de AECOC.                          *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 21/01/2004                                     *)
(*    Programador          : EMA                                            *)
(*    Descripicon          : Se selecciona ARTREF de art con ARTCOD = L_ART *)
(*                           PRICOD, antes seleccionaba ARTPRICOD = L_ARTPRI*)
(*                           COD para el caso de ADAIA-CERAMICAS = 'N' lo   *)
(*                           que provocaba que se puediera enviar cualquier *)
(*                           referencia de cualquier formato.               *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 20/04/2004                                     *)
(*    Programador          : JLM                                            *)
(*    Proyecto o incidencia: CV2dp49 Nuevo campo en TRREC.                  *)
(*    Descripcion          : Se modifica el programa para incluir los campos*)
(*                           LOTE e INCIDENICIA.                            *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 24/05/2004                                     *)
(*    Programador          : MJR                                            *)
(*    Proyecto o incidencia: RAM07                                          *)
(*    Descripcion          : Se aÀaden al interface los campos CNTEXPTIP,   *)
(*                           PROP y DIM.                                    *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 24/06/2004                                     *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: ADAIA2                                         *)
(*    Descripcion          : Se crea #RECORDLIN con $EDIT, antes se estaba  *)
(*                           poniendo con $STR, no completando las 9 pos.   *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 31/01/2007                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: Incidencia 10582                               *)
(*    Descripcion          : El valor de NDOSIT se debe tomar de RECLINNDO  *)
(*       para el caso de reenvios, ya que puede haber cambiado su valor.    *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 05/07/2007                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: Incidencia 14799                               *)
(*    Descripcion          : No se envia el nÃmero de serie.                *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 07/04/2009                                     *)
(*    Programador          : FM                                             *)
(*    Proyecto o incidencia: Incidencia 21652                               *)
(*    Descripcion          : Se suprime el caracter 26 pues lo que se pre-  *)
(*       tendia se gestiona de Program Options                              *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 10/06/2011                                     *)
(*    Programador          : JG                                             *)
(*    Proyecto o incidencia: Incidencia 29352                               *)
(*    Descripcion          : Se modifica para que la situacion #NDOSIT se   *)
(*       coja tambien por contenedor.                                       *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 05/05/2014                                     *)
(*    Programador          : US                                             *)
(*    Proyecto o incidencia: SCO04                                          *)
(*    Descripcion          : Se integra el campo FECALBARA a los datos que  *)
(*       se envian en la cabecera de la interfaz.                           *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 31/08/2016                                     *)
(*    Programador          : FC                                             *)
(*    Proyecto o incidencia: INC38549                                       *)
(*    Descripcion          : Se iguala L_FECAL al campo MOMREC.             *)
(****************************************************************************)
 
(* VISTA PARA LOS REGISTROS DEL DESGLOSE *)
DCLVIEW V_DESGLOSE AS
   (SELECT CNTDORREF, CNTPRO, MOMREC, PES, CANUNI, CRIROT,
           FECCAD, FECFAB, LOTE, ARTCOD, RECLIN, NDOCOD, CNTEXTCOD (*29352,JG*)
      FROM RECLINNDO, RECLINCNT
     WHERE RECLINCNT.CNTCOD = RECLINNDO.CNTCOD
       AND RECLINNDO.RECCOD = :L_RECCOD)
     USING L_RECCOD FORMAT(INT,9,,4);
 
(* VISTA PARA ORDENAR POR RECORDLIN EN EL CASO DE LAS DESCARGAS CON ORDEN *)
DCLVIEW V_RECORDLIN AS
   (SELECT RECORDLIN, RECLIN, ARTCOD
      FROM RECORDLIN, RECLIN
     WHERE RECLIN.RECCOD = :L_RECCOD
       AND RECORDLIN.RECORDCOD = RECLIN.RECORDCOD
       AND RECORDLIN.RECORDLIN = RECLIN.RECORDLIN
           ORDER BY RECORDLIN, RECLIN)
     USING L_RECCOD FORMAT(INT,9,,4);
 
(* VISTA PARA SELECCIONAR ARTPRICOD EN EL CASO DE LAS DESCARGAS SIN ORDEN *)
DCLVIEW V_RECLINART AS
   (SELECT ARTCOD, ARTPRICOD,CANREC, PESRECVAL, PRECOM, RECLIN, INCIDE
      FROM RECLIN, ART
     WHERE RECLIN.RECCOD = :L_RECCOD
       AND RECLIN.ARTCOD = ART.ARTCOD
  ORDER BY ARTPRICOD)
     USING L_RECCOD FORMAT(INT,9,,4);
 
(* CABECERA *)
DCL #TIPREG FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL #ACCION FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
DCL #RECCOD FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #ALMREF FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
DCL #RECORDREF FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL #TERREF FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL #TERPROREF FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL #RECTIP FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL #ALBARA FORMAT(TYPE=CHAR,LENGTH=17,SUBTYPE=ALPHA);
DCL #FECREC FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
DCL #HORREC FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL #OBS FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
DCL #FECALB FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
 
(* LINEA *)
DCL #ARTREF FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL #CANREC FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #TIPUNI FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL #PESREC FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #PRECOM FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #PESPRO FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #RECORDLIN FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #LOTELIN   FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
DCL #INCIDENCIA FORMAT(TYPE=CHAR,LENGTH=60,SUBTYPE=ALPHA);
 
(* DESGLOSE CONTENEDORES *)
DCL #CNTDORREF FORMAT(TYPE=CHAR,LENGTH=18,SUBTYPE=ALPHA);
DCL #CNTPRO    FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL #NUMUNI    FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
DCL #CANCNT    FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #PESCNT    FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #VOLCNT    FORMAT(TYPE=CHAR,LENGTH=9,SUBTYPE=ALPHA);
DCL #CRIROT    FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
DCL #FECCNT    FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
DCL #FECCAD    FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
DCL #FECFAB    FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
DCL #LOTE      FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
DCL #NUMSERREF FORMAT(TYPE=CHAR,LENGTH=30,SUBTYPE=ALPHA);
DCL #NDOSIT    FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
(* Modif: MJR 24/05/2004*)
DCL #CNTEXPTIP FORMAT(TYPE=CHAR,LENGTH=6,SUBTYPE=ALPHA);
DCL #CNTDORMAT FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
DCL #PROP      FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL #DIM       FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
(* Fin Modif 24/05/2004*)
 
DCL #CRLF FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL #CR FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL #EOF FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
 
 
DCLFILE FICDATA IS(TEXTFILE) LOCATION("$ADAIA_TRASP/TRREC."+L_EXT);
 
DBG1
   'INICIO PROGRAMA -----------------------';
DBG1
   'L_RECCOD ' + $STR(L_RECCOD);
DBG1
   'L_EXT ' + L_EXT;
 
   #TIPREG = 'CRCA';
   #ACCION = 'MO';
   #CRLF = '<10><11>';
   #CR = '<13>';
   #EOF = '<26>';
 
L_VALALF = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION', 'INTERFAZ-CON-SEP', L_VALALF MODIFY;
L_DESGLOSE = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION', 'DESGLOSE-CNT-RAL', L_DESGLOSE MODIFY;
L_CERAMICAS = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION', 'ADAIA-CERAMICAS', L_CERAMICAS MODIFY;
 
L_EXISTE = 0;
SELECT * FROM RECCAB WHERE RECCOD = L_RECCOD;
FOR RECCAB SELECTED DO BEGIN
   L_EXISTE = 1;
   #RECCOD = $EDIT(RECCOD,'999999999');
 
   EXEC SQL
   SELECT ALMREF
     INTO :#ALMREF
     FROM ALM
    WHERE ALMCOD = :RECCAB.ALMCOD;
 
   EXEC SQL
   SELECT RECORDREF
     INTO :#RECORDREF
     FROM RECORDCAB
    WHERE RECORDCOD = :RECCAB.RECORDCOD;
 
   EXEC SQL
   SELECT TERREF
     INTO :#TERREF
     FROM TER
    WHERE TERCOD = :TERCOD;
 
   EXEC SQL
   SELECT TERREF
     INTO :#TERPROREF
     FROM TER
    WHERE TERCOD = :TERPROCOD;
 
   #RECTIP = RECTIP;
   #ALBARA = ALBARA;
   L_FECHA = MOMREC[1:10];
 
(*Inc 38549 Se cambia FECALBARA*)
 
   L_FECAL = MOMREC[1:10];
 
   (* SQLSERVER 23/10/02 DMG *)
#IFDEF BD_SYBASE
   L_HORA  = MOMREC[11:16];
   #HORREC = L_HORA;
#ENDIF
#IFDEF BD_ORACLE || BD_INFORMIX
   L_HORA  = MOMREC[12:19];
   #HORREC = L_HORA[1:2] + L_HORA[4:5];
#ENDIF
   #FECREC = L_FECHA[1:4] + L_FECHA[6:7] + L_FECHA[9:10];
   #OBS = $NVL(OBS,' ');
   RECTRA = $NOW;
   #FECALB = L_FECAL[1:4] + L_FECAL[6:7] + L_FECAL[9:10];
END; (* FOR RECCAB *)
 
IF L_EXISTE THEN BEGIN
   IF L_VALALF = 'S' THEN BEGIN
      (* Se crea el registro de cabecera en el fichero de interfaz *)
      CREATE FICDATA WITH TEXTLINE =
         $TRIM(#TIPREG,RIGHT)       + '|' +
         $TRIM(#ACCION,RIGHT)       + '|' +
         $TRIM(#RECCOD,RIGHT)       + '|' +
         $TRIM(#ALMREF,RIGHT)       + '|' +
         $TRIM(#RECORDREF,RIGHT)    + '|' +
         $TRIM(#TERREF,RIGHT)       + '|' +
         $TRIM(#TERPROREF,RIGHT)    + '|' +
         $TRIM(#RECTIP,RIGHT)       + '|' +
         $TRIM(#ALBARA,RIGHT)       + '|' +
         $TRIM(#FECREC,RIGHT)       + '|' +
         $TRIM(#HORREC,RIGHT)       + '|' +
         $TRIM(#OBS,RIGHT)          + '|' +
         $TRIM(#FECALB,RIGHT)       + '|' +
         #CR;
   END;
   ELSE BEGIN
      (* Se crea el registro de cabecera en el fichero de interfaz *)
      CREATE FICDATA WITH TEXTLINE =
         #TIPREG    +
         #ACCION    +
         #RECCOD    +
         #ALMREF    +
         #RECORDREF +
         #TERREF    +
         #TERPROREF +
         #RECTIP    +
         #ALBARA    +
         #FECREC    +
         #HORREC    +
         #OBS       +
         #FECALB    +
         #CR;
   END;
 
   #TIPREG = 'CRLI';
   #ACCION = 'MO';
 
   #PESPRO = $EDIT(0,'999999999');
   #TIPUNI = 'UD';
 
   IF L_CERAMICAS = 'S' THEN BEGIN
      L_CLAUSE = " WHERE RECCOD = " + $EDIT(L_RECCOD)
               + " ORDER BY RECLIN";
      SELECT * FROM RECLIN SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
      FOR RECLIN SELECTED DO BEGIN
         #ARTREF= ' ';
         EXEC SQL
         SELECT ARTREF
           INTO :#ARTREF
           FROM ART
          WHERE ARTCOD = :ARTCOD;
         #CANREC = $EDIT(CANREC,'999999999');
         #TIPUNI = 'UD';
 
         DBG4
            'PESRECVAL ' + $STR(PESRECVAL);
         L_PESREC = PESRECVAL * 1000;
         IF NOT L_PESREC THEN BEGIN
            L_PESVAR = '';
            EXEC SQL
            SELECT PESVAR
              INTO :L_PESVAR
              FROM ART
             WHERE ARTCOD = :ARTCOD;
 
            IF L_PESVAR = 'M' THEN BEGIN
               L_PESUNI = 0;
               EXEC SQL
               SELECT PESUNI
                 INTO :L_PESUNI
                 FROM ARTPRE
                WHERE ARTCOD = :ARTCOD
                  AND UNITIP = 'UD';
               L_PESREC = CANREC * L_PESUNI * 1000;
            END;
         END;
         #PESREC = $EDIT(L_PESREC,'999999999');
         DBG4
            'PESO ' + #PESREC;
         L_PRECOM = PRECOM * 100; (*DOS DECIMALES *)
         #PRECOM = $EDIT(L_PRECOM,'999999999');
         #RECORDLIN = $EDIT(RECORDLIN,'999999999');
 
         I = 0;
         SELECT * FROM GENTAB WHERE GENTABCOD = 'TINC';
         FOR GENTAB SELECTED DO BEGIN
            I = I + 1;
            IF INCIDE[I] = '1' THEN
               #INCIDENCIA = GENTABDES;
         END;
 
#INCLUDE-RAL-LIN-CRE
 
      END; (* FOR RECLIN *)
#NOTE
      IF L_DESGLOSE <> 'S' THEN
         CREATE FICDATA WITH TEXTLINE = #EOF;
#ENDNOTE
   END; (* IF L_CERAMICAS *)
   ELSE BEGIN
      EXEC SQL
      SELECT RECORDCOD
        INTO :L_RECORDCOD
        FROM RECCAB
       WHERE RECCOD = :L_RECCOD;
      DBG4
         'L_RECORDCOD ' + $STR(L_RECORDCOD);
      IF NOT L_RECORDCOD THEN BEGIN
 
         SELECT * FROM V_RECLINART WITH L_RECCOD = L_RECCOD;
         FOR V_RECLINART SELECTED DO BEGIN
            DBG4
               'ARTPRICOD ' + $STR(ARTPRICOD);
            IF ARTPRICOD <> L_ANTARTPRICOD THEN BEGIN
               IF L_ANTARTPRICOD THEN BEGIN
                  (* CREATE con L_ANTARTPRICOD *)
                  EXEC SQL
                  SELECT ARTREF
                    INTO :#ARTREF
                    FROM ART
                   WHERE ARTCOD = :L_ANTARTPRICOD;
                  DBG4
                     'ARTREF ' + #ARTREF;
                  EXEC SQL
                  SELECT RECLIN
                    INTO :L_RECORDLIN
                    FROM RECLIN
                   WHERE RECCOD = :L_RECCOD
                     AND ARTCOD = :L_ANTARTPRICOD;
 
                  #RECORDLIN = $EDIT(RECLIN,'999999999');
                  #PESREC = $EDIT(L_PESACUM,'999999999');
                  #PRECOM = $EDIT(L_PRECOM,'999999999');
                  #CANREC = $EDIT(L_CANREC,'999999999');
 
                  I = 0;
                  SELECT * FROM GENTAB WHERE GENTABCOD = 'TINC';
                  FOR GENTAB SELECTED DO BEGIN
                     I = I + 1;
                     IF INCIDE[I] = '1' THEN
                        #INCIDENCIA = GENTABDES;
                  END;
 
#INCLUDE-RAL-LIN-CRE
 
               END; (* IF L_ANTARTPRICOD *)
               (* Inicializo las variables *)
               L_PRECOM = 0;
               L_CANREC = 0;
               L_PESACUM = 0;
 
               L_ANTARTPRICOD = ARTPRICOD;
               DBG4
                  'L_ANTARTPRICOD ' + $STR(L_ANTARTPRICOD);
            END;
 
            L_PESREC = PESRECVAL * 1000;
            IF NOT L_PESREC THEN BEGIN
               L_PESVAR = ' ';
               EXEC SQL
               SELECT PESVAR
                 INTO :L_PESVAR
                 FROM ART
                WHERE ARTCOD = :L_ANTARTPRICOD;
               IF L_PESVAR = 'M' THEN BEGIN
                  L_PESUNI = 0;
                  EXEC SQL
                  SELECT PESUNI
                    INTO :L_PESUNI
                    FROM ARTPRE
                   WHERE ARTCOD = :L_ANTARTPRICOD
                     AND UNITIP = 'UD';
                  L_PESREC = CANREC * L_PESUNI * 1000;
               END; (* L_PESVAR = 'M' *)
            END; (* IF NOT L_PESREC *)
 
            DBG4
               'L_PESREC ' + $STR(L_PESREC);
 
            L_PRECOM = L_PRECOM + (PRECOM * 100);
            L_CANREC = L_CANREC + CANREC;
            L_PESACUM = L_PESACUM + L_PESREC;
 
         END; (* FOR V_RECLINART *)
 
         (* CREATE con L_ANTARTPRICOD; *)
         EXEC SQL
         SELECT ARTREF
           INTO :#ARTREF
           FROM ART
          WHERE ARTCOD = :L_ANTARTPRICOD;
         DBG4
            'ARTREF ' + #ARTREF;
         EXEC SQL
         SELECT RECLIN, INCIDE
           INTO :L_RECORDLIN, :L_INCIDE
           FROM RECLIN
          WHERE RECCOD = :L_RECCOD
            AND ARTCOD = :L_ANTARTPRICOD;
 
         #RECORDLIN = $EDIT(L_RECORDLIN,'999999999');
         #PESREC = $EDIT(L_PESACUM,'999999999');
         #PRECOM = $EDIT(L_PRECOM,'999999999');
         #CANREC = $EDIT(L_CANREC,'999999999');
 
         I = 0;
         SELECT * FROM GENTAB WHERE GENTABCOD = 'TINC';
         FOR GENTAB SELECTED DO BEGIN
            I = I + 1;
            IF L_INCIDE[I] = '1' THEN
               #INCIDENCIA = GENTABDES;
         END;
 
#INCLUDE-RAL-LIN-CRE
 
      END; (* IF NOT L_RECORDCOD *)
      ELSE BEGIN
         L_CLAUSE = " WHERE RECORDCOD = " + $STR(L_RECORDCOD) +
                    " ORDER BY RECORDLIN";
         DBG4
            L_CLAUSE;
         SELECT * FROM RECORDLIN SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
         FOR RECORDLIN SELECTED DO BEGIN
            DBG4
               'RECORDLIN ' + $STR(RECORDLIN);
            L_CANREC = 0;
            L_PESACUM = 0;
 
            #RECORDLIN = $EDIT(RECORDLIN,'999999999');
 
            EXEC SQL
            SELECT ARTPRICOD
              INTO :L_ARTPRICOD
              FROM ART
             WHERE ARTCOD = :RECORDLIN.ARTCOD;
 
            EXEC SQL
            SELECT ARTREF
              INTO :#ARTREF
              FROM ART
             WHERE ARTCOD = :L_ARTPRICOD;
            SELECT * FROM RECLIN WHERE RECCOD = L_RECCOD
                                   AND RECORDCOD = L_RECORDCOD
                                   AND RECORDLIN = RECORDLIN.RECORDLIN;
            FOR RECLIN SELECTED DO BEGIN
               L_CANREC = L_CANREC + CANREC;
               L_PESREC = PESRECVAL * 1000;
               IF NOT L_PESREC THEN BEGIN
                  L_PESVAR = ' ';
                  EXEC SQL
                  SELECT PESVAR
                    INTO :L_PESVAR
                    FROM ART
                   WHERE ARTCOD = :RECLIN.ARTCOD;
                  IF L_PESVAR = 'M' THEN BEGIN
                     L_PESUNI = 0;
                     EXEC SQL
                     SELECT PESUNI
                       INTO :L_PESUNI
                       FROM ARTPRE
                      WHERE ARTCOD = :RECLIN.ARTCOD
                        AND UNITIP = 'UD';
                     L_PESREC = CANREC * L_PESUNI * 1000;
                  END;
               END; (* IF NOT L_PESREC *)
               DBG4
                  'L_PESREC ' + $STR(L_PESREC);
 
               L_PESACUM = L_PESACUM + L_PESREC;
               I = 0;
               SELECT * FROM GENTAB WHERE GENTABCOD = 'TINC';
               FOR GENTAB SELECTED DO BEGIN
                  I = I + 1;
                  IF INCIDE[I] = '1' THEN
                     #INCIDENCIA = GENTABDES;
               END;
            END; (* FOR RECLIN *)
            DBG4
               'L_CANREC ' + $STR(L_CANREC);
            #CANREC = $EDIT(L_CANREC,'999999999');
            #PESREC = $EDIT(L_PESACUM,'999999999');
            #PRECOM = $EDIT(L_PRECOM,'999999999');
 
#INCLUDE-RAL-LIN-CRE
 
         END; (* FOR RECORDLIN *)
      END;(* HAY CABECERA *)
   END; (* ELSE IF L_CERAMICAS *)
END; (* IF L_EXISTE *)
 
(* REGISTROS DE DESGLOSE DE CONTENEDORES *)
IF L_EXISTE AND L_DESGLOSE = 'S' THEN BEGIN
 
   #TIPREG = 'CRCN';
   #ACCION = 'MO';
 
   SELECT * FROM V_DESGLOSE WITH L_RECCOD = L_RECCOD;
   FOR V_DESGLOSE SELECTED DO BEGIN
 
      IF L_CERAMICAS = 'S' THEN BEGIN
         #ARTREF = ' ';
         EXEC SQL
         SELECT ARTREF
           INTO :#ARTREF
           FROM ART
          WHERE ARTCOD = :ARTCOD;
      END;
      ELSE BEGIN
         L_ARTPRICOD = 0;
         EXEC SQL
         SELECT ARTPRICOD
           INTO :L_ARTPRICOD
           FROM ART
          WHERE ARTCOD = :ARTCOD;
         EXEC SQL
         SELECT ARTREF
           INTO :#ARTREF
           FROM ART
          WHERE ARTCOD = :L_ARTPRICOD;
      END;
 
      #CNTDORREF = CNTDORREF;
      #CNTPRO = CNTPRO;
      EXEC SQL
      SELECT RECORDLIN
        INTO :L_RECORDLINDES
        FROM RECLIN
       WHERE RECCOD = :L_RECCOD
         AND RECLIN = :V_DESGLOSE.RECLIN;
 
      IF L_RECORDLINDES = 0 THEN
         L_RECORDLINDES = RECLIN;
 
      #RECORDLIN = $EDIT(L_RECORDLINDES,'999999999');
 
      #NUMUNI = $EDIT(1,'99999999');
 
      #FECCNT = MOMREC[1:4] + MOMREC[6:7] + MOMREC[9:10];
      IF NOT $NULL(FECCAD) THEN
         L_FECCAD = FECCAD[1:4] + FECCAD[6:7] + FECCAD[9:10];
      ELSE
         L_FECCAD = '';
      #FECCAD = L_FECCAD;
 
      IF NOT $NULL(FECFAB) THEN
         L_FECFAB = FECFAB[1:4] + FECFAB[6:7] + FECFAB[9:10];
      ELSE
         L_FECFAB = '';
      #FECFAB = L_FECFAB;
      #LOTE = LOTE;
      #CRIROT = CRIROT;
      #VOLCNT = $EDIT(0,'999999999');
 
      (* Obtengo la situacion del contenido *)
      (* RS 31/01/2007 - Incidencia 10582 *)
      (* Incidencia 29352, JG, 10/06/2011 *)
      #NDOSIT = ' ';
      EXEC SQL
      SELECT NDOSIT
        INTO :#NDOSIT
        FROM RECLINNDO
       WHERE RECCOD = :L_RECCOD
         AND RECLIN = :V_DESGLOSE.RECLIN
         AND CNTEXTCOD = :V_DESGLOSE.CNTEXTCOD;
 
      (* MAD 04/06/2004 -------------- *)
      EXEC SQL
      SELECT CNTTIP, CNTDORMAT, TERPROCOD, DIM
        INTO :#CNTEXPTIP, :L_CNTDORMAT, :L_PROP, :#DIM
        FROM CNTDOR
       WHERE CNTDORREF = :V_DESGLOSE.CNTDORREF;
 
      #CNTDORMAT = $NVL(L_CNTDORMAT,' ');
 
      IF L_PROP <> ' ' THEN
         EXEC SQL
         SELECT TERREF
           INTO :#PROP
           FROM TER
          WHERE TERCOD = :L_PROP;
 
      (* RS 5/7/2007 - Incidencia 14799 *)
      L_CANUNI = CANUNI;
      L_PES = PES * 1000;
 
      L_NDOCOD = NDOCOD;
      L_ARTCOD = ARTCOD;
 
      L_CANTIDAD = 0;
      EXEC SQL
      SELECT NUMUNI
        INTO :L_CANTIDAD
        FROM ARTPRE, ART
       WHERE    ART.ARTCOD = :L_ARTCOD
         AND ARTPRE.ARTCOD = ART.ARTCOD
         AND ARTPRE.UNITIP = ART.UNIREP;
 
      SELECT * FROM CNTNDONUMSER WHERE NDOCOD = L_NDOCOD
                                   AND ARTCOD = L_ARTCOD;
      FOR CNTNDONUMSER SELECTED DO BEGIN
         IF L_CANUNI - L_CANTIDAD >= 0 THEN BEGIN
            #NUMSERREF = NUMSERREF;
            #CANCNT = $EDIT(L_CANTIDAD,'999999999');
            #PESCNT = $EDIT(L_PES * L_CANTIDAD,'999999999');
            L_CANUNI = L_CANUNI - L_CANTIDAD;
         END;
         ELSE
            BREAK;
 
         IF L_VALALF = 'S' THEN BEGIN
            CREATE FICDATA WITH TEXTLINE =
               $TRIM(#TIPREG,RIGHT)       + '|' +
               $TRIM(#ACCION,RIGHT)       + '|' +
               $TRIM(#RECORDREF,RIGHT)    + '|' +
               $TRIM(#ALMREF,RIGHT)       + '|' +
               $TRIM(#CNTDORREF,RIGHT)    + '|' +
               $TRIM(#CNTPRO,RIGHT)       + '|' +
               $TRIM(#ARTREF,RIGHT)       + '|' +
               $TRIM(#TERPROREF,RIGHT)    + '|' +
               $TRIM(#CANCNT,RIGHT)       + '|' +
               $TRIM(#TIPUNI,RIGHT)       + '|' +
               $TRIM(#NUMUNI,RIGHT)       + '|' +
               $TRIM(#PESCNT,RIGHT)       + '|' +
               $TRIM(#VOLCNT,RIGHT)       + '|' +
               $TRIM(#CRIROT,RIGHT)       + '|' +
               $TRIM(#FECCAD,RIGHT)       + '|' +
               $TRIM(#FECCNT,RIGHT)       + '|' +
               $TRIM(#FECFAB,RIGHT)       + '|' +
               $TRIM(#LOTE,RIGHT)         + '|' +
               $TRIM(#NUMSERREF,RIGHT)    + '|' +
               $TRIM(#RECORDLIN,RIGHT)    + '|' +
               $TRIM(#NDOSIT,RIGHT)       + '|' +
               $TRIM(#CNTEXPTIP)          + '|' +    (*Modif MJR 24/05/2004*)
               $TRIM(#CNTDORMAT)          + '|' +
               $TRIM(#PROP)               + '|' +
               $TRIM(#DIM)                + '|' +    (*Fin Modif 24/05/2004*)
               #CR;
         END;
         ELSE BEGIN
            CREATE FICDATA WITH TEXTLINE =
               #TIPREG       +
               #ACCION       +
               #RECORDREF    +
               #ALMREF       +
               #CNTDORREF    +
               #CNTPRO       +
               #ARTREF       +
               #TERPROREF    +
               #CANCNT       +
               #TIPUNI       +
               #NUMUNI       +
               #PESCNT       +
               #VOLCNT       +
               #CRIROT       +
               #FECCAD       +
               #FECCNT       +
               #FECFAB       +
               #LOTE         +
               #NUMSERREF    +
               #RECORDLIN    +
               #NDOSIT       +
               #CNTEXPTIP    +    (* Modif: MJR 24/05/2004*)
               #CNTDORMAT    +
               #PROP         +
               #DIM          +    (* Fin Modif 24/05/2004*)
               #CR;
         END;
      END; (* FOR CNTNDONUMSER *)
      IF L_CANUNI THEN BEGIN
         #CANCNT = $EDIT(CANUNI,'999999999');
         #PESCNT = $EDIT(L_PES, '999999999');
         #NUMSERREF = ' ';
         IF L_VALALF = 'S' THEN BEGIN
            CREATE FICDATA WITH TEXTLINE =
               $TRIM(#TIPREG,RIGHT)       + '|' +
               $TRIM(#ACCION,RIGHT)       + '|' +
               $TRIM(#RECORDREF,RIGHT)    + '|' +
               $TRIM(#ALMREF,RIGHT)       + '|' +
               $TRIM(#CNTDORREF,RIGHT)    + '|' +
               $TRIM(#CNTPRO,RIGHT)       + '|' +
               $TRIM(#ARTREF,RIGHT)       + '|' +
               $TRIM(#TERPROREF,RIGHT)    + '|' +
               $TRIM(#CANCNT,RIGHT)       + '|' +
               $TRIM(#TIPUNI,RIGHT)       + '|' +
               $TRIM(#NUMUNI,RIGHT)       + '|' +
               $TRIM(#PESCNT,RIGHT)       + '|' +
               $TRIM(#VOLCNT,RIGHT)       + '|' +
               $TRIM(#CRIROT,RIGHT)       + '|' +
               $TRIM(#FECCAD,RIGHT)       + '|' +
               $TRIM(#FECCNT,RIGHT)       + '|' +
               $TRIM(#FECFAB,RIGHT)       + '|' +
               $TRIM(#LOTE,RIGHT)         + '|' +
               $TRIM(#NUMSERREF,RIGHT)    + '|' +
               $TRIM(#RECORDLIN,RIGHT)    + '|' +
               $TRIM(#NDOSIT,RIGHT)       + '|' +
               $TRIM(#CNTEXPTIP)          + '|' +    (*Modif MJR 24/05/2004*)
               $TRIM(#CNTDORMAT)          + '|' +
               $TRIM(#PROP)               + '|' +
               $TRIM(#DIM)                + '|' +    (*Fin Modif 24/05/2004*)
               #CR;
         END;
         ELSE BEGIN
            CREATE FICDATA WITH TEXTLINE =
               #TIPREG       +
               #ACCION       +
               #RECORDREF    +
               #ALMREF       +
               #CNTDORREF    +
               #CNTPRO       +
               #ARTREF       +
               #TERPROREF    +
               #CANCNT       +
               #TIPUNI       +
               #NUMUNI       +
               #PESCNT       +
               #VOLCNT       +
               #CRIROT       +
               #FECCAD       +
               #FECCNT       +
               #FECFAB       +
               #LOTE         +
               #NUMSERREF    +
               #RECORDLIN    +
               #NDOSIT       +
               #CNTEXPTIP    +    (* Modif: MJR 24/05/2004*)
               #CNTDORMAT    +
               #PROP         +
               #DIM          +    (* Fin Modif 24/05/2004*)
               #CR;
         END;
      END; (*IF L_CANUNI *)
   END; (* FOR V_DESGLOSE *)
#NOTE
   CREATE FICDATA WITH TEXTLINE = #EOF;
#ENDNOTE
END;
 
DBG1
   'FIN PROGRAMA ---------------';
EXIT;
 
INCLUDE-RAL-LIN-CRE:
         IF L_VALALF = 'S' THEN BEGIN
            CREATE FICDATA WITH TEXTLINE =
               $TRIM(#TIPREG,RIGHT)       + '|' +
               $TRIM(#ACCION,RIGHT)       + '|' +
               $TRIM(#RECORDREF,RIGHT)    + '|' +
               $TRIM(#ARTREF,RIGHT)       + '|' +
               $TRIM(#CANREC,RIGHT)       + '|' +
               $TRIM(#TIPUNI,RIGHT)       + '|' +
               $TRIM(#PESREC,RIGHT)       + '|' +
               $TRIM(#PRECOM,RIGHT)       + '|' +
               $TRIM(#PESPRO,RIGHT)       + '|' +
               $TRIM(#RECORDLIN,RIGHT)    + '|' +
               $TRIM(#LOTELIN,RIGHT)      + '|' +
               $TRIM(#INCIDENCIA,RIGHT)   + '|' +
               #CR;
         END;
         ELSE BEGIN
           CREATE FICDATA WITH TEXTLINE =
               #TIPREG     +
               #ACCION     +
               #RECORDREF  +
               #ARTREF     +
               #CANREC     +
               #TIPUNI     +
               #PESREC     +
               #PRECOM     +
               #PESPRO     +
               #RECORDLIN  +
               #LOTELIN    +
               #INCIDENCIA +
               #CR;
         END;
EXIT;











LOGIC-RFL-LOG-X01:NOWARN;
(* Release Label (5) *)
SET TITLE("Login Radio Frecuencia");
DCL L_ACCCOD LIKE(NAME=ACCCOD);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=500,SUBTYPE=ALPHA);
DCL L_CONECTADO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CONTADOR_LIC FORMAT(TYPE=INT,LENGTH=4,SUBTYPE=NUMERIC,NULL=YES);
DCL L_ESTACT LIKE(NAME=ESTADO);
DCL L_EXISTE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_FECCON FORMAT(SUBTYPE=DATE) INIT("20180731");
DCL L_FINTUR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_GV_RECOPECOD LIKE(NAME=RECOPECOD);
DCL L_HISACCCOD FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
DCL L_HISACCCODSES LIKE(NAME=HISACCCOD);
DCL L_HISOPECOD LIKE(NAME=HISOPECOD);
DCL L_INTERRUMPE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_LLAMAR FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_MENOPC FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_MENU LIKE(NAME=MENRFTCOD);
DCL L_MOTIVO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
DCL L_NOSALIR FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_NUMTUR LIKE(NAME=NUMTUR);
DCL L_NUMTURORD LIKE(NAME=NUMTURORD);
DCL L_OBS LIKE(NAME=OBS);
DCL L_ORIACT LIKE(NAME=ORIMOV);
DCL L_ORIMOV LIKE(NAME=ORIMOV);
DCL L_RECMAQACT LIKE(NAME=RECMAQCOD);
DCL L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_SUSPEN FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_TEXTO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
DCL L_VOLVER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
(****************************************************************************)
(* Titulo: Login radio                                                      *)
(* Asunto: ADAIA V2 Primera Version                                         *)
(* Creado: Ana Armijo 01/07/1999                                            *)
(* Modif :                                                                  *)
(* Descripcion                                                              *)
(*    Este programa llama al RFT-LOG-002 que solicita la dentificacion del  *)
(*    operario de radio frecuencia. Si la identificacion es correcta com-   *)
(*    prueba la situaciãn del operario y crea el registro de control en la  *)
(*    tabla RECMAQOPE.                                                      *)
(*    Comprueba que menu debe presentarse al usuario,y llama al programa    *)
(*    de presentacion del menu de radio.                                    *)
(****************************************************************************)
(* RS: 05/02/2002  V2mc - Control Mercancia en carretilla al salir del menu *)
(*    de RF.                                                                *)
(*    Si el parametro de expedicion NOSALIR-CARLLENA esta activo, no se     *)
(*    permitira salir si hay contenedores en la carretilla con Final de     *)
(*    Turno.                                                                *)
(****************************************************************************)
(*    Programador : DMT                                                     *)
(*    Fecha : 18/02/2004                                                    *)
(*    Modificacion o incidencia : AZO12                                     *)
(*    Descripcion : Se modifica el programa para que al crear el registro   *)
(*    del RECMAQOPE aÀada los campos de impresora de documentos y de        *)
(*    etiquetas. IMPEMIDOC = GV_IMPEMIDOC y IMPEMIETI = GV_IMPEMIETI.       *)
(****************************************************************************)
(*    Programador               : Guillermo (INFOTOOL)                      *)
(*    Fecha                     : 14/03/2005                                *)
(*    Modificacion o incidencia :                                           *)
(*    Descripcion               : Se modifica para optimizar los accesos    *)
(*                                a Base de datos, sustituyendo los usos de *)
(*                                variables directas por comandos con mas   *)
(*                                rapidez de acceso.                        *)
(****************************************************************************)
(*    Programador               : RS                                        *)
(*    Fecha                     : 06/03/2008                                *)
(*    Modificacion o incidencia : LIN01                                     *)
(*    Descripcion               : Si se pulsa Cambio recurso, se debe salir *)
(*       hasta la solicitud de la maquina.                                  *)
(****************************************************************************)
 
DBG1
   'INICIO PROGRAMA -----------------------';
 
L_NOSALIR = 'N';
LOGIC-LIB-PAR-001 USING 'EXPEDICION','NOSALIR-CARLLENA',L_NOSALIR MODIFY;
 
(* Actualizar el fichero de identificacion del dbg a partir del recurso *)
 
#IFDEF MSWIN || MSWINNT
COMMAND ("echo " + GV_DBG_LOC
       + " >> %ADAIA_HOME%\log\dbg_"
       + $TRIM(GV_RECMAQREF,RIGHT) + '.rec');
#ELSE
COMMAND ("echo " + GV_DBG_LOC
       + " >> $ADAIA_HOME/log/dbg_"
       + $TRIM(GV_RECMAQREF,RIGHT) + '.rec');
#ENDIF
 
(* RSA 2010/09/15 Control de llave principal *)
IF L_FECCON < $DATES THEN BEGIN
   MSGBOX "Error: SPW Licencia bloqueda";
   DBG2   'Error: SPW Licencia bloqueada';
   L_SALIR = 1; (* SALIMOS *)
END;
 
(* Crear registro de Licencias si no existe *)
L_EXISTE = 0;
EXEC SQL
SELECT 1
  INTO :L_EXISTE
  FROM HISMOVALM
 WHERE HISALMCOD = -1;
IF NOT L_EXISTE THEN BEGIN
   CREATE HISMOVALM WITH
      HISALMCOD = -1,
      MOMMOV    = $NOW;
END;
 
(* En la aplicacion de RF no se puede elegir impresora on-line *)
GV_CAMIMPONL = 0;
L_GV_RECOPECOD = GV_RECOPECOD;
 
WHILE NOT L_SALIR DO BEGIN
   (* Pantalla de identificacion del operario *)
   SCREEN-RFT-LOG-002-P USING L_SALIR MODIFY
                            , L_TEXTO;
 
   IF NOT L_SALIR THEN BEGIN
      (* Actualizar fichero de indentificacion del dbg a partir del operario *)
 
#IFDEF MSWIN || MSWINNT
      COMMAND ("echo " + GV_DBG_LOC
             + " >> %ADAIA_HOME%\log\dbg_"
             + $TRIM(GV_RECOPEREF,RIGHT) + '.ope');
#ELSE
      COMMAND ("echo " + GV_DBG_LOC
             + " >> $ADAIA_HOME/log/dbg_"
             + $TRIM(GV_RECOPEREF,RIGHT) + '.ope');
#ENDIF
 
      (* Comprobar RECMAQOPE y crear sesion si procede     *)
      (* y actualizar el estado del recurso y el operario  *)
      (* si ya estaba trabajando preguntar, si es el mismo *)
      L_CONECTADO = 0;
      EXEC SQL
      SELECT 1, RECMAQCOD, NUMTUR, NUMTURORD,
             HISOPECOD, ACCCOD, HISACCCOD, HISACCCODSES
        INTO :L_CONECTADO, :L_RECMAQACT, :L_NUMTUR, :L_NUMTURORD,
             :L_HISOPECOD, :L_ACCCOD, :L_HISACCCOD, :L_HISACCCODSES
        FROM RECMAQOPE
       WHERE RECOPECOD = :GV_RECOPECOD;
 
      IF NOT L_CONECTADO THEN BEGIN
         LOGIC-LIB-CNT-001 USING 'CTUR', L_NUMTUR MODIFY;
         GV_NUMTUR    = L_NUMTUR;
         GV_NUMTURORD = 1;
         LOGIC-LIB-CNT-001 USING 'CHOP', L_HISOPECOD MODIFY;
         LOGIC-LIB-CNT-001 USING 'CHAC', L_HISACCCOD MODIFY;
         TRANSACTION DO BEGIN
 
            (* Contador de Licencias *)
            L_CONTADOR_LIC = 0;
            EXEC SQL
            SELECT COUNT(HISOPECOD)
              INTO :L_CONTADOR_LIC
              FROM RECMAQOPE;
 
            GV_HISOPECOD = L_HISOPECOD;
            GV_HISACCCOD = L_HISACCCOD;
            CREATE RECMAQOPE WITH
               RECOPECOD   = GV_RECOPECOD,
               RECMAQCOD   = GV_RECMAQCOD,
               FRAHORCOD   = GV_FRAHORCOD,
               MOMSIT      = GV_MOV_UPD_NOW,
               HISOPECOD   = GV_HISOPECOD,
               HISACCCOD   = GV_HISACCCOD,
               IMPEMIDOC   = GV_IMPEMIDOC,
               IMPEMIETI   = GV_IMPEMIETI,
               NUMTUR      = GV_NUMTUR,
               NUMTURORD   = GV_NUMTURORD,
               DBGFICREF   = GV_DBG_LOC,
               PROIDENUM   = $PIN;
            CREATE HISMOVOPE WITH
               HISOPECOD   = GV_HISOPECOD,
               ALMCOD      = GV_ALMCOD,
               NUMTUR      = GV_NUMTUR,
               NUMTURORD   = GV_NUMTURORD,
               MOMINI      = GV_MOV_UPD_NOW,
               RFTTERCOD   = L_CONTADOR_LIC + 1;
            CREATE HISMOVACC WITH
               HISACCCOD   = GV_HISACCCOD,
               ALMCOD      = GV_ALMCOD,
               MOMCRE      = GV_MOV_UPD_NOW,
               MOMINI      = GV_MOV_UPD_NOW,
               MOMFIN      = GV_MOV_UPD_NOW,
               MOMFINANT   = GV_MOV_UPD_NOW;
 
            L_CLAUSE = " WHERE HISALMCOD = -1";
            SELECT *FROM HISMOVALM SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
            FOR HISMOVALM SELECTED DO BEGIN
               IF L_CONTADOR_LIC >= CANUNI THEN BEGIN
                  MOMMOV = GV_MOV_UPD_NOW;
                  CANUNI = L_CONTADOR_LIC + 1;
               END;
               L_CONTADOR_LIC = CANUNI;
            END;
 
         END; (* TRANSACTION *)
 
#IFDEF MSWIN || MSWINNT
         COMMAND ('echo ' + $STR(L_CONTADOR_LIC)
                          + ' > %ADAIA_HOME%\log\dbg_adaia.cdl');
#ELSE
         COMMAND ('echo ' + $STR(L_CONTADOR_LIC)
                          + ' > $ADAIA_HOME/log/dbg_adaia.cdl');
#ENDIF
 
         LOGIC-LIB-MOV-INS USING 'SEIN', '',$SECTION_NAME,
                                 "Inicia Sesion",0,1;
         LOGIC-LIB-MOV-UPD USING 'OK  ', '',0;
 
      END;
      ELSE BEGIN
         IF NOT L_RECMAQACT THEN BEGIN
            (* Se ha hecho el inicio de turno, pero aun no ha iniciado *)
            (* sesion en el terminal de radio.                         *)
            EXEC SQL
            UPDATE RECMAQOPE SET RECMAQCOD = :GV_RECMAQCOD
             WHERE RECOPECOD = :GV_RECOPECOD;
 
            L_ESTACT = ' ';
            L_ORIACT = ' ';
            EXEC SQL
            SELECT ESTADO, ORIMOV
              INTO :L_ESTACT, :L_ORIACT
              FROM HISMOVOPE
             WHERE HISOPECOD = :L_HISOPECOD;
            IF L_ORIACT = 'TUIN' AND L_ESTACT = 'INIC' THEN BEGIN
               (* Termina el inicio de turno *)
               GV_HISOPECOD = L_HISOPECOD;
               LOGIC-LIB-MOV-UPD USING 'OK  ', '',0;
               (* Registra el inicio de sesion *)
               LOGIC-LIB-MOV-INS USING 'SEIN', '',$SECTION_NAME,
                                       "Inicia Sesion",0,1;
 
               LOGIC-LIB-MOV-UPD USING 'OK  ', '',0;
 
            END;
         END; (* IF NOT L_RECMAQACT *)
         IF L_RECMAQACT = GV_RECMAQCOD THEN BEGIN
            (* El operario consta trabajando en mismo recurso *)
            (* Incidencia de terminal apagado o reanuda la    *)
            (* sesion despues de haberla suspendido.          *)
            GV_NUMTUR = L_NUMTUR;
            GV_NUMTURORD = L_NUMTURORD;
            GV_HISOPECOD = L_HISOPECOD;
            GV_HISACCCOD = L_HISACCCOD;
            GV_HISACCCODANT = L_HISACCCODSES;
            L_ESTACT = ' ';
            L_ORIACT = ' ';
            EXEC SQL
            SELECT ESTADO, ORIMOV
              INTO :L_ESTACT, :L_ORIACT
              FROM HISMOVOPE
             WHERE HISOPECOD = :L_HISOPECOD;
            IF L_ORIACT = 'SESU' AND L_ESTACT = 'INIC' THEN BEGIN
               LOGIC-LIB-MOV-UPD USING 'SERE',
                                       "Reanuda sesion interrumpida",0;
            END;
            ELSE BEGIN
               LOGIC-LIB-MOV-UPD USING 'INTA',
                                       "Terminal apagado",0;
               L_INTERRUMPE = 1;
               IF L_ACCCOD THEN BEGIN
                  (* Si estaba trabajando, comprobar que la accion        *)
                  (* sigue existiendo y enlazar con el trabajo automatico *)
                  (* o manual.                                            *)
                  L_LLAMAR = ' ';
                  L_CLAUSE = " WHERE ACCCOD = " + $STR(L_ACCCOD);
                  SELECT *FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
                  FOR ACCTRA SELECTED DO BEGIN
                     IF ACCTIPTAR = 'PISU' THEN
                        L_LLAMAR = ' ';
                     ELSE BEGIN
                        IF ACCTIPTAR = 'MANU' THEN
                           L_LLAMAR = 'MANU';
                        ELSE
                           L_LLAMAR = 'AUTO';
                     END;
                  END;
                  IF L_LLAMAR = 'MANU' THEN
                     LOGIC-RFL-MAN-001 USING L_ACCCOD;
                  IF L_LLAMAR = 'AUTO' THEN
                     LOGIC-RFL-TRA-002 USING L_ACCCOD;
                  EXEC SQL
                  UPDATE RECMAQOPE SET ACCCOD = 0
                   WHERE RECOPECOD = :GV_RECOPECOD
                     AND RECMAQCOD = :GV_RECMAQCOD;
               END; (* IF L_ACCCOD *)
            END; (* ELSE IF L_ORIACT = 'SESU' AND L_ESTACT = 'INIC' *)
            L_CONECTADO = 0;
         END; (* IF L_RECMAQACT = GV_RECMAQCOD *)
      END; (* ELSE IF NOT L_CONECTADO *)
      IF L_CONECTADO THEN BEGIN
         L_TEXTO = "Oper en otro recurso";
      END;
      ELSE BEGIN
         L_MENU = 0;
         EXEC SQL
         SELECT MENRFTCOD
           INTO :L_MENU
           FROM RECMNU, RECOPE, RECMAQ
          WHERE RECOPE.RECOPECOD = :GV_RECOPECOD
            AND RECMAQ.RECMAQCOD = :GV_RECMAQCOD
            AND RECMNU.RECOPETIP = RECOPE.RECOPETIP
            AND RECMNU.RECMAQTIP = RECMAQ.RECMAQTIP;
         IF NOT L_MENU THEN BEGIN
            EXEC SQL
            SELECT MIN(MENRFTCOD)
              INTO :L_MENOPC
              FROM RFTMENOPC;
            L_MENU = L_MENOPC;
         END;
         IF L_MENU THEN BEGIN
            L_VOLVER = 1;
            WHILE L_VOLVER DO BEGIN
               L_FINTUR = 0;
 
DBG2
  'LLAMO A RFL-MEN-001 CON L_MENU ' + $STR(L_MENU);
 
               LOGIC-RFL-MEN-001 USING L_MENU;
               LOGIC-RFL-EXT-001 USING L_FINTUR MODIFY
                                     , L_SUSPEN MODIFY
                                     , L_VOLVER MODIFY
                                     , L_MOTIVO MODIFY;
            END;
            IF L_FINTUR THEN BEGIN
               (* Si el parametro esta activo, se debe vaciar la carretilla*)
               (* antes de salir con final de turno.                       *)
               IF L_NOSALIR = 'S' THEN
                  LOGIC-CNT-PIC-001;
 
               (* Sale del menu, tenemos que borrar RECMAQOPE y crear *)
               (* registro de fin de sesion en HISMOVOPE              *)
               L_EXISTE = 0;
               EXEC SQL
               SELECT 1
                 INTO :L_EXISTE
                 FROM RECMAQOPE
                WHERE RECOPECOD = :GV_RECOPECOD;
               IF L_EXISTE = 1 THEN BEGIN
 
                  (* RS 06/03/2008 - LINI01 *)
                  L_ORIMOV = 'SEFI';
                  L_OBS = "Finaliza Sesion";
                  IF L_SUSPEN THEN BEGIN
                     L_ORIMOV = 'SESU';
                     L_OBS = L_MOTIVO;
                  END;
                  L_SALIR = 1;
 
                  LOGIC-LIB-MOV-INS USING L_ORIMOV, '',$SECTION_NAME,
                                          L_OBS,0,1;
                  LOGIC-LIB-MOV-UPD USING 'OK  ', '',0,L_ORIMOV;
                  EXEC SQL
                  DELETE FROM RECMAQOPE
                   WHERE RECOPECOD = :GV_RECOPECOD;
 
                  EXEC SQL
                  DELETE FROM HISMOVOPE
                   WHERE HISOPECOD = :GV_HISOPECOD;
 
                  EXEC SQL
                  DELETE FROM HISMOVACC
                   WHERE HISACCCOD = :GV_HISACCCOD;
 
                  (* Desasignar operario de la cola de picking. AP 18/09/00 *)
                  EXEC SQL
                  UPDATE ACCCOL SET RECOPECOD = 0
                   WHERE RECOPECOD = :GV_RECOPECOD
                     AND RECMAQCOD = :GV_RECMAQCOD
                     AND    COLPIC = 'S';
 
               END; (* IF L_EXISTE = 1 *)
            END; (* IF L_FINTUR  *)
            ELSE BEGIN
 
               L_EXISTE = 0;
               EXEC SQL
               SELECT 1
                 INTO :L_EXISTE
                 FROM RECMAQOPE
                WHERE RECOPECOD = :GV_RECOPECOD;
               IF L_EXISTE = 1 THEN BEGIN
 
                  LOGIC-LIB-MOV-INS USING 'SESU', '',$SECTION_NAME,
                                          L_MOTIVO, 0,1;
 
               END;
            END; (* ELSE IF L_FINTUR *)
         END; (* IF L_MENU *)
      END; (* ELSE IF L_CONECTADO *)
   END; (* IF NOT L_SALIR *)
END; (* WHILE *)
GV_CAMIMPONL = 1;
GV_RECOPECOD = L_GV_RECOPECOD;
 
DBG1
   'FIN PROGRAMA --------------------';
EXIT;


 
SCREEN-RFT-PIC-001-F:NOWARN;
(* Release Label (39) *)
PARM L_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
PARM L_CNTCOD LIKE(NAME=CNTCOD);
PARM L_ACCCOD1 LIKE(NAME=ACCCOD);
PARM L_ACCCOD2 LIKE(NAME=ACCCOD);
PARM L_CAN1 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_CAN2 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_FINVIAJE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_UBIORI1 LIKE(NAME=ALMUBICOD);
PARM L_INCIDENCIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_TEXTO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
PARM L_INCIDEN FORMAT(TYPE=CHAR,LENGTH=5,SUBTYPE=ALPHA);
PARM L_TEXTO_CNT FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
PARM L_DESASIGNAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_PICINV FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_CNT FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
PARM P_NO_HACER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_LEIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_ACT_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET WINDOW(ROW=1,COL=0,HEIGHT=12,WIDTH=40,LINE=SINGLE,FORE=BLACK,BACK=MAGENTA,
           COORDROW=UP,COORDCOL=LEFT);
(*****************************************************************************)
(* Programa: SCREEN-RFT-PIC-001-F:NOWARN                                     *)
(* Autor: ltrgen                                                             *)
(* Fecha de creacion:20090408  Hora:161508                                   *)
(*****************************************************************************)
(* SCREEN-RFT-PIC-001-P USING *)
SECTION "SCREEN-RFT-PIC-001-" + GVPF_TTR
 USING
   L_ACCCOLCOD MODIFY,
   L_CNTCOD MODIFY,
   L_ACCCOD1 MODIFY,
   L_ACCCOD2 MODIFY,
   L_CAN1 MODIFY,
   L_CAN2 MODIFY,
   L_SALIR MODIFY,
   L_FINVIAJE MODIFY,
   L_UBIORI1 MODIFY,
   L_INCIDENCIA MODIFY,
   L_TEXTO MODIFY,
   L_INCIDEN MODIFY,
   L_TEXTO_CNT MODIFY,
   L_DESASIGNAR MODIFY,
   L_PICINV MODIFY,
   L_CNT MODIFY,
   P_NO_HACER MODIFY,
   P_LEIDO MODIFY,
   P_PARTIR MODIFY,
   P_ACT_PARTIR MODIFY;
EXIT;
 
SCREEN-RFT-PIC-001-8F:NOWARN;
(* Release Label (39) *)
PARM L_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
PARM L_CNTCOD LIKE(NAME=CNTCOD);
PARM L_ACCCOD1 LIKE(NAME=ACCCOD);
PARM L_ACCCOD2 LIKE(NAME=ACCCOD);
PARM L_CAN1 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_CAN2 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_FINVIAJE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_UBIORI1 LIKE(NAME=ALMUBICOD);
PARM L_INCIDENCIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_TEXTO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
PARM L_INCIDEN FORMAT(TYPE=CHAR,LENGTH=5,SUBTYPE=ALPHA);
PARM L_TEXTO_CNT FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
PARM L_DESASIGNAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_PICINV FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_CNT FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
PARM P_NO_HACER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_LEIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_ACT_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET WINDOW(ROW=1,COL=0,HEIGHT=12,WIDTH=40,LINE=SINGLE,FORE=BLACK,BACK=MAGENTA,
           COORDROW=UP,COORDCOL=LEFT);
(*****************************************************************************)
(* Programa: SCREEN-RFT-PIC-001-8F:NOWARN                                     *)
(* Autor: ltrgen                                                             *)
(* Fecha de creacion:20090408  Hora:161513                                   *)
(*****************************************************************************)
(* SCREEN-RFT-PIC-001-P USING *)
SECTION "SCREEN-RFT-PIC-001-" + GVPF_TTR
 USING
   L_ACCCOLCOD MODIFY,
   L_CNTCOD MODIFY,
   L_ACCCOD1 MODIFY,
   L_ACCCOD2 MODIFY,
   L_CAN1 MODIFY,
   L_CAN2 MODIFY,
   L_SALIR MODIFY,
   L_FINVIAJE MODIFY,
   L_UBIORI1 MODIFY,
   L_INCIDENCIA MODIFY,
   L_TEXTO MODIFY,
   L_INCIDEN MODIFY,
   L_TEXTO_CNT MODIFY,
   L_DESASIGNAR MODIFY,
   L_PICINV MODIFY,
   L_CNT MODIFY,
   P_NO_HACER MODIFY,
   P_LEIDO MODIFY,
   P_PARTIR MODIFY,
   P_ACT_PARTIR MODIFY;
EXIT;
 
SCREEN-RFT-PIC-001-5F:NOWARN;
(* Release Label (39) *)
PARM L_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
PARM L_CNTCOD LIKE(NAME=CNTCOD);
PARM L_ACCCOD1 LIKE(NAME=ACCCOD);
PARM L_ACCCOD2 LIKE(NAME=ACCCOD);
PARM L_CAN1 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_CAN2 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_FINVIAJE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_UBIORI1 LIKE(NAME=ALMUBICOD);
PARM L_INCIDENCIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_TEXTO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
PARM L_INCIDEN FORMAT(TYPE=CHAR,LENGTH=5,SUBTYPE=ALPHA);
PARM L_TEXTO_CNT FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
PARM L_DESASIGNAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_PICINV FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_CNT FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
PARM P_NO_HACER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_LEIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_ACT_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET WINDOW(ROW=1,COL=0,HEIGHT=12,WIDTH=40,LINE=SINGLE,FORE=BLACK,BACK=MAGENTA,
           COORDROW=UP,COORDCOL=LEFT);
(*****************************************************************************)
(* Programa: SCREEN-RFT-PIC-001-5F:NOWARN                                     *)
(* Autor: ltrgen                                                             *)
(* Fecha de creacion:20090408  Hora:161517                                   *)
(*****************************************************************************)
(* SCREEN-RFT-PIC-001-P USING *)
SECTION "SCREEN-RFT-PIC-001-" + GVPF_TTR
 USING
   L_ACCCOLCOD MODIFY,
   L_CNTCOD MODIFY,
   L_ACCCOD1 MODIFY,
   L_ACCCOD2 MODIFY,
   L_CAN1 MODIFY,
   L_CAN2 MODIFY,
   L_SALIR MODIFY,
   L_FINVIAJE MODIFY,
   L_UBIORI1 MODIFY,
   L_INCIDENCIA MODIFY,
   L_TEXTO MODIFY,
   L_INCIDEN MODIFY,
   L_TEXTO_CNT MODIFY,
   L_DESASIGNAR MODIFY,
   L_PICINV MODIFY,
   L_CNT MODIFY,
   P_NO_HACER MODIFY,
   P_LEIDO MODIFY,
   P_PARTIR MODIFY,
   P_ACT_PARTIR MODIFY;
EXIT;
 
SCREEN-RFT-PIC-001-8P:NOWARN;
(* Release Label (39) *)
PARM L_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
PARM L_CNTCOD LIKE(NAME=CNTCOD);
PARM L_ACCCOD1 LIKE(NAME=ACCCOD);
PARM L_ACCCOD2 LIKE(NAME=ACCCOD);
PARM L_CAN1 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_CAN2 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_FINVIAJE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_UBIORI1 LIKE(NAME=ALMUBICOD);
PARM L_INCIDENCIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_TEXTO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
PARM L_INCIDEN FORMAT(TYPE=CHAR,LENGTH=5,SUBTYPE=ALPHA);
PARM L_TEXTO_CNT FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
PARM L_DESASIGNAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_PICINV FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_CNT FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
PARM P_NO_HACER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_LEIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_ACT_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET WINDOW(ROW=1,COL=0,HEIGHT=12,WIDTH=40,LINE=SINGLE,FORE=BLACK,BACK=MAGENTA,
           COORDROW=UP,COORDCOL=LEFT);
(*****************************************************************************)
(* Programa: SCREEN-RFT-PIC-001-8P:NOWARN                                     *)
(* Autor: ltrgen                                                             *)
(* Fecha de creacion:20090408  Hora:161522                                   *)
(*****************************************************************************)
(* SCREEN-RFT-PIC-001-P USING *)
SECTION "SCREEN-RFT-PIC-001-" + GVPF_TTR
 USING
   L_ACCCOLCOD MODIFY,
   L_CNTCOD MODIFY,
   L_ACCCOD1 MODIFY,
   L_ACCCOD2 MODIFY,
   L_CAN1 MODIFY,
   L_CAN2 MODIFY,
   L_SALIR MODIFY,
   L_FINVIAJE MODIFY,
   L_UBIORI1 MODIFY,
   L_INCIDENCIA MODIFY,
   L_TEXTO MODIFY,
   L_INCIDEN MODIFY,
   L_TEXTO_CNT MODIFY,
   L_DESASIGNAR MODIFY,
   L_PICINV MODIFY,
   L_CNT MODIFY,
   P_NO_HACER MODIFY,
   P_LEIDO MODIFY,
   P_PARTIR MODIFY,
   P_ACT_PARTIR MODIFY;
EXIT;


INCLUDE-RFT-PIC-010-P:
  (* Fecha ultima modificacion (23-Jul-2008 12:49:45) *)
   GV_PARENT=$SECTION_NAME;
   CREATE RfLog WITH
      TEXTLINE = $EDIT($NOW,'YY/MM/DD 0H:0I:0S')
         + '|' + $STR($NOW - GV_RFMOM)
         + '|' + $TRIM(GV_RECMAQREF,RIGHT)
         + '|' + $TRIM(GV_RECOPEREF,RIGHT)
         + '|' + $TRIM($SECTION_NAME,RIGHT)
         + '|' + $STR(GV_HISOPECOD)
         + '|' + '#'
         + '|' + GV_RFSENTIDO
         + '|' + $STR(GV_RFKEY)
         + '|' + $TRIM(L_ARTREF,RIGHT)
         + '|' + $TRIM(L_ARTDES,RIGHT)
         + '|' + $TRIM(L_AVISO,RIGHT)
         + '|' + $TRIM(L_BARRAS,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI1,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI2,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI3,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI4,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI5,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI6,RIGHT)
         + '|' + $TRIM(L_RESERVADO1,RIGHT)
         + '|' + $TRIM(L_RESERVADO2,RIGHT)
         + '|' + $TRIM(L_RESERVADO3,RIGHT)
         + '|' + $TRIM(L_RESERVADO4,RIGHT)
         + '|' + $TRIM(L_RESERVADO5,RIGHT)
         + '|' + $TRIM(L_RESERVADO6,RIGHT)
         ; GV_RFSENTIDO = '?'; GV_RFKEY = -99; GV_RFMOM = $NOW;
   LOGIC-MSG-RFT-001;
EXIT;

(*** INICIO PPO05 ***)

LOGIC-PIC-INC-001:
(* Release Label (19) *)
PARM L_ACCCOD LIKE(NAME=ACCCOD);
PARM L_INCIDEN FORMAT(TYPE=CHAR,LENGTH=5,SUBTYPE=ALPHA);
PARM L_CANTIDAD LIKE(NAME=CAN);
PARM L_SEGUNDA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_STOCK FORMAT(TYPE=INT,LENGTH=6,SUBTYPE=NUMERIC);
PARM L_ROTO FORMAT(TYPE=INT,LENGTH=6,SUBTYPE=NUMERIC);
PARM L_GENERA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_PREPAR_ESPERA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_AUTOREP FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_PES LIKE(NAME=PES);
PARM P_NOSERVIR LIKE(NAME=CANUNI);
PARM P_UBIORIGEN FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
SET TITLE("Incidencias de Picking");
DCL L_ACCCODNEW LIKE(NAME=ACCCOD);
DCL L_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
DCL L_ACCS_IN FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_ALMCOD FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
DCL L_ALMUBICODFAN LIKE(NAME=ALMUBICOD);
DCL L_ALMUBICOD_AUX LIKE(NAME=ALMUBICOD);
DCL L_ALMUBIREF LIKE(NAME=ALMUBIREF);
DCL L_ALMUBIREFORI LIKE(NAME=ALMUBIREF);
DCL L_ARTCOD LIKE(NAME=ARTCOD);
DCL L_ARTCODHAY LIKE(NAME=ARTCOD);
DCL L_ARTPRICOD LIKE(NAME=ARTPRICOD);
DCL L_ARTREP LIKE(NAME=ARTCOD);
DCL L_CAMBIARART FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAN LIKE(NAME=CAN);
DCL L_CANACC LIKE(NAME=CAN);
DCL L_CANAUX LIKE(NAME=CANUNI);
DCL L_CANAUX2 LIKE(NAME=CANUNI);
DCL L_CANTEORICA FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CLAMOV FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=600,SUBTYPE=ALPHA);
DCL L_CNTCOD LIKE(NAME=CNTCOD);
DCL L_CNTCODFAN LIKE(NAME=CNTCOD);
DCL L_CNTDORREF LIKE(NAME=CNTDORREF);
DCL L_COLSIGCOD LIKE(NAME=COLSIGCOD);
DCL L_DIAS-CNTDOR-FC LIKE(NAME=VALNUM);
DCL L_DIFERENCIA LIKE(NAME=CANUNI);
DCL L_DIMCOD LIKE(NAME=DIMCOD);
DCL L_ESPICKUDS FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_EXPORDCOD LIKE(NAME=EXPORDCOD);
DCL L_EXPORDLIN LIKE(NAME=EXPORDLIN);
DCL L_GENTABVAL LIKE(NAME=GENTABVAL);
DCL L_GEST-CRIPICK FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_HAYREPOSICION FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYSTOCK FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HOY FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_LOTE LIKE(NAME=LOTE);
DCL L_MOM FORMAT(TYPE=CHAR,BYTES=19,SUBTYPE=DATETIME,NULL=YES);
DCL L_NDOCOD LIKE(NAME=NDOCOD);
DCL L_NUMUNI LIKE(NAME=NUMUNI);
DCL L_OBS LIKE(NAME=OBS);
DCL L_ORIMOV FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_PESAUX2 LIKE(NAME=PES);
DCL L_PESDIF LIKE(NAME=PES);
DCL L_PESEXP LIKE(NAME=PESUNI);
DCL L_PESTEORICO FORMAT(TYPE=FLOAT,LENGTH=10,DECIMAL=3,BYTES=8,SUBTYPE=NUMERIC,
                        NULL=YES);
DCL L_PESUNI LIKE(NAME=PES);
DCL L_PES_IN LIKE(NAME=PESUNI);
DCL L_PICK-DINAM FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
DCL L_PICKUDS FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_PPO05 FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_RECMAQCOD LIKE(NAME=RECMAQCOD);
DCL L_RECOPECOD LIKE(NAME=RECOPECOD);
DCL L_REPONER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_STOMAX LIKE(NAME=CANPICMAX);
DCL L_STOMIN LIKE(NAME=CANPICMIN);
DCL L_TERPROCOD LIKE(NAME=TERPROCOD);
DCL L_TERREF LIKE(NAME=TERREF);
DCL L_UBIORICOD LIKE(NAME=UBIORICOD);
DCL L_UBIORICOD1 FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_UBIPICDIN LIKE(NAME=UBIPICDIN);
DCL L_UBITIP LIKE(NAME=UBITIP);
DCL L_UNIEXP LIKE(NAME=UNIEXP);
DCL L_VUELTA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCLVIEW V_UBI_INUTIL COLUMNS(ALMUBICOD) AS
   ( SELECT ALMUBICOD
       FROM ALMUBI
      WHERE ALMUBI.UBISIT = 'OK'
        AND ALMUBI.UBIEST = 'LL'
        AND ALMUBI.UBITIP = 'PI'
        AND ALMUBI.CNTCOD <> 0
        AND NOT EXISTS (SELECT 1 FROM ACCTRA
                         WHERE ACCTRA.UBIORICOD = ALMUBI.ALMUBICOD
                           AND ACCEST <> 'CO')
        AND NOT EXISTS (SELECT 1 FROM ACCTRA
                         WHERE ACCTRA.UBIDESCOD = ALMUBI.ALMUBICOD
                           AND ACCEST <> 'CO')
        AND NOT EXISTS (SELECT 1 FROM CNTNDO
                         WHERE CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD)
        AND NOT EXISTS (SELECT 1 FROM ARTALM
                         WHERE ARTALM.UBIPIC = ALMUBI.ALMUBICOD));
 
(****************************************************************************)
(* Titulo: Incidencias de Picking: Tratamiento                              *)
(* Asunto: ADAIA V2 Primera Version                                         *)
(* Creado: Ana Armijo 29/11/1999                                            *)
(* Modif :                                                                  *)
(* Descripcion                                                              *)
(*    Este programa gestiona las incidencias que se contemplan durante la   *)
(*    realizacion de un movimiento de picking.                              *)
(*    En la incidencia de stock insuficiente, que es la mas complicada:     *)
(*    . Comprueba si se puede hacer picking en otra ubicacion que contenga  *)
(*      el mismo articulo.                                                  *)
(*    . Registra el ajuste de stock en la ubicacion de picking.             *)
(*    . Si es posible genera una reposicion.                                *)
(*    . Si estamos en primera vuelta, genera una accion de picking en la    *)
(*      cola de segunda vuelta.                                             *)
(*    En la incidencia de rotura de stock:                                  *)
(*    . Registra la salida de stock por rotura de la ubicacion de picking.  *)
(****************************************************************************)
(* Fecha.................: 28/02/02                                         *)
(* Programador...........: EMA                                              *)
(* Proyecto o incidencia.: Se aÀade el peso como par-metro que recibe este  *)
(*                         programa y se le pasa al interfaz de ajuste de   *)
(*                         stock.                                           *)
(****************************************************************************)
(* Fecha.................: 9/05/2001                                        *)
(* Programador...........: PAM                                              *)
(* Proyecto o incidencia.: V2pd Cambio din-mico de Ubicaciãn de Picking     *)
(*                              y Reposiciãn MÃltiple                       *)
(* Descripcion...........: Se aÀade MODIFY en la llamada a UBC-REP-001 dado *)
(*                          que la ubicaciãn de Picking del articulo        *)
(*                          cambiar- si el articulo es de Picking din-mico. *)
(*                          Tambi+n se le pasa la acciãn, puesto que en     *)
(*                          en caso de que haya cambio de ubicaciãn se      *)
(*                          encarga de redireccionar las acciones           *)
(*                          Asimismo se aÀade un par-metro mas en la llamada*)
(*                          a TRA-PIC-003, indicando la ubicaciãn origen con*)
(*                          la que se debe crear la acciãn de continuaciãn  *)
(*                          Ademas,   en caso de que cambie la ubicacion    *)
(*                          de Picking, liberamos la original               *)
(****************************************************************************)
(* Fecha.................: 10/09/2001                                       *)
(* Programador...........: PAM                                              *)
(* Proyecto o incidencia.: Incidencia. Se incluye en TRANSACTION la vista   *)
(*                         V_UBI_INUTIL, y se pone igual a la de TRA-PIC-002*)
(****************************************************************************)
(* Fecha.................: 29/11/2001                                       *)
(* Programador...........: EV                                               *)
(* Proyecto o incidencia.: Incidencia. Al pulsar incidencia de unidades rota*)
(*                         debe generar interfaz de ajuste de stock como lo *)
(*                         hace con la incidencia de stock insuficiente .   *)
(****************************************************************************)
(* Fecha.................: 29/05/2002                                       *)
(* Programador...........: PAM                                              *)
(* Proyecto o incidencia.: Modificada la llamada a INT-AST-000 se han       *)
(*                         aÀadido mas parametros.                          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/07/2002                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: ALD11 - Preparacion para no servir unidades     *)
(*    Descripcion          : Se aumenta el parametro L_INCIDEN a 5 caracteres*)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 19/09/2002                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2gcrp Gestion criterio de rotacion             *)
(*    Descripciãn          : Solicitado por @Carrefour. Hay que controlar    *)
(*       todos los contenidos de una articulo, por si tienen gestion de      *)
(*       criterio de rotacion en picking.                                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/01/2003                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: L'OREAL PICKING SIMULTANEO CON PICK-UDS A SI.   *)
(*    Descripciãn          :                                                 *)
(*      EV: SE COMENTA LA INICIALIZACIþN DE L_HAYREPOSICION = 1 PARA QUE     *)
(*      EN LA PREPARACIþN DEL PICKING DE UNIDADES, CUANDO EL OPERARIO        *)
(*      PULSE STOCK INSUFICIENTE, NO LE MUESTRE EL MENSAJE -ESPERE REPOSICION*)
(*      Y LE PERMITA REALIZAR LA ACCION QUE TIENE EN PANTALLA.               *)
(*      EN ESE CASO, CUANDO FALTA STOCK PARA COMPLETAR LA ACCION, SE LE MUES-*)
(*      TRA EL MENSAJE -LINEA INCOMPLETA-, Y SI EL OPERARIO QUIERE ESPERAR   *)
(*      LA REPOSICION, PULSA DESASIGNAR.    17-01-2003                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 07/03/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2iur - Incidencia unidades rotas               *)
(*    Descripciãn          : Solicitado por Logista.                         *)
(*       La incidencia de unidades rotas, ademas de actualizar el stock, po- *)
(*       dran generar reposiciones y segundas vueltas.                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/09/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia reportada por Logista                *)
(*    Descripcion          : A la hora de calcular el stock, se debe tener   *)
(*       encuenta acciones iniciadas con el mismo origen y el mismo articulo *)
(*       por si hay otro operario en la misma ubicacion y confirman en cntdor*)
(*       destino.                                                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 15/11/2004                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia:  Incidencia GCON 7614.                          *)
(*    Descripcion          : Al pulsar unidades rotas no comprobaba si en la *)
(*       ubicacion habia stock para hacer la salida, lo que provocaba un     *)
(*       error. Se comprueba si hay stock y si la diferencia entre el stock  *)
(*       y las unidades a sacar es mayor o igual 0 se hace lo que se hacia   *)
(*       en caso contrario no se hace nada.                                  *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 10/03/2005                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia 8103 - ADAIA.                        *)
(*    Descripcion          : Se accedia con un acceso directo al contenedor  *)
(*                          de ubicaciones fantasma, en lugar de llamar al   *)
(*                          LIB-CNT-001.                                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 16/03/2005                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia 8126 - Loreal.                       *)
(*    Descripcion          : Se cambian las llamadas al INT-AST-000, interfaz*)
(*                          de ajustes de stock, despu+s del LIB-MOV-002, de *)
(*                          manera que nos aseguremos de que el movimiento   *)
(*                          realmente se ha hecho.                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/02/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 17499 - AZTV                         *)
(*    Descripcion          : Cuando se pulsa Incidencia de unidades rotas,   *)
(*       Adaia entiende que el stock se queda a 0 y por tanto genera una re- *)
(*       posicion. Esto no siempre ocurre, por tanto se debe comprobar para  *)
(*       este caso, si realmente el stock se queda por debajo del minimo an- *)
(*       tes de generar reposicion.                                          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 18/03/2009                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: CIR37                                           *)
(*    Descripcion          : Se deja la modificacion hecha para loreal el    *)
(*       17/01/2003 por EV, solo para LOREAL.                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/04/2009                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 21596                                *)
(*    Descripcion          : La interfaz debe enviarse solo si esta marcado  *)
(*       el campo GENTABVAL a 1.                                             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/07/2009                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 22432                                *)
(*    Descripcion          : Si se pulsan las incidencias de unidades rotas y*)
(*       servir menos, no siempre es necesario generar segunda vuelta.       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/07/2011                                      *)
(*    Programador          : ID                                              *)
(*    Proyecto o incidencia: Incidencia 29565                                *)
(*    Descripcion          : Se impide que se realice la reposicion si la    *)
(*                           ubicacion no es de picking.                     *)
(*****************************************************************************)
 
DBG1
   'INICIO PROGRAMA -----------------';
DBG1
   'L_ACCCOD ' + $STR(L_ACCCOD);
DBG1
   'L_INCIDEN ' + L_INCIDEN;
DBG1
   'L_CANTIDAD ' + $STR(L_CANTIDAD);
DBG1
   'L_SEGUNDA ' + $STR(L_SEGUNDA);
DBG1
   'L_STOCK ' + $STR(L_STOCK);
DBG1
   'L_ROTO ' + $STR(L_ROTO);
DBG1
   'L_PREPAR_ESPERA ' + $STR(L_PREPAR_ESPERA);
DBG1
   'L_AUTOREP ' + $STR(L_AUTOREP);
DBG1
   'P_PES ' + $STR(P_PES);
DBG1
   'P_NOSERVIR ' + $STR(P_NOSERVIR);
DBG1
   'P_UBIORIGEN ' + $STR(P_UBIORIGEN);
L_DIAS-CNTDOR-FC = 0;
LOGIC-LIB-PAR-001 USING 'DEPURACION',
                        'DIAS-CNTDOR-FC',
                        ' ',
                        L_DIAS-CNTDOR-FC MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION',
                        'GEST-CRIROT-PICK',
                        L_GEST-CRIPICK MODIFY;
 
IF P_UBIORIGEN <> 0 THEN BEGIN
L_UBIORICOD = P_UBIORIGEN;
P_UBIORIGEN = 0;
END;
EXEC SQL
SELECT ACCTRA.UBIORICOD, ALMUBI.ALMCOD, ACCTRA.ARTCOD, ACCCOL.COLSIGCOD,
       ACCCOL.ACCCOLCOD,
       ACCTRA.EXPORDCOD, ACCTRA.EXPORDLIN, ALMUBI.DIMCOD, ALMUBI.UBITIP
  INTO :L_UBIORICOD1, :L_ALMCOD, :L_ARTCOD, :L_COLSIGCOD, :L_ACCCOLCOD,
       :L_EXPORDCOD, :L_EXPORDLIN, :L_DIMCOD, :L_UBITIP
  FROM ACCTRA, ACCCOL, ALMUBI
 WHERE    ACCTRA.ACCCOD = :L_ACCCOD
   AND ACCTRA.UBIORICOD = ALMUBI.ALMUBICOD
   AND ACCTRA.ACCCOLCOD = ACCCOL.ACCCOLCOD;
 
EXEC SQL
SELECT ALMUBIREF
  INTO :L_ALMUBIREFORI
  FROM ALMPRV
 WHERE ALMUBICOD = :L_UBIORICOD;
 
(* RS 19/09/02 Se reestructura el programa por si hubiera gestion de *)
(* criterio de rotacion en picking.                                  *)
 
(* se busca si existe ya algo en fantasma de picking para meterlo ahi *)
L_HOY = $EDIT($DATES,'YYYY/MM/DD');
L_CNTDORREF = L_HOY[1:4] + L_HOY[6:7];
L_CNTCODFAN = 0;
L_ALMUBICODFAN = 0;
EXEC SQL
SELECT ALMUBI.CNTCOD, ALMUBICOD
  INTO :L_CNTCODFAN, :L_ALMUBICODFAN
  FROM CNTDOR, ALMUBI
 WHERE     CNTDORREF = :L_CNTDORREF
   AND ALMUBI.CNTCOD = CNTDOR.CNTCOD;
IF NOT L_ALMUBICODFAN THEN BEGIN
   L_CNTCODFAN = 0;
   EXEC SQL
   SELECT CNTCOD
     INTO :L_CNTCODFAN
     FROM CNTDOR
    WHERE CNTDORREF = :L_CNTDORREF;
 
   IF NOT L_CNTCODFAN THEN BEGIN
      IF NOT L_DIAS-CNTDOR-FC THEN
         L_MOM = $NULL;
      ELSE
         L_MOM = $EDIT($DATE + L_DIAS-CNTDOR-FC,'YYYY-MM-DD') + ' 00:00:00';
      LOGIC-LIB-CNT-001 USING 'CCNT',L_CNTCODFAN MODIFY;
      CREATE CNTDOR WITH
         CNTCOD = L_CNTCODFAN,
         CNTDORREF = L_CNTDORREF,
         CNTTIP = 'PI',
         CNTSIT = 'OK',
         MULREF = 'S',
         MOMBAJ = L_MOM,
         DIM = L_DIMCOD;
   END;
   LOGIC-LIB-CNT-001 USING 'CFAN', L_ALMUBICODFAN MODIFY;
   CREATE ALMUBI WITH
      ALMUBICOD = L_ALMUBICODFAN,
      CNTCOD = L_CNTCODFAN,
      ALMCOD = L_ALMCOD,
      UBIROT = 1,
      ULTENT = $NOW,
      ULTSAL = $NOW,
      UBIEST = 'LL',
      UBISIT = 'OK',
      MOTIVO = L_ALMUBIREFORI,
      UBITIP = 'FC';
END;
 
L_CANTEORICA = 0;
L_PESTEORICO = 0;
 
EXEC SQL
SELECT SUM(CNTNDO.CANUNI), SUM(CNTNDO.PES)
  INTO :L_CANTEORICA, :L_PESTEORICO
  FROM ALMUBI, CNTNDO
 WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
   AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
   AND CNTNDO.ARTCOD    = :L_ARTCOD;
L_CANTEORICA = $NVL(L_CANTEORICA,0);
L_PESTEORICO = $NVL(L_PESTEORICO,0);
 
EXEC SQL
SELECT TERPROCOD
  INTO :L_TERPROCOD
  FROM CNTDOR, ALMUBI
 WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
   AND    CNTDOR.CNTCOD = ALMUBI.CNTCOD;
 
IF L_INCIDEN[1] = '1' THEN BEGIN
   (* RS 23/09/03 Hay que tener en cuenta las acciones iniciadas por si hay *)
   (* concurrencia de operarios                                             *)
   EXEC SQL
   SELECT SUM(CAN)
     INTO :L_ACCS_IN
     FROM ACCTRA
    WHERE UBIORICOD = :L_UBIORICOD
      AND    ACCEST = 'IN'
      AND    ARTCOD = :L_ARTCOD
      AND ACCTIPTAR = 'PISU'
      AND    ACCCOD <> :L_ACCCOD;
   L_ACCS_IN = $NVL(L_ACCS_IN,0);
 
   (* Las cantidad de las acciones iniciadas debe ser la que muestra en *)
   (* pantalla al operario, no la que lleva en la accion, por eso si la *)
   (* suma supera a lo que hay en la ubicacion, se considera esta como  *)
   (* la mostrada.                                                      *)
   IF L_CANTEORICA <= L_ACCS_IN THEN
      L_ACCS_IN = L_CANTEORICA;
 
   L_DIFERENCIA = L_CANTEORICA - L_STOCK - L_ACCS_IN;
 
   IF L_DIFERENCIA < 0 THEN
      L_DIFERENCIA = 0;
 
   IF P_PES <> 0 THEN BEGIN
      L_PES_IN = 0;
      IF L_ACCS_IN THEN BEGIN
         EXEC SQL
         SELECT PESUNI, NUMUNI
           INTO :L_PESEXP, :L_NUMUNI
           FROM ARTPRE, ART
          WHERE    ART.ARTCOD = :L_ARTCOD
            AND ARTPRE.UNITIP = ART.UNIEXP;
 
         L_PES_IN = L_ACCS_IN / L_NUMUNI * L_PESEXP;
      END;
 
      L_PESDIF = L_PESTEORICO - P_PES - L_PES_IN;
 
      IF L_PESDIF < 0 THEN
         L_PESDIF = 0;
   END;
 
   (* RS 01/04/2009 - Incidencia 21596 *)
   L_GENTABVAL = 0;
   EXEC SQL
   SELECT GENTABVAL
     INTO :L_GENTABVAL
     FROM GENTAB
    WHERE GENTABCOD = 'AJST'
      AND GENTABREG = 'INSI';
 
   (* Modificacion enviada desde Nabisco *)
   (* Lanza ajuste de stock deberiamos poner un parametro *)
   IF L_DIFERENCIA > 0 THEN BEGIN
      L_ORIMOV = 'TRAS';
      L_CLAMOV = 'INCI';
      L_OBS = "Stock Insuficiente";
 
      IF L_GEST-CRIPICK <> 'S' THEN BEGIN
         EXEC SQL
         SELECT CNTNDO.NDOCOD, CNTNDO.LOTE
           INTO :L_NDOCOD, :L_LOTE
           FROM ALMUBI, CNTNDO
          WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
            AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
            AND    CNTNDO.ARTCOD = :L_ARTCOD;
 
         IF L_GENTABVAL THEN
            LOGIC-INT-AST-000 USING L_ARTCOD
                                  , (L_DIFERENCIA * -1)
                                  , 'INSI'
                                  , L_LOTE
                                  , (L_PESDIF * -1)
                                  , ' '
                                  , L_UBIORICOD
                                  , L_TERPROCOD
                                  , L_TERPROCOD
                                  , 0
                                  , L_ALMCOD;
         LOGIC-LIB-MOV-002 USING L_NDOCOD
                               , L_CNTCODFAN
                               , L_CNTCODFAN
                               , L_DIFERENCIA
                               , L_ORIMOV
                               , L_CLAMOV
                               , L_OBS;
      END; (* IF L_GEST-CRIPICK <> 'S' *)
      ELSE BEGIN
         L_CANAUX = L_DIFERENCIA;
         L_PESUNI = L_PESDIF / L_CANAUX;
         L_CLAUSE = ", ALMUBI WHERE ALMUBI.ALMUBICOD = " +
                    $STR(L_UBIORICOD) +
                    " AND X0.CNTEXTCOD = ALMUBI.CNTCOD" +
                    " AND X0.ARTCOD = " + $STR(L_ARTCOD) +
                    " ORDER BY CRIROT";
         SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
         FOR CNTNDO SELECTED DO BEGIN
            IF NOT L_CANAUX THEN
               BREAK;
            IF L_CANAUX <= CANUNI THEN
               L_CANAUX2 = L_CANAUX;
            ELSE
               L_CANAUX2 = CANUNI;
            L_CANAUX = L_CANAUX - L_CANAUX2;
            L_PESAUX2 = L_CANAUX2 * L_PESUNI;
 
            IF L_GENTABVAL THEN
               LOGIC-INT-AST-000 USING L_ARTCOD
                                     , (L_CANAUX2 * -1)
                                     , 'INSI'
                                     , LOTE
                                     , (L_PESAUX2 * -1)
                                     , ' '
                                     , L_UBIORICOD
                                     , L_TERPROCOD
                                     , L_TERPROCOD
                                     , 0
                                     , L_ALMCOD;
            LOGIC-LIB-MOV-002 USING NDOCOD
                                  , L_CNTCODFAN
                                  , L_CNTCODFAN
                                  , L_CANAUX2
                                  , L_ORIMOV
                                  , L_CLAMOV
                                  , L_OBS;
         END; (* FOR *)
      END; (* ELSE *)
   END; (* IF L_DIFERENCIA > 0 *)
END; (* IF L_INCIDEN[1] = '1' *)
 
(* RS 19/09/02 V2gcrp Se modifica esta parte por si hubiera gestion de *)
(* criterio de rotacion en picking. Aunque dudo que se este utilizando *)
IF L_INCIDEN[2] = '1' THEN BEGIN
   L_CANTEORICA = 0;
   L_PESTEORICO = 0;
 
   EXEC SQL
   SELECT SUM(CNTNDO.CANUNI), SUM(CNTNDO.PES)
     INTO :L_CANTEORICA, :L_PESTEORICO
     FROM ALMUBI, CNTNDO
    WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
      AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
      AND CNTNDO.ARTCOD    = :L_ARTCOD;
   L_CANTEORICA = $NVL(L_CANTEORICA,0);
   L_PESTEORICO = $NVL(L_PESTEORICO,0);
 
   L_DIFERENCIA = L_CANTEORICA - L_ROTO;
   L_ORIMOV = 'TRAS';
   L_CLAMOV = 'ROTU';
   L_OBS = "Rotura Stock";
 
   (* RS 01/04/2009 - Incidencia 21596 *)
   L_GENTABVAL = 0;
   EXEC SQL
   SELECT GENTABVAL
     INTO :L_GENTABVAL
     FROM GENTAB
    WHERE GENTABCOD = 'AJST'
      AND GENTABREG = 'INRO';
 
   IF L_DIFERENCIA >= 0 THEN BEGIN
      IF L_GEST-CRIPICK <> 'S' THEN BEGIN
         EXEC SQL
         SELECT CNTNDO.NDOCOD, CNTNDO.LOTE
           INTO :L_NDOCOD, :L_LOTE
           FROM ALMUBI, CNTNDO
          WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
            AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
            AND CNTNDO.ARTCOD    = :L_ARTCOD;
 
         LOGIC-LIB-MOV-002 USING L_NDOCOD
                               , L_CNTCODFAN
                               , L_CNTCODFAN
                               , L_ROTO
                               , L_ORIMOV
                               , L_CLAMOV
                               , L_OBS;
         IF L_GENTABVAL THEN
            LOGIC-INT-AST-000 USING L_ARTCOD
                                  , (L_ROTO * -1)
                                  , 'INRO'
                                  , L_LOTE
                                  , (P_PES * -1)
                                  , ' '
                                  , L_UBIORICOD
                                  , L_TERPROCOD
                                  , L_TERPROCOD
                                  , 0
                                  , L_ALMCOD;
      END; (* IF L_GEST-CRIPICK <> 'S' *)
      ELSE BEGIN
         L_CANAUX = L_ROTO;
         L_PESUNI = P_PES / L_CANAUX;
         L_CLAUSE = ", ALMUBI WHERE ALMUBI.ALMUBICOD = " +
                    $STR(L_UBIORICOD) +
                    " AND X0.CNTEXTCOD = ALMUBI.CNTCOD" +
                    " AND X0.ARTCOD = " + $STR(L_ARTCOD) +
                    " ORDER BY CRIROT";
         SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
         FOR CNTNDO SELECTED DO BEGIN
            IF NOT L_CANAUX THEN
               BREAK;
            IF L_CANAUX <= CANUNI THEN
               L_CANAUX2 = L_CANAUX;
            ELSE
               L_CANAUX2 = CANUNI;
            L_CANAUX = L_CANAUX - L_CANAUX2;
            L_PESAUX2 = L_CANAUX2 * L_PESUNI;
 
            LOGIC-LIB-MOV-002 USING NDOCOD
                                  , L_CNTCODFAN
                                  , L_CNTCODFAN
                                  , L_CANAUX2
                                  , L_ORIMOV
                                  , L_CLAMOV
                                  , L_OBS;
            IF L_GENTABVAL THEN
               LOGIC-INT-AST-000 USING L_ARTCOD
                                     , (L_CANAUX2 * -1)
                                     , 'INRO'
                                     , LOTE
                                     , (L_PESAUX2 * -1)
                                     , ' '
                                     , L_UBIORICOD
                                     , L_TERPROCOD
                                     , L_TERPROCOD
                                     , 0
                                     , L_ALMCOD;
         END; (* FOR *)
      END; (* ELSE *)
   END; (* IF L_DIFERENCIA > = 0 *)
END; (* IF L_INCIDEN[2] = '1' *)
 
L_UBIORICOD = L_UBIORICOD1;
(* RS 07/03/03 V2iur - Incidencia unidades rotas *)
(* La incidencia de unidades rotas tambien puede generar reposiciones o *)
(* segundas vueltas.                                                    *)
(* Incidencia 29565, ID, 01/07/2011 *)
IF (L_INCIDEN[1] = '1' OR L_INCIDEN[2] = '1') AND L_UBITIP = 'PI' THEN BEGIN
   L_ESPICKUDS = 0;
   LOGIC-LIB-PAR-001 USING 'INSTALACION', 'PICKING-UDS', L_PICKUDS MODIFY;
   EXEC SQL
   SELECT UNIEXP
     INTO :L_UNIEXP
     FROM ART
    WHERE ARTCOD = :L_ARTCOD;
   IF L_PICKUDS = 'S' AND L_UNIEXP = 'UD' THEN
      L_ESPICKUDS = 1;
 
   (* Se genera una orden de reposicion. *)
   L_HAYREPOSICION = 0;
   L_PPO05 = 0;
   EXEC SQL
    SELECT UBIPIC
      INTO :L_PPO05
      FROM ARTALM
      WHERE ARTCOD = :L_ARTCOD;
   IF NOT L_PPO05 THEN BEGIN
   L_REPONER = 0;
   END; ELSE BEGIN
   L_REPONER = 1;
   END;
   IF NOT L_ESPICKUDS THEN BEGIN  (* SI PICKING UDS NO GENERAR REPO *)
      L_ARTREP = L_ARTCOD;
 
      EXEC SQL
      SELECT UBIPICDIN
        INTO :L_UBIPICDIN
        FROM ARTALM
       WHERE ARTCOD = :L_ARTCOD
         AND ALMCOD = :L_ALMCOD;
 
      L_PICK-DINAM = 'NO';
      LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'PICK-DINAM', L_PICK-DINAM MODIFY;
 
      DBG3
         'L_PICK-DINAM ' + L_PICK-DINAM[1] + ' L_UBIPICDIN ' + L_UBIPICDIN;
 
      (* RS 29/02/2008 - Incidencia 17499 *)
      IF L_INCIDEN[2] = '1' THEN BEGIN
         L_STOMIN = 0;
         EXEC SQL
         SELECT CANPICMIN
           INTO :L_STOMIN
           FROM ARTALM
          WHERE ARTCOD = :L_ARTCOD
            AND ALMCOD = :L_ALMCOD;
 
         DBG4
            'L_DIFERENCIA ' + $STR(L_DIFERENCIA) + ' L_CANTIDAD ' +
            $STR(L_CANTIDAD) + ' L_STOMIN ' + $STR(L_STOMIN);
         IF (L_DIFERENCIA - L_CANTIDAD) > L_STOMIN THEN
            L_REPONER = 0;
      END;
 
      DBG4
         'L_REPONER ' + $STR(L_REPONER);
 
      IF L_REPONER THEN
         LOGIC-UBC-REP-001 USING L_ALMCOD
                               , L_ARTREP MODIFY
                               , L_UBIORICOD MODIFY
                               , L_GENERA MODIFY
                               , L_HAYREPOSICION MODIFY
                               , L_PREPAR_ESPERA
                               , L_ACCCOD;
 
      IF L_PICK-DINAM[1] = 'S' AND L_UBIPICDIN = 'C'     AND
         NOT L_ESPICKUDS THEN BEGIN
         (* Si hay alguna ubicacion de Picking, que aparezca llena pero no *)
         (* tenga contenido asociado, no sea Picking de ningun articulo,ni *)
         (* tenga acciones pendientes sobre ella, la ponemos 'VA' (vacia)  *)
         (* porque es la ubicaciãn original de Picking de algÃn articulo de*)
         (* Picking din-mico, y debe quedar libre para su uso              *)
 
         DBG3
            'Evaluamos si hay ubicaciones que liberar';
 
         TRANSACTION "UBIC_INUTIL" DO BEGIN
 
            SELECT * FROM V_UBI_INUTIL;
            FOR V_UBI_INUTIL SELECTED DO BEGIN
 
               L_ALMUBICOD_AUX = V_UBI_INUTIL.ALMUBICOD;
 
               EXEC SQL
               UPDATE ALMUBI SET UBIEST = 'VA',
                                 CNTCOD = 0
                WHERE ALMUBICOD = :L_ALMUBICOD_AUX;
 
               EXEC SQL
               SELECT ALMUBIREF
                 INTO :L_ALMUBIREF
                 FROM ALMPRV
                WHERE ALMPRV.ALMUBICOD = :L_ALMUBICOD_AUX;
 
               DBG3
                  'Ubicaciãn ' + L_ALMUBIREF  + ' esta LL y no es de nadie';
               DBG3
                  'Liberada para su uso.';
            END; (* FOR V_UBI_INUTIL *)
         END; (* TRANSACTION *)
      END; (* IF L_PICK-DINAM[1] = 'S' AND L_UBIPICDIN = 'C' *)
   END; (* IF NOT L_ESPICKUDS *)
   ELSE BEGIN
      (*Se llama a la rutina que analiza si hay que generar reposiciones*)
      (* al picking de unidades *)
      L_STOMIN = 0;
      L_STOMAX = 0;
      EXEC SQL
      SELECT CANPICMIN, CANPICMAX
        INTO :L_STOMIN, :L_STOMAX
        FROM ARTALM
       WHERE ARTCOD = :L_ARTCOD
         AND ALMCOD = :L_ALMCOD;
      LOGIC-GAC-UDS-001 USING 0
                            , L_ALMCOD
                            , L_ARTCOD
                            , 0
                            , L_CANTIDAD
                            , L_STOMIN
                            , L_STOMAX;
      (*EV: SE COMENTA LA INICIALIZACIþN DE L_HAYREPOSICION = 1 PARA QUE     *)
      (*EN LA PREPARACIþN DEL PICKING DE UNIDADES, CUANDO EL OPERARIO        *)
      (*PULSE STOCK INSUFICIENTE, NO LE MUESTRE EL MENSAJE -ESPERE REPOSICION*)
      (*Y LE PERMITA REALIZAR LA ACCION QUE TIENE EN PANTALLA.               *)
      (*EN ESE CASO, CUANDO FALTA STOCK PARA COMPLETAR LA ACCION, SE LE MUES-*)
      (*TRA EL MENSAJE -LINEA INCOMPLETA-, Y SI EL OPERARIO QUIERE ESPERAR   *)
      (*LA REPOSICION, PULSA DESASIGNAR.    17-01-2003                       *)
 
      (* RS 18/03/2009 - CIR37 *)
      IF GV_CLIENTE <> 'lorealmd' THEN
         L_HAYREPOSICION = 1;
   END;
   IF L_HAYREPOSICION THEN
      L_GENERA = 1;
   (* Si es necesario generar una accion en la cola de segunda vuelta *)
   (* PPO05 Tratamos la segunda vuelta como si fuera primera *)
   IF L_INCIDEN[1] = '1' AND L_COLSIGCOD = 0 THEN BEGIN
      LOGIC-LIB-CNT-001 USING 'CCOL', L_COLSIGCOD MODIFY;
      EXEC SQL
        UPDATE ACCCOL SET COLSIGCOD = :L_COLSIGCOD
           WHERE ACCCOLCOD = :L_ACCCOLCOD;
   END;
   IF NOT L_SEGUNDA THEN BEGIN
      (* RS 07/03/03 V2iur - Incidencia unidades rotas *)
      (* Como en este caso L_CANTIDAD lleva incluidas las unidades rotas *)
      (* se debe comprobar si se ha servido todo o no antes de generar la*)
      (* segunda vuelta.                                                 *)
      L_VUELTA = 1;
      IF L_INCIDEN[2] = '1' THEN BEGIN
         L_CANACC = 0;
         EXEC SQL
         SELECT CAN
           INTO :L_CANACC
           FROM ACCTRA
          WHERE ACCCOD = :L_ACCCOD;
         DBG3
            'CANACC ' + $STR(L_CANACC) + ' CANTIDAD ' + $STR(L_CANTIDAD);
#NOTE
         IF (L_CANACC - L_CANTIDAD) <= 0 THEN
#ENDNOTE
         (* RS 01/07/2009 - Incidencia 22432 *)
         IF (L_CANACC - L_CANTIDAD - P_NOSERVIR) <= 0 THEN
            L_VUELTA = 0;
      END;
      DBG4
         'VUELTA ' + $STR(L_VUELTA);
      IF L_VUELTA THEN
         LOGIC-TRA-PIC-003 USING L_ACCCOLCOD
                               , L_COLSIGCOD
                               , L_ACCCOD
                               , L_CANTIDAD
                               , L_ACCCODNEW MODIFY
                               , L_UBIORICOD;
      IF L_AUTOREP = 1 THEN BEGIN
         SELECT * FROM ACCTRA WHERE ARTCOD = L_ARTCOD
                             AND ACCCOLCOD = L_COLSIGCOD;
         FOR ACCTRA SELECTED ITERATIONS(1) DO BEGIN
            ACCCOLCOD = L_ACCCOLCOD;
         END;
      END;
   END;
 
END;
 
IF L_INCIDEN[4] = '1' THEN BEGIN
   IF NOT L_SEGUNDA THEN BEGIN
      LOGIC-TRA-PIC-003 USING L_ACCCOLCOD
                            , L_COLSIGCOD
                            , L_ACCCOD
                            , L_CANTIDAD;
   END;
   EXEC SQL
   UPDATE EXPORDLIN SET INCVERCAN = 'P'
    WHERE EXPORDCOD = :L_EXPORDCOD
      AND EXPORDLIN = :L_EXPORDLIN;
 
   (* sacar listado por la impresora de control para verificar cantidad *)
   L_RECOPECOD = GV_RECOPECOD;
   L_RECMAQCOD = GV_RECMAQCOD;
   LOGIC-OEX-ERC USING L_ACCCOD
                     , L_RECOPECOD
                     , L_RECMAQCOD;
END;
 
DBG1
   'L_GENERA ' + $STR(L_GENERA);
DBG1
   'FIN PROGRAMA --------------------';
EXIT;











LOGIC-RFL-PIC-001:NOWARN;
(* Release Label (44) *)
PARM L_ACCCOLCOD LIKE(NAME=ACCCOLCOD) INIT(38289);
PARM L_SIGUIENTE LIKE(NAME=COLSIGCOD);
PARM L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_FINVIAJE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_CNTCOD LIKE(NAME=CNTCOD);
PARM L_PICINV FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET TITLE("Trabajo de Picking: Realizar una cola");
SET FILES(FINAL-CLOSE=ALL);
DCL I FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL J FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL K FORMAT(TYPE=INT,LENGTH=3,SUBTYPE=NUMERIC);
DCL L_ACCCOD1 LIKE(NAME=ACCCOD);
DCL L_ACCCOD2 LIKE(NAME=ACCCOD);
DCL L_ACCCOD2V LIKE(NAME=ACCCOD);
DCL L_ACCCODINC LIKE(NAME=ACCCOD);
DCL L_ACCCODNEW LIKE(NAME=ACCCOD);
DCL L_ACCCODNEW1 LIKE(NAME=ACCCOD);
DCL L_ACCCODNEW11 LIKE(NAME=ACCCOD);
DCL L_ACCCODNEW2 LIKE(NAME=ACCCOD);
DCL L_ACCCODPES LIKE(NAME=ACCCOD);
DCL L_ACCCOLCOD11 FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_ACCCOLCOD21 FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_ACCCOLPES LIKE(NAME=ACCCOLCOD);
DCL L_ACCORD LIKE(NAME=ACCORD);
DCL L_ACCORDREC LIKE(NAME=ACCORDREC);
DCL L_ACCPENDIENTES FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_ACCPESCOD LIKE(NAME=ACCCOD);
DCL L_ACC_AUX LIKE(NAME=ACCCOD);
DCL L_ACTUALIZADO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_AGRTARART LIKE(NAME=AGRTARART);
DCL L_AGRTARTER LIKE(NAME=AGRTARTER);
DCL L_ALMCOD LIKE(NAME=ALMCOD);
DCL L_ALMCODREL LIKE(NAME=ALMCODREL);
DCL L_ALMUBINP FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_ALMUBIREF LIKE(NAME=ALMUBIREF);
DCL L_ANALIZA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ANID-DOBLE FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_ARTCOD LIKE(NAME=ARTCOD);
DCL L_ARTCOD2 LIKE(NAME=ARTCOD);
DCL L_ARTCODPI LIKE(NAME=ARTCOD);
DCL L_ARTCOD_ANT LIKE(NAME=ARTCOD);
DCL L_ARTPRICOD LIKE(NAME=ARTPRICOD);
DCL L_ARTPROCTR LIKE(NAME=ARTPROCTR);
DCL L_AUTOREP FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_AVISO FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_BLCC_OK LIKE(NAME=VALALF);
DCL L_BOBINA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAJAS FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
DCL L_CAJCNT LIKE(NAME=CAJCNT);
DCL L_CANACC LIKE(NAME=CAN);
DCL L_CANAUX LIKE(NAME=CANUNI);
DCL L_CANAUX2 LIKE(NAME=CANUNI);
DCL L_CANEXP LIKE(NAME=CAN);
DCL L_CANHAY LIKE(NAME=CANUNI);
DCL L_CANINCI LIKE(NAME=CANUNI);
DCL L_CANLEIDOS(499) FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
DCL L_CANMOV LIKE(NAME=CANMOV);
DCL L_CANMOV2 LIKE(NAME=CANMOV);
DCL L_CANNDOCOD LIKE(NAME=CANUNI);
DCL L_CANNEW FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_CANNUEVA FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_CANRESTO FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_CANSEG LIKE(NAME=CAN);
DCL L_CANTIDAD LIKE(NAME=CAN);
DCL L_CANTIDAD1 LIKE(NAME=CAN);
DCL L_CANTIDAD2 LIKE(NAME=CAN);
DCL L_CANTIDADACCION LIKE(NAME=CAN);
DCL L_CANTIDADAUX LIKE(NAME=CAN);
DCL L_CANTIDADAUXCJ LIKE(NAME=CAN);
DCL L_CANTIDADINCI LIKE(NAME=CANUNI);
DCL L_CANTIORI LIKE(NAME=CAN);
DCL L_CANTOT LIKE(NAME=CAN);
DCL L_CANUBIPICK FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CANUDS LIKE(NAME=CAN);
DCL L_CANUNIPI LIKE(NAME=CANUNI);
DCL L_CAR LIKE(NAME=ESTCOD);
DCL L_CARGADOSCNT FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CCAM-DESDE-PIC FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_CLAMOV FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_CLAMOVPI LIKE(NAME=CLAMOV);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=800,SUBTYPE=ALPHA);
DCL L_CLAUSE2 FORMAT(TYPE=CHAR,LENGTH=100,SUBTYPE=ALPHA);
DCL L_CLAUSE3 FORMAT(TYPE=CHAR,LENGTH=300,SUBTYPE=ALPHA);
DCL L_CLAUSE4 FORMAT(TYPE=CHAR,LENGTH=300,SUBTYPE=ALPHA);
DCL L_CNTCAR FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC);
DCL L_CNTCODAUX LIKE(NAME=CNTCOD);
DCL L_CNTCODNEW LIKE(NAME=CNTCOD);
DCL L_CNTCODPES LIKE(NAME=CNTCOD);
DCL L_CNTDORMAT LIKE(NAME=CNTDORMAT);
DCL L_CNTDORNEW FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_CNTESTIMADOS LIKE(NAME=NUMCNT);
DCL L_CNTEXISTE LIKE(NAME=CNTCOD);
DCL L_CNTEXTCOD LIKE(NAME=CNTCOD);
DCL L_CNTINTCOD LIKE(NAME=CNTCOD);
DCL L_COLA LIKE(NAME=ACCCOLCOD);
DCL L_COLACAR LIKE(NAME=ACCCOLCOD);
DCL L_COLEST LIKE(NAME=COLEST);
DCL L_COLPESCOD LIKE(NAME=ACCCOLCOD);
DCL L_COLSIGCOD LIKE(NAME=COLSIGCOD);
DCL L_COLSIGCOD11 FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_COLSIGCODAUX LIKE(NAME=COLSIGCOD);
DCL L_CONCURRENCIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CONFIRMA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CRIROT LIKE(NAME=CRIROT);
DCL L_CRIROTPI LIKE(NAME=CRIROT);
DCL L_CTA LIKE(NAME=CUENTA);
DCL L_CUANTOS FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CUENTA LIKE(NAME=CUENTA);
DCL L_DESASIGNA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_DESASIGNAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_DESHACER-FUS-P LIKE(NAME=VALALF);
DCL L_DESHACER-FUS-R LIKE(NAME=VALALF);
DCL L_DIAMINCADEXP LIKE(NAME=DIAMINCADEXP);
DCL L_DIF FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_DIMCOD LIKE(NAME=DIMCOD);
DCL L_DOBLE-LECTURA FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_ENTRO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ESCERO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ESPERA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ESPERA-MER-MUE FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_ESPERA-REP-ALM LIKE(NAME=VALALF);
DCL L_ESTADO LIKE(NAME=COLEST);
DCL L_ESTCOD LIKE(NAME=ESTCOD);
DCL L_ESTREF LIKE(NAME=ESTREF);
DCL L_ETIQUETAS FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_EXISTE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_EXPGESMAN LIKE(NAME=EXPGESMAN);
DCL L_EXPNUMSEC LIKE(NAME=EXPNUMSEC);
DCL L_EXPORDCOD LIKE(NAME=EXPORDCOD);
DCL L_EXPORDCOD2 LIKE(NAME=EXPORDCOD);
DCL L_EXPORDLIN2 LIKE(NAME=EXPORDLIN);
DCL L_EXPORDTIPAGR LIKE(NAME=EXPORDTIPAGR);
DCL L_FECCADPI LIKE(NAME=FECCAD);
DCL L_FECFABPI LIKE(NAME=FECFAB);
DCL L_FILTRA-PICKING LIKE(NAME=VALALF);
DCL L_FILTRO LIKE(NAME=EVEFIL);
DCL L_FINCNT FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_FININCIDE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_FUERA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_GENTABVAL LIKE(NAME=GENTABVAL);
DCL L_GESCOLPES FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_GESSER LIKE(NAME=GESSER);
DCL L_GEST-CRIPICK FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_GEST-MANIP-CNT LIKE(NAME=VALALF);
DCL L_GUIA LIKE(NAME=EXPORDCOD);
DCL L_HAY FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAY21 FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC,NULL=YES);
DCL L_HAYACCIONES FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_HAYACCPES FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYACCS FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYACCSEG FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYPIC FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYTRABAJO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HISACCCOD LIKE(NAME=HISACCCOD);
DCL L_HOY FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_HUECOS FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC,NULL=YES);
DCL L_IMPDOC LIKE(NAME=GENIMPCOD);
DCL L_IMPETI LIKE(NAME=GENIMPCOD);
DCL L_INCI-CAN-PICI LIKE(NAME=VALALF);
DCL L_INCIAUX FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_INCIDEN FORMAT(TYPE=CHAR,LENGTH=5,SUBTYPE=ALPHA);
DCL L_INCIDENCIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_INCIDESTINO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_INCREPPANT FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_INCVERCAN FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_INICIO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_INTERRUMPIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_LECTURAS FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC);
DCL L_LEE-EAN-UBI LIKE(NAME=VALALF);
DCL L_LEIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_LIBERAR LIKE(NAME=EXPORDCOD);
DCL L_LOTEPI LIKE(NAME=LOTE);
DCL L_MENSAJ-OTRO-F FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_MENSAJE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_MEZCLA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_MEZCLA-FORM FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_MOD-PESO-MEDIO FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_MOMINI LIKE(NAME=MOMINI);
DCL L_MOSTRAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_MOSTRAROBSLIN FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_MULTIPEDIDO FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_NDOCOD LIKE(NAME=NDOCOD);
DCL L_NDOCOD1 LIKE(NAME=NDOCOD);
DCL L_NDOCODAUX LIKE(NAME=NDOCOD);
DCL L_NDOCODNEW LIKE(NAME=NDOCOD);
DCL L_NDOCODPI LIKE(NAME=NDOCOD);
DCL L_NO-ANALIZA FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_NO-DESASIGNA FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_NOSERVIR FORMAT(TYPE=INT,LENGTH=6,SUBTYPE=NUMERIC);
DCL L_NO_HACER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_NSER-PREP FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_NUEVACOLA LIKE(NAME=ACCCOLCOD);
DCL L_NULO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_NUMCNT FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
DCL L_NUMCONTEN LIKE(NAME=NUMCNT);
DCL L_NUMINC FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_NUMSERLEIDOS FORMAT(TYPE=INT,LENGTH=4,SUBTYPE=NUMERIC,NULL=YES);
DCL L_NUMUNI LIKE(NAME=NUMUNI);
DCL L_NUMUNI2 LIKE(NAME=NUMUNI);
DCL L_NUMVER LIKE(NAME=NUMVER);
DCL L_OBS LIKE(NAME=OBS);
DCL L_OBSPI LIKE(NAME=OBS);
DCL L_OK FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC);
DCL L_ORIMOV FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_ORIMOVPI LIKE(NAME=ORIMOV);
DCL L_PACKING FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_PANCON FORMAT(TYPE=CHAR,LENGTH=1120,SUBTYPE=ALPHA);
DCL L_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PEDIDO FORMAT(TYPE=INT,LENGTH=6,SUBTYPE=NUMERIC);
DCL L_PENDIENTE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PERMITIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PES LIKE(NAME=PES);
DCL L_PESAUX2 LIKE(NAME=PES);
DCL L_PESFIN LIKE(NAME=PESVAR);
DCL L_PESO-EN-MANIP LIKE(NAME=VALALF);
DCL L_PESOLEIDOS(499) FORMAT(TYPE=FLOAT,LENGTH=10,DECIMAL=3,BYTES=8,
                             SUBTYPE=NUMERIC);
DCL L_PESOUNI LIKE(NAME=PESUNI);
DCL L_PESO_INV FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_PESTOT LIKE(NAME=PES);
DCL L_PESUNI LIKE(NAME=PES);
DCL L_PESVAR FORMAT(TYPE=CHAR,LENGTH=2,BYTES=2,SUBTYPE=ALPHA);
DCL L_PICK-DINAM FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
DCL L_PICKALTURA1 FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PIFIJO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PRESENTAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PRFCODMAQ LIKE(NAME=PRFCOD);
DCL L_PRIMER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_QUEDATRABAJO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_RECASG FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_RECCOD LIKE(NAME=RECCOD);
DCL L_RECHAZA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_RECMAQCOD LIKE(NAME=RECMAQCOD);
DCL L_RECO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_RECOGIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_RECOPECOD LIKE(NAME=RECOPECOD);
DCL L_REDONDEA FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_REFERENCIA LIKE(NAME=CNTDORREF);
DCL L_REGISTRAR FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_REJECT FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_REPONER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ROTO FORMAT(TYPE=INT,LENGTH=6,SUBTYPE=NUMERIC);
DCL L_ROTTIP LIKE(NAME=ROTTIP);
DCL L_SALE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_SALIR1 FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_SEGUNDA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_SEGUNDAVUELTA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_STOCK_INSU FORMAT(TYPE=INT,LENGTH=6,SUBTYPE=NUMERIC);
DCL L_SUELTO FORMAT(TYPE=INT,LENGTH=6,SUBTYPE=NUMERIC);
DCL L_SUMCANUNI FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_TECLA_PULSADA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_TERCERO LIKE(NAME=TERCOD);
DCL L_TERCOD LIKE(NAME=TERCOD);
DCL L_TERCODUDS LIKE(NAME=TERCOD);
DCL L_TERPROCOD LIKE(NAME=TERPROCOD);
DCL L_TERPROCODPI LIKE(NAME=TERPROCOD);
DCL L_TEXTO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
DCL L_TEXTO1 FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_TEXTO2 FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_UBI-NP FORMAT(TYPE=CHAR,LENGTH=16,BYTES=16,SUBTYPE=ALPHA);
DCL L_UBIDESCODPI LIKE(NAME=UBIDESCOD);
DCL L_UBIORI LIKE(NAME=ALMUBICOD);
DCL L_UBIORICOD LIKE(NAME=UBIORICOD);
DCL L_UBIORIGEN FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
DCL L_UBIPICDIN LIKE(NAME=UBIPICDIN);
DCL L_UBIPICINC LIKE(NAME=UBIPIC);
DCL L_UNIEXP LIKE(NAME=UNIEXP);
DCL L_UNIMIN LIKE(NAME=UNIMIN);
DCL L_VAL LIKE(NAME=GENTABVAL);
DCL L_VARIOSCNT LIKE(NAME=VARIOSCNT);
DCL L_VECES FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_VECES_1 FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_VERIFICADO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ZONPICCOD LIKE(NAME=ZONPICCOD);
DCL L_ZONPICREF LIKE(NAME=ZONPICREF);
DCL L_ZONPRECOD LIKE(NAME=ZONPRECOD);
DCL L_ZONUBICOD LIKE(NAME=ZONUBICOD);
DCL L_ZONUBIEXT LIKE(NAME=ZONUBIEXT);
DCL M FORMAT(TYPE=INT,LENGTH=4,SUBTYPE=NUMERIC);
DCL N FORMAT(TYPE=INT,LENGTH=4,SUBTYPE=NUMERIC);
DCL PG_ALM-CLI-REP LIKE(NAME=VALALF);
DCL PG_NSER-PREP LIKE(NAME=VALALF);
DCL PG_UDS-CLI-REP LIKE(NAME=VALALF);
(* V2EXI : GGOMEZ 09/07/2007 *)
DCLVIEW V_RUTA COLUMNS (ALMUBICOD,NUMSEC) AS
   (SELECT ALMUBI.ALMUBICOD, NUMSEC
      FROM ALMUBI,ALMRUT
     WHERE ZONPICCOD = :L_ZONPICCOD
       AND ZONUBICOD = :L_ZONUBICOD
       AND UBITIP = 'PI'
       AND UBIEST = 'VA'
       AND UBISIT = 'OK'
       AND ALMRUT.ALMUBICOD = ALMUBI.ALMUBICOD
       AND ALMRUT.NUMVER = :L_NUMVER
       AND ALMUBI.ALMUBICOD >= :L_UBIORICOD
       AND ALMUBI.ALMUBICOD NOT IN
                      (SELECT UBIPIC FROM ARTALM
                        WHERE UBIPIC = ALMUBI.ALMUBICOD)
       AND ALMUBI.ALMUBICOD NOT IN
                      (SELECT UBIORICOD FROM ACCTRA
                        WHERE UBIORICOD = ALMUBI.ALMUBICOD
                          AND ACCTIPTAR = 'PISU')
     ORDER BY NUMSEC)
    USING L_ZONPICCOD FORMAT(INT,9,,4),
          L_ZONUBICOD FORMAT(INT,9,,4),
          L_NUMVER FORMAT(INT,9,,4),
          L_UBIORICOD FORMAT(INT,9,,4);
 
DCLVIEW V_CARGACAR COLUMNS (ACCCOLCOD, NUMCNT, CONTENEDORES)
   AS (SELECT CNTDOR.ACCCOLCOD, NUMCNT, COUNT(CNTDOR.CNTCOD)
         FROM ACCCOL, CNTDOR, ALMUBI
        WHERE ALMUBI.ESTCOD = :L_ESTCOD AND
              CNTDOR.CNTCOD = ALMUBI.CNTCOD AND
           ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD
   GROUP BY CNTDOR.ACCCOLCOD, NUMCNT)
   USING L_ESTCOD FORMAT(INT,9,,4);
 
DCLVIEW V_COLASCAR COLUMNS (ACCCOLCOD)
   AS (SELECT ACCCOLCOD
         FROM CNTDOR, ALMUBI
        WHERE ALMUBI.ESTCOD = :L_ESTCOD AND
              CNTDOR.CNTCOD = ALMUBI.CNTCOD
   GROUP BY ACCCOLCOD)
   USING L_ESTCOD FORMAT(INT,9,,4);
 
DCLVIEW V_CNTDORCAR COLUMNS (CNTCOD)
   AS (SELECT CNTNDO.CNTCOD
         FROM CNTNDO, ALMUBI
        WHERE ALMUBI.ESTCOD = :L_ESTCOD AND
           CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD AND
           CNTNDO.CNTEXTCOD <> CNTNDO.CNTCOD
   GROUP BY CNTNDO.CNTCOD)
   USING L_ESTCOD FORMAT(INT,9,,4);
 
DCLVIEW V_DESCARGA
   AS (SELECT DISTINCT(ACCCOLCOD), ALMUBIREF
         FROM CNTDOR, ALMUBI, ALMPRV
        WHERE ALMUBI.ESTCOD    = :L_ESTCOD
          AND CNTDOR.CNTCOD    = ALMUBI.CNTCOD
          AND ALMPRV.ALMUBICOD = ALMUBI.ALMUBICOD
        ORDER BY ALMUBIREF DESC)
   USING L_ESTCOD FORMAT(INT,9,,4);
(****************************************************************************)
(* ESTE PROGRAMA ESTANDAR SOLO SE DEBE TOCAR SI HAY COMUNICACION ESCRITA    *)
(* Titulo: Trabajo de Picking: Realizar una cola                            *)
(* Parametros                                                               *)
(*    Recibidos:                                                            *)
(*       1. L_ACCCOLCOD                                                     *)
(*       2. L_SIGUIENTE                                                     *)
(*       5. L_CNTCOD                                                        *)
(*       6. L_PICINV ->Con valor 1 es un picking inverso                    *)
(*    Devueltos:                                                            *)
(*       3. L_SALIR                                                         *)
(*       4. L_FINVIAJE                                                      *)
(*       5. L_CNTCOD                                                        *)
(* Programas llamados:                                                      *)
(*    LIB-PAR-001                                                           *)
(*    LIB-MOV-INS                                                           *)
(*    LIB-MOV-UPD                                                           *)
(*    RFL-TRA-005                                                           *)
(*    TRA-PIC-002                                                           *)
(*    EXP-ACT-001                                                           *)
(*    EXP-ACT-004                                                           *)
(*    EXP-ACT-005                                                           *)
(*    DSG-SEL-001                                                           *)
(*    DSG-PIC-002                                                           *)
(*    PIC-RED-001                                                           *)
(*    ACC-BOR-001                                                           *)
(*    LIB-CNT-001                                                           *)
(*    PIC-INC-001                                                           *)
(*    UBC-MUE-001                                                           *)
(*    UBC-ARL-001                                                           *)
(*    UBH-PIC-001                                                           *)
(*    UBH-PIC-002                                                           *)
(*    LIB-MOV-002                                                           *)
(*    INT-AST-000                                                           *)
(*    GAC-RUT-002                                                           *)
(*    DES-CNT-001                                                           *)
(*    VAR-CAR-001                                                           *)
(*    RFL-PES-001                                                           *)
(*    RFL-PFI-001                                                           *)
(*    GAC-CNT-001                                                           *)
(*    LIB-ETI-ENV                                                           *)
(*    GAC-RUT-001                                                           *)
(*    GAC-ROL-001                                                           *)
(*    INT-USR-GEN                                                           *)
(*    RFT-AVI-001-P                                                         *)
(*    RPT-PIC-001-P                                                         *)
(*    RPT-PIC-002-P                                                         *)
(*    RPT-PIC-003-P                                                         *)
(*    RPT-PIC-006-P                                                         *)
(*    RPT-PIC-007-P                                                         *)
(*    RPT-PIB-001-P                                                         *)
(*    RPT-PIN-001-P                                                         *)
(*    GES-PIC-001                                                           *)
(* Tablas:                                                                  *)
(*    Lectura:                                                              *)
(*       ACCCOL, ACCTRA, ALMEST, ALMPRV, ALMREL, ALMRUT, ALMUBI, ALMZONPRE, *)
(*       ART, ARTALM, ARTPRE, CNTDOR, CNTNDO, EXPORDCAB, EXPORDLIN,         *)
(*       EXPORDCABTXT, GENTAB, RECMAQ, RECMAQOPE, RECPRF, TER               *)
(*    Escritura:                                                            *)
(*       ACCCOL, ACCTRA, CNTDOR, EXPORDCAB, HISMOVACC                       *)
(* Acciones:                                                                *)
(*    1:                                                                    *)
(*    2:                                                                    *)
(*--------------------------------------------------------------------------*)
(* Descripcion general                                                      *)
(* Modif : Ana M. Pajares 24/02/2000                                        *)
(* odif : Javier Pajares 4/5/2000                                           *)
(* escripcion                                                               *)
(*   Este programa gestiona la preparacion de una cola de picking, cuyo     *)
(*   codigo recibe como parametro:                                          *)
(*   . Empieza iniciando el viaje de picking.                               *)
(*   . Analiza las acciones de la cola por orden, y las va presentando de   *)
(*     dos en dos.                                                          *)
(*   . Termina finalizando el viaje de picking.                             *)
(*   24/02/2000 : control de incidencia 'error en cantidad pedida'          *)
(*   4/5/2000 : si el articulo correspondiente a la accion es de peso       *)
(*              variable con criterio de gestiãn F,PF se genera una accion  *)
(*              de pesaje al finalizar la acciãn de picking. Cuando la      *)
(*              gestiãn de peso de la acciãn reci+n hecha es P,PF se pide   *)
(*              el peso de la cantidad preparada. Antes del fin de viaje    *)
(*              se asigna la cola de pesaje al operario y se realiza +sta   *)
(*              segÃn el campo de gestiãn de cola de peso. Las colas de     *)
(*              segunda vuelta usan la misma cola de pesaje.                *)
(*--------------------------------------------------------------------------*)
(* Historia:                                                                *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 25/03/2002                                     *)
(*    Programador          : EMA                                            *)
(*    Proyecto o Incidencia: LOR10 Nuevas etiquetas de envio termicas.      *)
(*    Descripcion          : Se aÀade un parametro a la llamada del progra- *)
(*    ma de etiquetas LIB-ETI-ENV. El parametro es el codigo de contenedor  *)
(*    de picking.                                                           *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 01/03/02                                       *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: SAND                                           *)
(*    Descripcion          : Se pone el tratamiento de incidencias despu+s  *)
(*                           de la lectura del peso, ya que en el traspaso  *)
(*                           de ajuste de stock se requiere el peso         *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 04/09/01                                       *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: LOR                                            *)
(*    Descripcion          : Se gestiona la posibilidad de buscar stock en  *)
(*                           muelles, en el caso en que no hubiera ningun   *)
(*                           otro stock disponible en todo el almcen        *)
(*                           Existir- un par-metro para que esto no lo haga *)
(*                           si el cliente asi lo decide pero por defecto   *)
(*                           lo har- siempre.                               *)
(*    Modificacion por INCIDENCIA. Cuando no encuentra mercancia en Muelle  *)
(*      es necesario actualizar L_CANTIDAD1 = L_STOCK_INSU;                 *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 23/02/01                                       *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: GUIPV                                          *)
(*    Descripcion          : Etiquetas de envio en picking. Llamada a       *)
(*                           LIB-ETI-PIC                                    *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 09/01/01                                       *)
(*    Programador          : CF                                             *)
(*    Proyecto o incidencia: Adaia V2pc                                     *)
(*    Descripcion          : Modificaciãn para la captura del peso por Caja.*)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 27/12/00                                       *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: Adaia V2 Captura Peso Caja a Caja              *)
(*    Descripcion          :                                                *)
(*    Se modifican la gestion de peso llamando a un nuevo include para      *)
(*    pedir el peso de los articulos caja a caja durante la preparacion.    *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 06/03/2001                                     *)
(*    Programador          : DMT                                            *)
(*    Proyecto o Incidencia: Adaia v2 Numero de serie                       *)
(*    Descripcion          : Se controla si el articulo seleccionado utiliza*)
(*    numero de serie, si lo utiliza, se llama al RFL-NSE-001 donde se      *)
(*    controla este parametro                                               *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 13/09/2001                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o Incidencia: Adaia V2ar. Autoreposicion                     *)
(*    Descripcion          : Se controla si el recurso tiene perfil de auto-*)
(*       reponedor y en ese caso, se le presenta a el mismo la pantalla de  *)
(*       trabajo automatico para ejecutar la reposicion.                    *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 25/09/2001                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o Incidencia: ALDEASA                                        *)
(*    Descripcion          : Si este programa es llamado desde el picking   *)
(*       inverso, entrada de mercancia desde un pallet multireferencia a    *)
(*       sus ubicaciones de picking, el nuevo parametro L_PICINV tendra el  *)
(*       valor 1 para permitir su gestion.                                  *)
(*       El picking inverso trabaja con cantidades y pesos negativos para   *)
(*       Para el picking inverso no es necesario analizar la accion ya que  *)
(*       mantener la misma estructura que en el picking.                    *)
(*       no importa la cantidad que hay en la ubicacion de picking, pues se *)
(*       va a meter mercancia, no sacar, por tanto tampoco debe generarse   *)
(*       reposicion.                                                        *)
(*       La unica incidencia a tratar por el momento sera aquella en la que *)
(*       no quepa toda la mercancia en el picking. Se pedira la cantidad    *)
(*       que se mete y se genera otra accion para el resto.                 *)
(*       La ubicacion destino puede estar vacia y por tanto no tener cntdor *)
(*       ni contenido, y en el caso de estar asignada tiene contenedor      *)
(*       pero no contenido.                                                 *)
(*       Para poder mover la mercancia hay que tener contenedor y contenido *)
(*       en el destino, por tanto cuando se crea el cntdor hay que ubicarlo *)
(*       Para tratar el peso, se cambia la cantidad a positiva y una vez    *)
(*       capturado el peso, se vuelve a poner negativa para actualizar los  *)
(*       contenidos.                                                        *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 23/11/2001                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o Incidencia: Incidencia                                     *)
(*    Descripcion          : Si se pulsa F8 sin ni siquiera haber leido una *)
(*       etiqueta de viaje, daba un fatal error. Ahora solo se llama al     *)
(*       programa DES-CNT-001 si el L_CNTCOD es distinto de 0.              *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 23/11/01                                       *)
(*    Programador          : YMA                                            *)
(*    Proyecto o incidencia: V2ds                                           *)
(*    Descripcion          : Una vez realizada la accion de picking se llama*)
(*                  a los nuevos programa DSG-SEL-001 y DSG-PIC-002.        *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 30/11/01                                       *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: ALICP03                                        *)
(*    Descripcion          : Si se trata de un picking inverso no se pedira *)
(*       etiqueta de viaje.                                                 *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 20/12/01                                       *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: ALDEASA                                        *)
(*    Descripcion          : Se le pasa el parametro de picking inverso al  *)
(*       programa RFT-PIC-001-P.                                            *)
(*       Modificaciones en la gestion de peso: Antes de completar una cola  *)
(*       comprobar si quedan acciones pendientes.                           *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 14/12/2001                                     *)
(*    Programador          : V2ol Observaciones en linea de preparacion.    *)
(*    Proyecto o incidencia: NES03                                          *)
(*    Descripcion          : Se modifica para que antes de llamar al        *)
(*    RFT-PIC-001-P, compruebe si el campo OBS esta relleno, si lo esta     *)
(*    llama al RFT-AVI-001-P pasandole el mensaje como parametro para que   *)
(*    el preparador vea estas observaciones antes de cada accion del pedido *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 10/01/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2pd08-Tipo mvto. espere reposicion en 2¨ vuel.*)
(*    Descripcion          : Si el parametro de expedicion CTR-ESPERA-REPO  *)
(*       esta activo, se debe registrar dicha informacion.                  *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 28/01/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2rr-Redondeo a unidad de expedicion en picking*)
(*    Descripcion          : Si el parametro de expedicion REDONDEA-PICKING *)
(*       esta activo, y no es picking inverso se permite el redondeo a      *)
(*       la unidad de expedicion. Esto es para redondear en caso de cambiar *)
(*       el formato del articulo.                                           *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 31/01/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: ALCC02                                         *)
(*    Descripcion          : Inicializar el campo ACCCOL.MOMINICOL al       *)
(*       mostrar por primera vez inicio de viaje.                           *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 31/01/2002                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: INCIDENCIA PESOS EN SEGUNDA VUELTA             *)
(*    Descripcion          : SE INICIALIZA LA VARIABLE L_INCREPPANT, Y SE   *)
(*       PONE COMO CONDICIþN EN ALGUNOS IF .                                *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 20/02/2002                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o incidencia: V2ft facturacion (montfrisa)                   *)
(*    Descripcion          : En la llamada al LIB-MOV-002 se pasa como parm.*)
(*       numero 17 el valor 'PICK': grupo de facturacion.                   *)
(*       En la llamada al LIB-MOV-001 se pasa como parametro numero 9 el    *)
(*       valor 'ENOT' (entrada otros motivos)                               *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 25/03/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: ALCC4                                          *)
(*    Descripcion          : Para aquellos casos en los que se cae el       *)
(*       terminal o es apagado por el operario sin salirse normalmente, para*)
(*       que las acciones no se queden con e asignarse se, una vez actuali- *)
(*       zada la linea con la accion anterior, se pone a 0, incluso antes de*)
(*       ser analizada.                                                     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 26/04/2002                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o incidencia: Incidencia picking inverso                     *)
(*    Descripcion          : La busqueda de hueco vacio se hace con una     *)
(*       vista ordenada por ruta de picking: primero a partir de la ubicac. *)
(*       actual y si no encuentra ninguno, se busca desde el principio.     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 20/05/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2ia solicitado por PCC01                      *)
(*    Descripcion          : Para gestionar el numero de serie en la salida *)
(*       el valor del campo debe ser Salida o Ambos.                        *)
(*       Se modifica la llamada al numero de serie, para que funcione para  *)
(*       los desgloses.                                                     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 27/05/2002                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o incidencia: V2oz solicitado por circulo de lectores        *)
(*    Descripcion          : Cada vez que se finaliza una accion de picking *)
(*       se 'des-relacionan' aquellas acciones que tuvieran dicha accion    *)
(*       como relacionada.                                                  *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 29/05/2002                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o incidencia: LOR09                                          *)
(*    Descripcion          : Buscar mercancia en otros almacenes (relacio-  *)
(*       nados mediante reposicion entre almacenes)                         *)
(*       Si esta activo el parametro MENSAJ-OTRO-FORM y hay stock de otro   *)
(*       formato, se mostrara el mensaje "Merc. otra ubic.pick"             *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 03/06/2002                                     *)
(*    Programador          : DMG                                            *)
(*    Proyecto o incidencia: V2ctrl                                         *)
(*    Descripcion          : Aumentamos en uno la cuenta de eventos.        *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 04/07/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: ALD11 - Opcion en preparacion para no servir   *)
(*                           unidades                                       *)
(*    Descripcion          : Se aÀade una nueva opcion en incidencias para  *)
(*       servir menos cantidad de la indicada.                              *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 05/08/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2pi - Picking Inverso                         *)
(*    Descripcion          : Modificacion solicitada por @Carrefour.        *)
(*       Eliminar la Captura de Peso en el Picking Inverso segun un nuevo   *)
(*       parametro.                                                         *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 17/09/2002                                     *)
(*    Programador          : EMA                                            *)
(*    Proyecto o Incidencia: INTEGRACION CCR:                               *)
(*    Descripcion          : Despu+s de llamar al RFT-PFI-001 "Fin viaje",  *)
(*    se llama al programa GAC-CNT-001, para generar acciones de carga de   *)
(*    camion de los contenedores preparados de picking. Sãlo debe funcionar *)
(*    en CCR, y el par-metro CCAM-DESDE-PIC deber- estar activado SOLO EN   *)
(*    ESTA INSTALACION.                                                     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 17/09/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o Incidencia: Incidencia                                     *)
(*    Descripcion          : El contenedor en el picking inverso se debe    *)
(*       crear monoreferencia.                                              *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 18/09/2002                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2gcrp Gestion criterio de rotacion            *)
(*    Descripcion          : Solicitado por @Carrefour. Hay que controlar   *)
(*       todos los contenidos de una articulo, por si tienen gestion de     *)
(*       criterio de rotacion en picking.                                   *)
(*       El nuevo parametro es GEST-CRIROT-PICK.                            *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 02/10/2002                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o incidencia: Incidencias version.                           *)
(*    Descripcion          : No se actualizaba bien la cantidad preparada   *)
(*       al pulsar incidencia de "error en cantidad pedida".                *)
(*       No se actualizaba bien la informacion de productividad de operarios*)
(*       si se pulsaba incidencia de "stock insuficiente".                  *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 11/11/2002                                     *)
(*    Programador          : PAM                                            *)
(*    Proyecto o incidencia: Incidencia en Picking Inverso                  *)
(*    Descripcion          : No se debe hacer movimiento de mercancia en el *)
(*                           caso de Incidencia Cantidad Excesiva si la     *)
(*                           cantidad que informa el usuario es 0           *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 04/12/2002                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o incidencia: Incidencia en Picking Inverso                  *)
(*    Descripcion          : Cuando se hace movimiento a la ubicacion de pic*)
(*                           y no existe el contenedor para crearlo estaban *)
(*                           mal las variables: se llamaba al LIB-CNT-001   *)
(*                           con L_CNTCOD y se creaba el contenedor con     *)
(*                           L_CNTCODAUX.                                   *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 26/12/2002                                     *)
(*    Programador          : AP                                             *)
(*    Proyecto o incidencia: ALD14:prep.pickng con control numero de serie. *)
(*    Descripcion          : La pantalla de captura del numero de serie se  *)
(*                           muestra solo si el parametro NSER-PREP vale S  *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 03/01/2003                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: Incidencia detectada en loreal.                *)
(*    Descripcion          : Si la cola de pesaje tiene codigo 0 no debe    *)
(*       realizarse ninguna consulta.                                       *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 20/01/2003                                     *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: Incidencia Freiremar.                          *)
(*    Descripcion          : Solo se mostrar-n las observaciones si el para-*)
(*       metro MOSTRAR-OBSLIN de la categoria EXPEDICION.                   *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 17/01/2003                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2afpi - Ampliacion funcionalidad picking      *)
(*    Descripcion          : Solicitado por Logista.                        *)
(*       Se modifica la preparacion en cajas contenenedoras para que en el  *)
(*       caso de preparar cajas y unidades del mismo articulo se solicite:  *)
(*          . Lectura del origen                                            *)
(*          . Lectura del destino de cajas                                  *)
(*          . Lectura del destino de unidades                               *)
(*       si el nuevo parametro de expedicion "DOBLE-LECTURA" esta activo.   *)
(*       Se permitira la apertura de una caja contenedora en cualquier mo-  *)
(*       mento de la preparacion, leyendo su etiqueta y a continuacion el   *)
(*       contenedor donde se deposita.                                      *)
(*       Se podra modificar el tipo de contenedor y el de caja contenedora  *)
(*       Este tipo de preparacion no funciona, de momento, con el tipo de   *)
(*       peso variable F.                                                   *)
(*       El nuevo include GES-PIC-001 recoge parte del antiguo codigo del   *)
(*       programa para que no se duplique por cada lectura.                 *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 18/02/2003                                     *)
(*    Programador          : JLM                                            *)
(*    Proyecto o incidencia: LOGISTA                                        *)
(*    Descripcion          : Se controla las veces que hay que leer un      *)
(*       numero de serie dependiendo de la tabla general TGNS.              *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 20/02/2003                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2pmp - Picking Multipedido.                   *)
(*    Descripcion          : Solicitado por Logista.                        *)
(*       Se crea un nuevo parametro de expedicion, PICK-MULTIPEDIDO, que va *)
(*       a permitir preparar varios pedidos a la vez, teniendo en cuenta la *)
(*       capacidad de la carretilla.                                        *)
(*       El multipedido siempre considera la posibilidad de preparar varios *)
(*       contenedores.                                                      *)
(*       Primero se mira si hay trabajo interrumpido, si es asi, se pasa    *)
(*       directamente a seleccionar una accion.                             *)
(*       En caso de no haber interrumpido nada:                             *)
(*       . si hay huecos libres en la carretilla                            *)
(*          . se comprueba si hay algun contenedor cargado y la cola a la   *)
(*            que pertenece                                                 *)
(*             . se comprueba si se han cargado tantos contenedores como se *)
(*               tenia estimado para esa cola.                              *)
(*               Si estan todos cargados, se repite el proceso con cada cola*)
(*               hasta ocupar la carretilla. El operario puede decidir no   *)
(*               preparar mas colas.                                        *)
(*             . si no se han cargado tantos contenedores como los estimados*)
(*               se solicita la lectura de los que faltan, pudiendo el pre- *)
(*               parador rechazar la lectura.                               *)
(*          . si no hay contenedores, se llama a RFL-TRA-005 para asignar   *)
(*            una nueva cola                                                *)
(*       . no hay huecos libres ==> Empezar la preparacion                  *)
(*       Asignar una cola implica guardar en el contenedor, la cola a la que*)
(*       esta asignado.                                                     *)
(*       El Operario puede no preparar tantos contenedores como estan asig- *)
(*       nados, ni todos los pedidos que se le asignen.                     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 07/03/2003                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2iur - Incidencia Unidades Rotas              *)
(*    Descripcion          : Solicitado por Logista.                        *)
(*       La incidencia de unidades rotas se tratara como la de stock insufi-*)
(*       ciente. Se debe restar del stock y si aun asi hay suficiente stock *)
(*       para preparar la accion, no se dejara de servir mercancia como     *)
(*       hasta ahora.                                                       *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 11/03/2003                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: V2gipd - Gestion incidencias picking en detino *)
(*    Descripcion          : Solicitado por Logista.                        *)
(*       Se permite pulsar incidencia entre la lectura del origen y la del  *)
(*       destino                                                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 13/03/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: V2cdpk Control de caducidad en picking          *)
(*    Descripcion          : Cuando el parametro FILTRA-PICKING esta activo: *)
(*                           Si el tercero y el articulo de la accion        *)
(*                           tienen fijada una caducidad maxima en AGRTARREL *)
(*                           y el articulo rota por fecha de caducidad,      *)
(*                           se comprueba que la caducidad sea aceptable.    *)
(*                           Si no lo es se da la posibilidad de leer otras  *)
(*                           ubicaciones que cumplan esta caducidad, aunque  *)
(*                           sean de altura a traves de RFT-PIC-001, y si    *)
(*                           en todo el almacen no hay caducidad aceptable,  *)
(*                           la accion no llega presentarse                  *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/03/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Cuando en el picking multipedido hay segunda    *)
(*       vuelta, se cambiaba solo la cola en los contenedores, pero faltaban *)
(*       en las cajas contenedoras.                                          *)
(*-------------------------------------------------------------------------- *)
(*    Fecha                : 27/03/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2pmp - Picking Multipedido.                    *)
(*    Descripcion          : Solicitado por Logista.                         *)
(*       La descarga de los contenedores debe ser en orden inverso a su carga*)
(*       Borro la cola si tiene asociada una de segunda vuelta o ya no       *)
(*       queda ninguna cola de segunda vuelta.                               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/04/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: V2cdpk Control de caducidad en picking          *)
(*    Descripcion          : No se debe llegar a mostrar la accion cuando no *)
(*                           hay stock valido  y si el articulo es de peso   *)
(*                           variable no debe generarse cola de pesaje       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/04/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2asap Analisis segunda accion de picking       *)
(*    Descripcion          : Si el nuevo parametro NO-ANALIZA-2ACC esta      *)
(*       activo, la segunda accion de picking no la analiza, hasta que no pa-*)
(*       a ser primera. Esto se ha hecho para que en el caso de que se       *)
(*       muestren dos acciones en pantalla con el mismo articulo, si no hay  *)
(*       stock suficiente para las dos, la accion de segunda vuelta de la    *)
(*       segunda accion no se va a generar con la cantidad correcta.         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 10/04/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: v2cppk Control de peso en picking por pedidos   *)
(*                                  en kilos                                 *)
(*    Descripcion          : Si el nuevo parametro INT-CON-PES esta activado *)
(*                           se controla que se sirva todo el peso que pide  *)
(*                           la expedicion. Se ha retocado el inclide        *)
(*                           CTR-PES-001 Y GES-PIC-001                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 21/04/2003                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: v2???  Doble lectura en procesos de picking     *)
(*                                  inverso.                                 *)
(*    Descripcion          : Si el nuevo parametro LEE-EAN-UBI esta activado *)
(*                           y el tipo de picking es inverso, se obliga a    *)
(*                           leer el EAN del articulo y despu+s la ubicaciãn *)
(*                           La lectura se realiza con el programa           *)
(*                           RFT-PIC-006-P que es un copia del RFT-PIC-001-P *)
(*                           pero con la lãgica modificada, para que no pida *)
(*                           nada m-s que el EAN.                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 24/04/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia reportada por Logista                *)
(*    Descripcion          : Si han pulsado Fin Viaje y hay una cola de      *)
(*       segunda vuelta, se buclaba el programa.                             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 24/04/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Cambio de sitio el valor de la variable         *)
(*       L_INCREPPANT.                                                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/04/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Logista                                         *)
(*    Descripcion          : Si FINVIAJE es 1, se vacia la carretilla de     *)
(*       contenedores vacios.                                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/04/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: adaia2                                          *)
(*    Descripcion          : Si se encontraba mercancia en el muelle mostra- *)
(*       ba el mensaje de Mercancia en Muelle, pero mostra cantidad a prep.  *)
(*       0, estaba entrado por el ELSE BEGIN del los IF de m-s abajo.        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 30/04/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: Incidencia Picking INVERSO                      *)
(*    Descripcion          : Si estamos en picking inverso no se debe vaciar *)
(*                           la carretilla de contenedores llenos a traves   *)
(*                           de VAC-CAR-001 puesto que ya lo hace el programa*)
(*                           de picking inverso RFL-PIB-001                  *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 30/04/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: adaia2                                          *)
(*    Descripcion          : El mismo caso que en mi comentario anterior.    *)
(*       Se aÀade un nuevo IF L_HAY = 0 para que se ejecute el siguiente IF  *)
(*       o no. Tambi+n se inicializa L_TEXTO dentro del INCLUDE-CAN-INCIDEN- *)
(* CIA. No se borraban los mensajes de Merc, en Mue., Merc. en otro alm, etc *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 07/05/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: CORTEFIEL                                       *)
(*    Descripcion          : Un operario puede estar realizando una cola de  *)
(*       de picking, y pulsar Fin Viaje porque se le ha llenado la caja o el *)
(*       contenedor. En este caso, el resto de la cola queda pendiente y no  *)
(*       se prepara hasta que alguien pida trabajo y se la de en otro inicio *)
(*       de viaje.                                                           *)
(*       Se pide (cuando se ha pulsado fin viaje, quedan huecos en la carre- *)
(*       tilla, mas acciones por preparar de la cola que se estaba preparando*)
(*       y hay un parametro nuevo activado), que salga la pantalla de inicio *)
(*       de viaje otra vez para que lea nuevo contenedor en el que seguir    *)
(*       seguir preparando la cola que dejo de hacer por llenarse el cntdor. *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 19/05/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia reportada por Logista                *)
(*    Descripcion          : Las segundas vueltas podian generar a su vez    *)
(*       terceras vueltas debido a que no se informaba al TRA-PIC-002 de ello*)
(*       en el picking multipedido. Estas nuevas colas tenian codigo 0.      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 22/05/2003                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: Cortefiel                                       *)
(*    Descripcion          : Si estamos en picking inverso y se pulsa inci-  *)
(*                           dencia y el par-mtro INCI-CAN-PIC-INV est- acti-*)
(*                           vo, se actualizan las cantidades del contenedor *)
(*                           mediante una salida o entrada de mercancia del  *)
(*                           mismo, segÃn sea la incidencia pulsada.         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/06/2003                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: Cortefiel                                       *)
(*    Descripcion          : Si estamos en picking inverso y se pulsa inci-  *)
(*                           dencia y el par-mtro INCI-CAN-PIC-INV est- acti-*)
(*                           vo, se envia el interfaz de ajuste de stock con *)
(*                           cantidad de m-s o de menos.                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 13/06/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Logista (Incidencia)                            *)
(*    Descripcion          : He puesto dbgs para ver donde se quedan las     *)
(*       colas de segunda vuelta IN, sin operario ni maquina.                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/06/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: v2gtrm Gestion de Tramos                        *)
(*    Descripcion          : Si hay esta gestion, se marca el contenedor     *)
(*                           con la gestion ficticia NULL.                   *)
(*                           En las llamadas a EXP-ACT-001 se debe pasar el  *)
(*                           el contenedor                                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 24/06/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Si habia incidencia en picking inverso, con el  *)
(*                           parametro INCI-CAN-PIC-INV a S, se              *)
(*                           hacia salida de cualquier articulo y no del de  *)
(*                           la accion                                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 27/06/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia LOR09.                               *)
(*    Descripcion          : En la busqueda de stock de otros formatos       *)
(*                           entra con el ARTCOD de la accion en vez de con  *)
(*                           el ARTPRICOD de este.                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/07/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: V2gtrm                                          *)
(*    Descripcion          : Se compatibiliza con el picking multipedido     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 21/07/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: V2gtrm & Pesaje en Manipulacion                 *)
(*    Descripcion          : Si el parametro de EXPEDICION PESO-EN-MANIP     *)
(*                           esta activado, y hay cola de pesaje al final de *)
(*                           la preparacion, +sta no se har- y se dejar-     *)
(*                           bloqueada para que se haga posteriormente en    *)
(*                           manipulacion                                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/07/2003                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: INCIDENCIA CORTEFIEL                            *)
(*    Descripcion          : Se modifica la llamada al INT-AST-000 para que  *)
(*                           ponga correctamente la cantidad (signo).        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/08/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: FRE11 Pesaje en manipulacion                    *)
(*    Descripcion          : Si el nuevo parametro de EXPEDICION             *)
(*                           PESO-EN-MANIP esta activado, no se realizara el *)
(*                           pesaje de final de preparacion, asumiendo que   *)
(*                           se realizara en manipulacion                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/08/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Cortefiel                                       *)
(*    Descripcion          : Al pulsar Inicio, si el nuevo parametro de      *)
(*       Expedicion, NO-DESASIGNA esta activo, no desasignara la cola de la  *)
(*       maquina.                                                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/08/2003                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: DEPURACION                                      *)
(*    Descripcion          : Anado multitud de DBG2 para seguir el curso     *)
(*       del programa. Pongo tambien un SEGMENT BEGIN END en el include      *)
(*       ACTIVA-VUELTA2 para que no de problemas al compilar por desbordamien*)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : JLM 02/09/2003                                        *)
(*    Proyecto       : CORTEFIEL                                             *)
(*    Descripcion    : Si el parametro general BLCC-OK esta a S si el        *)
(*    contenedor esta en BLCC se pondr- a OK y genera el interfaz            *)
(*    INT-BLO-001.                                                           *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : JLM 04/09/2003                                        *)
(*    Proyecto       : COR10                                                 *)
(*    Descripcion    : Se incluye la gestion de partir acciones de picking   *)
(*    pidiendo que cantidad se va a preparar en la primera accion y se crea  *)
(*    otra accion con el resto de la cantidad.                               *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : RS 23/09/03                                           *)
(*    Proyecto       : Incidencia                                            *)
(*    Descripcion    : Cuando las acciones de picking hay que confirmarlas en*)
(*       contenedor destino, puede ocurrir que dos operarios lleguen a la    *)
(*       misma ubicacion de picking, el primero recoja la mercancia y antes  *)
(*       de confirmar en picking, el segundo de a la incidencia de stock in- *)
(*       suficiente y vacie el picking, con lo cual el primer operario no    *)
(*       ha introducido mercancia en el cntdor para ADAIA aunque fisicamente *)
(*       la vea ya que la actualizacion del stock se realiza al leer el des- *)
(*       no. (El picking no reserva mercancia)                               *)
(*       Solucion: Una vez leida la ubicacion origen o ean del articulo se   *)
(*       modifica el estado de la accion a IN para poder distinguir entre    *)
(*       aquellas acciones que confirman el movimiento en un cntdor destino, *)
(*       cuales han leido el origen de la accion y cuales no.                *)
(*                                                                           *)
(*       Cuando se descarga un contenedor vacio de la carretilla, se debe    *)
(*       poner el CNTDOR.ACCCOLCOD = 0.                                      *)
(*---------------------------------------------------------------------------*)
(*    Modificacion : PAM 30/09/2003                                          *)
(*    Proyecto       : Incidencia                                            *)
(*    Descripcion    : En multipedido si rechazamos un pedido debe quedarse  *)
(*                     PD la cola, aunque NO-DESASIGNA este activado         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 13/10/2003                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Si el parametro NO-ANALIZA-2ACC esta a S y se   *)
(*       da fin viaje se borra la segunda accion que habia mostrado.         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 22/10/2003                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia partir acciones                      *)
(*    Descripcion          : Al partirse una accion en 2, se pondr- a la     *)
(*       cantidad de la segunda accion partida la suma de la que pone ahora  *)
(*       mas la cantidad de accion de segunda vuelta si existe y borrara     *)
(*       esta.                                                               *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : JLM 29/10/2003                                        *)
(*    Proyecto       : Incidencia COR10                                      *)
(*    Descripcion    : Se modifica para que el partir una accion solo se     *)
(*    pueda desde el picking normal y que no influya en el picking           *)
(*    simultaneo.                                                            *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : RS 30/10/2003                                         *)
(*    Proyecto       : Cortefiel                                             *)
(*    Descripcion    : Si la cola rechazada no es la primera y estaba asigna-*)
(*       do el recurso, entonces seguira asignado.                           *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : PAM 26/11/2003                                        *)
(*    Proyecto       : Adaia2                                                *)
(*    Descripcion    : Se detecta un bucle relacionado con L_PARTIR          *)
(*                     y RFT-PIC-001-P                                       *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : JLM 28/11/2003                                        *)
(*    Proyecto       : Adaia2                                                *)
(*    Descripcion    : Se modifica porque no esta funcionando bien el partir *)
(*                     accion.                                               *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : PAM 30/12/2003                                        *)
(*    Proyecto       : GRH Grupo Hoyos                                       *)
(*    Descripcion    : Se cambia el transaction HUECOLIBRE para que no       *)
(*                     bloquee inutilmente ACCTRA                            *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : AP  16/01/2004                                        *)
(*    Proyecto       : ALDEASA incidencia 5807                               *)
(*    Descripcion    : Se modifica la vista V_RUTA y se pone la tabla ALMUBI *)
(*                     delante del campo ALMUBICOD. Antes no estaba y no     *)
(*                     funcionaba bien.                                      *)
(*                   " AND ALMUBI.ALMUBICOD >= :L_UBIORICOD "                *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : PAM 27/01/2004                                        *)
(*    Proyecto       : FREIREMAR Incidencia Gestion de Tramos                *)
(*    Descripcion    : Cuando una cola no se hace completa, se debe asignar  *)
(*                     al contenedor una cola de pesaje nueva con las        *)
(*                     acciones de pesaje de la cola original                *)
(*---------------------------------------------------------------------------*)
(*    Modifificacion : RS  29/01/2004                                        *)
(*    Proyecto       : LOG15                                                 *)
(*    Descripcion    : Cambio de mensaje en la doble lectura si hay UNIEXPANI*)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 10/03/2004                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: Incidencia  DESASIGNAR PICKING DINÓMICO         *)
(*    Descripcion          : Desasignamos (si se puede y debe) el picking    *)
(*                           al articulo de una acciãn de segunda vuelta que *)
(*                           no tiene mercancia en el almac+n y no se va a   *)
(*                           generar reposiciãn.                             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 22/03/2004                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: Incidencia  DESASIGNAR PICKING DINÓMICO(caãtico)*)
(*    Descripcion          : Hacemos lo mismo que en la anterior incidencia  *)
(*                           aÀadiendo que sea tambi+n para picking caãtico. *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/03/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 6414. Problemas de concurrencia      *)
(*    Descripcion          : Si dos operarios llegan a la misma ubicacion, a *)
(*       ambos le muestra la cantidad a coger de un articulo. Si no hay      *)
(*       suficiente para los dos, pero hay de otro formato y no diferencian, *)
(*       el segundo no va a pulsar incidencia y por tanto aunque fisicamente *)
(*       se lleve mercancia, no se va a actualizar la cantidad en el cntdor, *)
(*       aunque si en el pedido.                                             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/04/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia Logista.                             *)
(*    Descripcion          : Se producian descuadres y no se actualizaban    *)
(*       bien las cantidades preparadas cuando se pulsaba la incidencia de   *)
(*       servir menos, cuando solo se pedian unidades sueltas.               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/04/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia Logista.                             *)
(*    Descripcion          : Cuando la cantidad es 0, despues de pulsar inci-*)
(*       dencia, no debe mostrarse la accion.                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 12/04/2004                                      *)
(*    Programador          : AP                                              *)
(*    Proyecto o incidencia: CRF37                                           *)
(*    Descripcion          : Si se fuerza el fin de viaje: se crea una nueva *)
(*       cola y se asocia esta cola a un nuevo contenedor.                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 13/04/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia Logista.                             *)
(*    Descripcion          : Se inicializa la variable L_INCIDESTINO.        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 20/04/2004                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: Incidencia Logista.                             *)
(*    Descripcion          :                                                 *)
(*            EV: Incidencia LOGISTA 20-04-2004. Se sirve mercancia de mas.  *)
(*            Esto ocurre porque en multipedido, cuando el operario pulsa    *)
(*            fin viaje, ya no se va a ejecutar la accion que esta mostrando *)
(*            y si se ha generado accion de segunda vuelta, hay que borrarla *)
(*            en este punto. Si no es multipedido, la accion de segunda vuel *)
(*            ta se borra al salir del while.                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/05/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia Logista.                             *)
(*    Descripcion          : La incidencia de no servir, cuando se decide no *)
(*       servir nada de las unidades, no actualizaba bien las cantidades     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 28/07/2004                                      *)
(*    Programador          : AP                                              *)
(*    Proyecto o incidencia: LOG16                                           *)
(*    Descripcion          : Se envia un parametro mas al RFT-PIC-002-P para *)
(*       indicar si hay que mostrar o no el mensaje de etiquetas de envio.   *)
(*       Hay que mostrar el mensaje en la ultima lectura del destino, es     *)
(*       decir, cuando J = I (en el bucle de doble lectura)                  *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/08/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia Montfrisa/ACEX                       *)
(*    Descripcion          : Se modifica el include GES-PIC-001 para que     *)
(*       a la hora de calcular si la cantidad solicitada se puede sacar de la*)
(*       ubicacion se diferencie si el parametro de gestion de criterios en  *)
(*       el picking est- activo o no.                                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 20/08/2004                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia Cortefiel                            *)
(*    Descripcion          : Las colas se quedan IN sin MAQUINA NI OPERARIO. *)
(*       En el include CAPTURA-CNTDOR en el caso del FINVIAJE = 3, se crea   *)
(*       una nueva cola (creo que esto solo deberia pasar en el caso de pre  *)
(*       asignacion de etiquetas), el caso es que todas las acciones de la   *)
(*       cola original quedan asignadas a la nueva cola, esta se pone IN     *)
(*       pero no asignaba el recurso ni el operario a la nueva cola.         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 20/08/2004                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia Cortefiel                            *)
(*    Descripcion          : Al crear las nuevas colas, se crean id+nticas a *)
(*       la que tenia asignada el operario, pero no se estaba copiando el    *)
(*       NUMCNT, entraba en un bucle en el momento de asignar trabajo.       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 25/08/2004                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia Logista                              *)
(*    Descripcion          : Cuando los parametros INCID-DOBLE-LECT Y DOBLE- *)
(*       LECT est-n activados, la gestion de las incidencias es incorrecta.  *)
(*       Se modifica el INCLUDE-CAN-INCIDENCIA para que L_CANTIDAD1 sea =    *)
(*       L_STOCK-INSU + L_CANMOV. Para que en pantalla siga presentando las  *)
(*       cajas y las unidades.                                               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/09/2004                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia Cortefiel                            *)
(*    Descripcion          : Varias incidencias de los desarrollos CRF37 y   *)
(*       CORxx. Al crearse una nueva cola es necesario copiarle todos, abso- *)
(*       lutamente todos los datos o al menos los importantes como son rec.  *)
(*       y operario. Hasta ahora no lo hacia.                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 18/11/2004                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia GConstenla - 7614                    *)
(*    Descripcion          : Incidencia en gestion de Unidades Rotas cuando  *)
(*       el hueco de picking queda vacio.                                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 21/01/2005                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia Sandoval - 7949                      *)
(*    Descripcion          : Incidencia en Gestion de Peso, se duplican TREXP*)
(*       al no comprobar si la cola de pesaje est- CO, reenviaba la interfaz *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 31/01/2005                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: BGR01                                           *)
(*    Descripcion          : Se incluyen 2 arrays en la llamada al           *)
(*        RFL-PES-001 para guardar el peso por caja.                         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/07/2005                                      *)
(*    Programador          : RS y NMN                                        *)
(*    Proyecto o incidencia: Incidencia 8416 LOGISTA                         *)
(*    Descripcion          : Se cambia el INCLUDE-ACTIVA-VUELTA2 para que    *)
(*        compruebe si hay segunda vuelta si existe la cola.                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/08/2005                                      *)
(*    Programador          : RS y EMA                                        *)
(*    Proyecto o incidencia: Incidencia 8516 LOGISTA                         *)
(*    Descripcion          : Se cambia el INCLUDE-ACTIVA-VUELTA2 para que    *)
(*        no borre colas de mas, o algo asi.                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/09/2005                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia 8520 LOGISTA                         *)
(*    Descripcion          : Se crea la variable L_EXPORDTIPAGR para que en  *)
(*        el include GES-PIC-001 solo se entre en la creacion de contenidos  *)
(*        por peso si es una fusion.                                         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 04/10/2005                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Cortefiel Optimizacion                          *)
(*    Descripcion          : La vista V_RUTA, deja de ser util en este prog. *)
(*        ya que lo mismo que hacia este trozo de cãdigo lo hace el programa *)
(*        UBH-PIC-002, lo llamo pas-ndole los par-metros adecuados.          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 14/07/2006                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: NESS09                                          *)
(*    Descripcion          : Tras el inicio de viaje y antes de mostrar la   *)
(*       primera acciãn, se muestran las observaciones de cabecera para el   *)
(*       cliente Nestle.                                                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 21/09/2006                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: V2BOB                                           *)
(*    Descripcion          : Se crea la variable L_BOBINA para la modifica_  *)
(*       cion en el GES-PIC-001.                                             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                :  28/09/2005                                     *)
(*    Programador          :  JLM                                            *)
(*    Proyecto o incidencia:  NES25                                          *)
(*    Descripcion          :  Se modifica para que tenga en cuenta que       *)
(*       pueden leer en el fin viaje de nes1 un nuevo contenedor a preparar  *)
(*       sin descargar el ya preaparado.                                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 27/11/2006                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 10178                                *)
(*    Descripcion          : La tecla Partir no debe estar disponible para el*)
(*       picking inverso.                                                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                :  12/12/2006                                     *)
(*    Programador          :  JLM                                            *)
(*    Proyecto o incidencia:  IVNi                                           *)
(*    Descripcion          :  Se modifica para que si es picking caotico     *)
(*       despues de analizar la primera accion no encuentre stock se salga   *)
(*       del FOR ACCTRA para entrar de nuevo ordenando por ACCORD, ACCORDREC *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 09/07/2007                                      *)
(*    Programador          : GGOMEZ.                                         *)
(*    Proyecto o incidencia: V2EXI.                                          *)
(*    Descripcion          : Se cambian los accesos a B.D. que usan EXISTS   *)
(*    y NOT EXISTS por IN y NOT IN respectivamente.                          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 27/07/2007                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 9290                                 *)
(*    Descripcion          : Se cambia la llamada al LIB-MOV-UPD despues de  *)
(*       que se haya ejecutado la accion para que el CANMOV este actualizado *)
(*       y se pase la acciãn a dicho programa.                               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/08/2007                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: Logista: incidencia 12427 cantidades negativas  *)
(*    Descripcion          : Se detecta que al pulsar stock insuficiente en  *)
(*        primera vuelta, cuando ya se habia generado una accion de segunda  *)
(*        vuelta, cuando se actualizaba la cantidad de la accion de segunda  *)
(*        vuelta, se grababa una cantidad incorrecta, negativa muchas veces. *)
(*        Se soluciona con la variable L_CANTIDADAUXCJ.                      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/09/2007                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 15629: Ahorramas charcuteria         *)
(*    Descripcion          : Se deshace la modificacion para resolver la in- *)
(*       cidencia 9290. Se guarda en una variable el HISACCCOD en el que hay *)
(*       que modificar la cantidad preparada CANMOV.                         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 21/02/2008                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: Logista: incidencia 17388                       *)
(*    Descripcion          : cuando cae un terminal en picking multipedido   *)
(*        con contenedores cargados en recurso sobre los que esta preparando *)
(*        cuando vuelve a arrancar, aparece el final de viaje de estos cnts, *)
(*        en lugar de continuar su preparacion.                              *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 12/03/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 10178                                *)
(*    Descripcion          : Se ha repetido esta incidencia porque la varia- *)
(*       ble L_PERMITIR ha sido eliminada de la llamada al RFT-PIC-001-P.    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 03/04/2008                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: i17814 DHP                                      *)
(*    Descripcion          : Se incluye un cambio que cuando esta analizando *)
(*       las dos acciones, si la segunda es del mismo articulo que la        *)
(*       primera que no analice la segunda. Parte nueva L_ARTCOD_ANT.        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 09/04/2008                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: i17548 ACU                                      *)
(*    Descripcion          : Se calcula L_SEGUNDA para multipedido otra vez  *)
(*       cuando va a preparar la primera accion poque sino producia terecera *)
(*       vuelta con el acccolcod a 0.                                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/06/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: LAC00 - Lactalis                                *)
(*    Descripcion          : Se aÀade en las comprobaciones GV_CLIENTE = nes1*)
(*       GV_CLIENTE = lac, ya que lac sustituye al nes1. Se mantiene de mo-  *)
(*       mento nes1, por posibles incidencias.                               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/07/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 18691                                *)
(*    Descripcion          : Si hay gestion de manipulacion y no se ha prepa-*)
(*       rado nada sobre el contenedor, los pedidos se quedaban PM.          *)
(*       Ahora se controla que si no hay acciones ni en primera vuelta, ni en*)
(*       segunda, se libere el pedido llamando al EXP-ACT-005.               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/07/2009                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 22432                                *)
(*    Descripcion          : Si se pulsan las incidencias de unidades rotas y*)
(*       servir menos, no siempre es necesario generar segunda vuelta.       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/07/2009                                      *)
(*    Programador          : FM                                              *)
(*    Proyecto o incidencia: FRI07                                           *)
(*    Descripcion          : Se detecta que los pedidos quedan PP porque no  *)
(*       hay acciones y no entra a poner PR el pedido.                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 10/07/2009                                      *)
(*    Programador          : ID                                              *)
(*    Proyecto o incidencia: i22527                                          *)
(*    Descripcion          : Se actualiza correctamente la nueva cantidad de *)
(*                           la primera accion al partir, para evitar que se *)
(*                           prepare de mas.                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 28/01/2014                                      *)
(*    Programador          : US                                              *)
(*    Proyecto o incidencia: PPO05                                           *)
(*    Descripcion          : Se crea una nueva accion en segunda vuelta si   *)
(*     el articulo es de no picking y se pulsa F1 Incidencia Stock Insuf.    *)
(*****************************************************************************)
 
DBG1
  'INICIO PROGRAMA ----------------';
DBG1
  'L_ACCCOLCOD ' + $STR(L_ACCCOLCOD);
DBG1
  'L_SIGUIENTE ' + $STR(L_SIGUIENTE);
DBG1
  'L_SALIR ' + $STR(L_SALIR);
DBG1
  'L_FINVIAJE ' + $STR(L_FINVIAJE);
DBG1
  'L_CNTCOD ' + $STR(L_CNTCOD);
DBG1
  'L_PICINV ' + $STR(L_PICINV);
 
L_REPONER = 0;
 
(* Cliente para recibir expediciones del almacen pulmon *)
LOGIC-LIB-PAR-001 USING 'INSTALACION','ALM-CLI-REP', PG_ALM-CLI-REP MODIFY;
 
(* Cliente para que la zona de picking de Uds reciba reposicion *)
LOGIC-LIB-PAR-001 USING 'INSTALACION','UDS-CLI-REP', PG_UDS-CLI-REP MODIFY;
 
(* Gestion del criterio de rotacion en picking *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION','GEST-CRIROT-PICK', L_GEST-CRIPICK MODIFY;
 
LOGIC-LIB-PAR-001 USING 'EXPEDICION','NSER-PREP', PG_NSER-PREP MODIFY;
 
L_MOSTRAROBSLIN = 'S';
LOGIC-LIB-PAR-001 USING 'EXPEDICION','MOSTRAR-OBSLIN', L_MOSTRAROBSLIN MODIFY;
 
(* Preparacion de distintas presentaciones de un mismo articulo en un pedido *)
(* sobre distintos tipos de contenedores.                                    *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION','DOBLE-LECTURA', L_DOBLE-LECTURA MODIFY;
 
(* Picking multipedido *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION','PICK-MULTIPEDIDO', L_MULTIPEDIDO MODIFY;
 
LOGIC-LIB-PAR-001 USING 'EXPEDICION','NO-ANALIZA-2ACC', L_NO-ANALIZA MODIFY;
 
(* RS 06/05/03 Cortefiel. En el multipedido, si se ha pulsado fin viaje y *)
(* este parametro esta activo, se pedira un nuevo contenedor para seguir  *)
(* preparando la cola.                                                    *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION','NUEVO-CNTDOR', L_CNTDORNEW MODIFY;
 
(* RS 01/08/03 Cortefiel. Al pulsar Inicio en el Multipedido, si el parametro *)
(* esta activo, no desasignara la maquina de la cola.                         *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION','NO-DESASIGNA',L_NO-DESASIGNA MODIFY;
 
(* RS 29/01/2004 LOG15. Se modifica el mensaje en la lectura doble si hay *)
(* gestion de UNIEXPANI.                                                  *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'ANID-INF-DOBLE',  L_ANID-DOBLE MODIFY;
 
L_BLCC_OK = 'N';
LOGIC-LIB-PAR-001 USING 'CONTROL',   'BLCC-OK', L_BLCC_OK MODIFY;
 
EXEC SQL
SELECT TERCOD
  INTO :L_TERCOD
  FROM TER
 WHERE TERREF = :PG_ALM-CLI-REP;
 
EXEC SQL
SELECT TERCOD
  INTO :L_TERCODUDS
  FROM TER
 WHERE TERREF = :PG_UDS-CLI-REP;
 
EXEC SQL
SELECT TERCOD
  INTO :L_TERCERO
  FROM EXPORDCAB ,ACCCOL
 WHERE ACCCOL.ACCCOLCOD = :L_ACCCOLCOD
   AND ACCCOL.EXPORDCOD = EXPORDCAB.EXPORDCOD;
 
(* Por defecto se espera a que lleven un pallet desde el muelle de recepcion *)
(* si fuera el Ãnico stock disponible del articulo.                          *)
(* El operario debe esperar a que la mercancia del muelle se ubique en el    *)
(* picking.                                                                  *)
L_ESPERA-MER-MUE = 'S';
LOGIC-LIB-PAR-001 USING 'INSTALACION','ESPERA-MER-MUE',L_ESPERA-MER-MUE MODIFY;
 
(* La mercancia para reponer viene de otro almacen *)
L_ESPERA-REP-ALM = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION','ESPERA-REP-ALM',L_ESPERA-REP-ALM MODIFY;
 
(* Operativa especial de Loreal. Se repone de otro formato que esta en otra *)
(* ubicacion.                                                               *)
L_MENSAJ-OTRO-F  = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION','MENSAJ-OTRO-FORM',L_MENSAJ-OTRO-F MODIFY;
 
(* Si el valor del parametro es S y el articulo tiene gestion de peso medio *)
(* se puede modificar el peso.                                              *)
L_MOD-PESO-MEDIO = 'N';
LOGIC-LIB-PAR-001 USING 'EXPEDICION','MODIF-PESO-MEDIO',L_MOD-PESO-MEDIO MODIFY;
 
(* Mira si se pueden mezclar formatos al preparar. Esto nos sirve para saber *)
(* si al buscar mercancia en el muelle podemos o no buscar formatos del art. *)
L_MEZCLA-FORM = 'S';
L_MEZCLA = 1;
LOGIC-LIB-PAR-001 USING 'EXPEDICION','CAMBIA-FORM-EXPE',L_MEZCLA-FORM MODIFY;
 
IF L_MEZCLA-FORM = 'N' THEN
   L_MEZCLA = 0;
 
(* Si esta activo el parametro, se debe registrar el momento en que aparece *)
(* el mensaje de que espera reposicion o mercancia en muelle en segunda     *)
(* vuelta.                                                                  *)
L_REGISTRAR = 'N';
LOGIC-LIB-PAR-001 USING 'EXPEDICION','CTR-ESPERA-REPO', L_REGISTRAR MODIFY;
 
(* Si el parametro esta activo, permite redondear a unidad de expedicion *)
(* cuando el formato a servir es distinto del solicitado.                *)
(* PORCEN-PICKING indica el % que se aplica al redondeo.                 *)
L_REDONDEA = 'N';
LOGIC-LIB-PAR-001 USING 'EXPEDICION','REDONDEA-PICKING',L_REDONDEA MODIFY;
 
(* Si el valor del parametro es N, no se solicitara el peso de aquellos *)
(* articulos con peso variable durante el picking inverso. Por defecto  *)
(* su valor sera S.                                                     *)
L_PESO_INV = 'S';
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'PEDIR-PESO-INV', L_PESO_INV MODIFY;
 
(* Si el valor del parametro es S, se generar-n acciones de carga de *)
(* camion 'CCAM' para los contenedores de picking depositados en los *)
(* muelles intermedios. LA configuracion del mapa de almacen para    *)
(* generar estas acciones debe ser especial, por lo que se recomienda*)
(* no activar el par-metro sin consultar con EMA o JL                *)
L_CCAM-DESDE-PIC = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION','CCAM-DESDE-PIC',L_CCAM-DESDE-PIC MODIFY;
 
(* Gestion del cambio dinamico de ubicacion de picking para articulos de *)
(* picking C.                                                            *)
L_PICK-DINAM     = ' ';
L_FILTRA-PICKING = 'N';
 
LOGIC-LIB-PAR-001 USING 'EXPEDICION','PICK-DINAM',      L_PICK-DINAM     MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION','FILTRA-PICKING',  L_FILTRA-PICKING MODIFY;
 
(* Modif. FGG 21/04/2003 V2?? Carrefour *)
(* Doble lectura en procesos de picking inverso *)
L_LEE-EAN-UBI = 'N';
LOGIC-LIB-PAR-001 USING 'CONTROL','LEE-EAN-UBI', L_LEE-EAN-UBI MODIFY;
(* Fin 21/04/2003 *)
 
(* Modif FGG 22/05/2003 Cortefiel *)
(* Lectura de par-metro *)
L_INCI-CAN-PICI = 'N';
LOGIC-LIB-PAR-001 USING 'RECEPCION', 'INCI-CAN-PIC-INV', L_INCI-CAN-PICI MODIFY;
(* Fin 22/05/2003 *)
 
(* v2gtrm Gestion de Tramos de Manipulacion en Expedicion *)
L_GEST-MANIP-CNT = 'N';
L_PESO-EN-MANIP  = 'N';
 
LOGIC-LIB-PAR-001 USING 'EXPEDICION','GEST-MANIP-CNT', L_GEST-MANIP-CNT MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION','PESO-EN-MANIP',  L_PESO-EN-MANIP  MODIFY;
 
(* V2ar *)
(* Perfiles de trabajo. Si el operario tiene perfil de autrepositor, le *)
(* mostrara la accion de reponer.                                       *)
L_AUTOREP = 0;
L_RECMAQCOD = GV_RECMAQCOD;
SELECT * FROM RECMAQ WHERE RECMAQCOD = GV_RECMAQCOD;
FOR RECMAQ SELECTED DO
   L_PRFCODMAQ = PRFCOD;
 
SELECT * FROM RECPRF WHERE PRFCOD = L_PRFCODMAQ;
FOR RECPRF SELECTED DO BEGIN
   IF TAR1  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR2  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR3  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR4  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR5  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR6  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR7  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR8  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR9  = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR10 = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR11 = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
   IF TAR12 = 'AR' THEN BEGIN L_AUTOREP = 1; BREAK; END;
END;
(* V2ar *)
 
(* Esta variable se activa con el valor de la cola de segunda vuelta *)
L_SIGUIENTE = 0;
 
DBG2
  'L_ACCCOLCOD=' + $STR(L_ACCCOLCOD);
SELECT * FROM ACCCOL WHERE ACCCOLCOD = L_ACCCOLCOD;
FOR ACCCOL SELECTED DO BEGIN
   L_CAJCNT    = CAJCNT; (* Usar cajas contenedoras *)
   L_VARIOSCNT = VARIOSCNT; (* Usar varios contenedores *)
   L_COLSIGCOD = COLSIGCOD; (* Codigo cola de segunda vuelta asociada *)
   L_ZONPRECOD = ZONPRECOD; (* DMG V2ctrl 03/06/02 zona trabajo de prep.*)
   L_PIFIJO = 0;
   IF L_COLSIGCOD THEN BEGIN
      L_SEGUNDA = 0;
      DBG2
        'L_COLSIGCOD <> 0, L_SEGUNDA = 0';
   END;
   ELSE BEGIN
      L_PIFIJO = 1;
      L_SEGUNDA = 0;
      LOGIC-LIB-CNT-001 USING 'CCOL', L_COLSIGCOD11 MODIFY;
        EXEC SQL
         UPDATE ACCCOL SET COLSIGCOD = :L_COLSIGCOD11
           WHERE ACCCOLCOD = :L_ACCCOLCOD;
         L_COLSIGCOD = L_COLSIGCOD11;
      DBG2
        'L_COLSIGCOD = 0, L_SEGUNDA = 1';
   END;
END;
 
(* RS 17/02/03 V2pmp - Picking Multipedido. *)
(* El multipedido siempre permite trabajar con varios contenedores *)
IF L_MULTIPEDIDO = 'S' THEN BEGIN
   L_VARIOSCNT = 'S';
   DBG2
     'L_MULTIPEDIDO VALE S, L_VARIOSCNT=S';
END;
(* V2ctrl DMG  06/06/02 *)
EXEC SQL
SELECT ZONPREREF
  INTO :L_FILTRO
  FROM ALMZONPRE
 WHERE ZONPRECOD = :L_ZONPRECOD;
 
L_SALIR = 0;
 
DBG2
  'PICKING INVERSO ' + $STR(L_PICINV);
DBG2
  'FINVIAJE ' + $STR(L_FINVIAJE);
 
(* Codigo de la carretilla *)
EXEC SQL
SELECT ESTCOD
  INTO :L_CAR
  FROM RECMAQ
 WHERE RECMAQCOD = :GV_RECMAQCOD;
 
SEGMENT BEGIN
(* Inicio Viaje *)
(* Para el picking estandar se realiza la peticion de la etiqueta de inicio*)
(* Para el picking multipedido se seleccionan colas y se les van asignando *)
(* uno o varios contenedores.                                              *)
(* El numero de colas asignadas depende del numero de huecos en la carreti-*)
(* lla, del numero de contenedores estimados para cada cola y del operario *)
(* que puede considerar menos contenedores e incluso iniciar la preparacion*)
(* antes de llenar los huecos de la carretilla.                            *)
 
(* JLM, 28/09/2006 NES25 *)
 
IF L_FINVIAJE = 4 AND L_CNTCOD AND
   (GV_CLIENTE = 'nes1' OR GV_CLIENTE = 'lac') THEN BEGIN
   NOTHING;
END;
ELSE BEGIN
 
   IF L_FINVIAJE <> 2 AND NOT L_PICINV THEN BEGIN
      LOGIC-LIB-MOV-INS USING 'TRAB', 'PICI', $SECTION_NAME, '', 0;
 
      IF L_MULTIPEDIDO <> 'S' THEN BEGIN
#INCLUDE-CAPTURA-CNTDOR
      END;
      ELSE BEGIN
      (* Seleccion de colas y asignacion de contenedores.               *)
      (* El picking multipedido, comprueba primero si el trabajo estaba *)
      (* interrumpido.                                                  *)
         LOGIC-RFL-TRA-005 USING L_INTERRUMPIDO MODIFY,
                                 L_SEGUNDAVUELTA MODIFY;
 
         DBG2
           'INTERRUMPIDO ' + $STR(L_INTERRUMPIDO);
         DBG2
           'SEGUNDAVUELTA ' + $STR(L_SEGUNDAVUELTA);
 
         IF NOT L_INTERRUMPIDO THEN BEGIN
            (* Huecos libres en carretilla *)
            L_HUECOS = 0;
            (* EMA 11/08/2005: se cambia el group by de este exec sql *)
            (* por count(distinct almubicod), es mas r-pido por GCO   *)
            EXEC SQL
            SELECT COUNT(DISTINCT ALMUBICOD)
              INTO :L_HUECOS
              FROM RECMAQ, ALMUBI
             WHERE RECMAQCOD = :GV_RECMAQCOD
               AND ALMUBI.ESTCOD = RECMAQ.ESTCOD
               AND UBISIT = 'OK'
               AND UBIEST = 'VA'
               AND CNTCOD = 0;
 
            L_HUECOS = $NVL(L_HUECOS,0);
 
            DBG2
              'HUECOS ' + $STR(L_HUECOS);
            L_FUERA = 0;
            L_CARGADOSCNT = 0;(*flag que indica cnts cargados anteriormente*)
            (* Mientras haya huecos libres en la carretilla y el operario *)
            (* no decida dejar de preparar colas, se asignaran contenedo- *)
            (* res a las colas hasta llenar la carretilla.                *)
            (* Se asignaran tantos contenedores a la cola como estuvieran *)
            (* estimados o el operario decida que menos.                  *)
            WHILE L_HUECOS AND NOT L_FUERA DO BEGIN
               SELECT * FROM V_CARGACAR WITH L_ESTCOD = L_CAR;
               FOR V_CARGACAR SELECTED DO BEGIN
                  L_COLACAR = ACCCOLCOD;
                  L_CNTESTIMADOS = NUMCNT;
                  L_CNTCAR = CONTENEDORES;
                  IF NOT L_CNTESTIMADOS THEN L_CNTESTIMADOS = 1;
                  DBG2
                    'Cola en carretilla ' + $STR(L_COLACAR);
                  DBG2
                    'ESTIMADOS ' + $STR(L_CNTESTIMADOS);
                  DBG2
                    'CARGADOS ' + $STR(L_CNTCAR);
                  (* Mientras haya huecos en la carretilla y no pulse *)
                  (* Salir, Inicio preparacion o Fin de contenedores. *)
                  WHILE L_HUECOS AND NOT L_FUERA AND
                     L_CNTESTIMADOS > L_CNTCAR DO BEGIN
                     (* Contenedores en la carretilla *)
                     L_ACCCOLCOD = L_COLACAR;
#INCLUDE-CAPTURA-CNTDOR
                     DBG2
                       'SALIR ' + $STR(L_SALIR) + ' L_INICIO ' +
                       $STR(L_INICIO) + ' FINCNT ' + $STR(L_FINCNT);
 
                     IF L_INICIO OR L_SALIR OR L_FINCNT THEN BEGIN
                     (* Se ha pulsado inicio de preparacion *)
                     (* O se desea salir de la preparacion O*)
                     (* Se ha pulsado fin de contenedores para una cola *)
                        L_FUERA = 1;
                     END;
                     ELSE IF NOT L_SALIR THEN BEGIN
                        L_HUECOS = L_HUECOS - 1;
                        L_CNTCAR = L_CNTCAR + 1;
                        DBG2
                          'HUECOS ' + $STR(L_HUECOS);
                        DBG2
                          'CARGADOS ' + $STR(L_CNTCAR);
                     END; (* IF NOT L_SALIR *)
                  END; (* WHILE L_HUECOS ... *)
                  IF L_INICIO OR L_SALIR OR NOT L_HUECOS THEN BEGIN
                     BREAK;
                  END;
                  ELSE IF L_FINCNT OR L_CNTESTIMADOS = L_CNTCAR THEN BEGIN
                     (* Se ha pulsado fin de contenedores para una cola *)
                     (* O hay tanto contenedores en carretilla como los *)
                     (* estimados.                                      *)
 
                     (*EV: 21-02-2008 inc. logista 17388*)
                     IF L_CNTESTIMADOS = L_CNTCAR THEN BEGIN
                        (*si hubo una caida del terminal y quedaronlos cnt*)
                        (*ya cargados y no entra en el while anterior, hay*)
                        (*que poner IN el estado de las colas de los cnts *)
                        (*ya cargados.                                    *)
                        DBG2 'L_CARGADOSCNT = 1';
                        L_CARGADOSCNT = 1;
                     END;
 
                     L_FUERA = 0;
                     (* Se debe pasar a otra cola *)
                     CONTINUE;
                  END;
               END; (* FOR V_CARGACAR *)
               L_FUERA = 1;
            END; (* WHILE *)
            (*IF NOT L_HUECOS OR L_INICIO THEN BEGIN*)  (*INC. 17388 LOG*)
            IF NOT L_HUECOS OR L_INICIO OR L_CARGADOSCNT THEN BEGIN
               DBG2
                 'Estado de las colas';
               IF NOT L_SEGUNDAVUELTA THEN BEGIN
 
                  (* V2EXI : GGOMEZ 09/07/2007 *)
                  EXEC SQL
                  UPDATE ACCCOL SET COLEST = 'IN'
                   WHERE ACCCOL.ACCCOLCOD IN
                         (SELECT CNTDOR.ACCCOLCOD FROM CNTDOR, ALMUBI
                           WHERE ALMUBI.ESTCOD = :L_CAR
                             AND CNTDOR.CNTCOD = ALMUBI.CNTCOD
                             AND ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD)
                     AND COLEST = 'AS';
               END;
               ELSE BEGIN
 
                  (* V2EXI : GGOMEZ 09/07/2007 *)
                  EXEC SQL
                  UPDATE ACCCOL SET COLEST = 'IN'
                   WHERE ACCCOL.ACCCOLCOD IN
                       (SELECT CNTDOR.ACCCOLCOD FROM CNTDOR, ALMUBI
                         WHERE ALMUBI.ESTCOD = :L_CAR
                           AND CNTDOR.CNTCOD = ALMUBI.CNTCOD
                           AND ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD)
                     AND ACCCOL.COLSIGCOD = 0
                     AND ACCCOL.COLEST <> 'CO';
               END;
            END;
            (* Hasta aqui es el tratamiento de las colas que ya estaban *)
            (* cargadas en carretilla.                                  *)
            L_FUERA = 0;
            (* RS 24/04/03 Incidencia. Se buclaba el programa *)
            IF NOT L_INICIO AND NOT L_SALIR AND L_HUECOS THEN BEGIN
               DBG2
                 'AHORA HUECOS ' + $STR(L_HUECOS);
               WHILE L_HUECOS AND NOT L_FUERA DO BEGIN
                  L_ACCCOLCOD = 0;
                  (* Selecciono una cola *)
                  LOGIC-RFL-TRA-005 USING 0,
                                          0,
                                          L_ACCCOLCOD MODIFY,
                                          L_CAR,
                                          L_RECASG MODIFY;
                  IF L_ACCCOLCOD THEN BEGIN
                     DBG2
                       'COLA ' + $STR(L_ACCCOLCOD);
                     DBG2
                       'HUECOS ' + $STR(L_HUECOS);
                     L_CNTESTIMADOS = 0;
                     EXEC SQL
                     SELECT NUMCNT
                       INTO :L_CNTESTIMADOS
                       FROM ACCCOL
                      WHERE ACCCOLCOD = :L_ACCCOLCOD;
                     L_CNTCAR = 0;
                     DBG2
                       'ESTIMADOS ' + $STR(L_CNTESTIMADOS);
                     DBG2
                       'CARGADOS ' + $STR(L_CNTCAR);
                     WHILE L_HUECOS AND NOT L_FUERA AND
                        L_CNTESTIMADOS > L_CNTCAR DO BEGIN
                        (* Contenedores en la carretilla *)
#INCLUDE-CAPTURA-CNTDOR
                        DBG2
                          'SALIR ' + $STR(L_SALIR) + ' L_INICIO ' +
                          $STR(L_INICIO) + ' FINCNT ' + $STR(L_FINCNT);
                        IF L_SALIR OR L_FINCNT THEN BEGIN
                           (* Se ha pulsado fin de contenedores para una *)
                           (* cola o se desea salir de la preparacion    *)
                           L_FUERA = 1;
                        END;
                        ELSE IF L_INICIO THEN BEGIN
                           (* Se ha pulsado inicio de preparacion *)
                           L_FUERA = 1;
                           IF NOT L_CNTCAR THEN BEGIN
                              DBG2
                                'Desasigno la cola ' + $STR(L_ACCCOLCOD);
                              (* Si de la cola mostrada no se ha leido *)
                              (* ningun contenedor, debe desasignarse  *)
                              EXEC SQL
                              UPDATE ACCTRA SET ACCEST ='PD'
                               WHERE ACCCOLCOD = :L_ACCCOLCOD
                                 AND ACCEST = 'AS';
 
                              (* DEJA DE TENER VALIDEZ L_NO-DESASIGNA EN     *)
                              (* INICIO DE VIAJE VER CABECERA 30/09/2003 PAM *)
 
                              (* RS 30/10/03 Si esta asignado no se desasigna *)
                              IF L_RECASG THEN
                                 EXEC SQL
                                 UPDATE ACCCOL SET COLEST ='PD',
                                                RECOPECOD = 0
                                  WHERE ACCCOLCOD = :L_ACCCOLCOD
                                    AND COLEST = 'AS';
                              ELSE
                                 EXEC SQL
                                 UPDATE ACCCOL SET COLEST ='PD',
                                                RECMAQCOD = 0,
                                                RECOPECOD = 0
                                  WHERE ACCCOLCOD = :L_ACCCOLCOD
                                    AND COLEST = 'AS';
 
                              L_CLAUSE = " WHERE RECMAQCOD = " +
                                         $STR(GV_RECMAQCOD) +
                                         "   AND RECOPECOD = " +
                                         $STR(GV_RECOPECOD);
                              SELECT * FROM RECMAQOPE
                                   SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
                              FOR RECMAQOPE SELECTED DO
                                 ACCCOD = 0;
                           END; (* IF NOT L_CNTCAR *)
                        END; (* ELSE IF L_INICIO *)
                        ELSE IF NOT L_SALIR THEN BEGIN
                           L_HUECOS = L_HUECOS - 1;
                           L_CNTCAR = L_CNTCAR + 1;
                           DBG2
                             'HUECOS ' + $STR(L_HUECOS);
                           DBG2
                             'CARGADOS ' + $STR(L_CNTCAR);
                        END;
                     END; (* WHILE *)
                     IF L_FINCNT OR L_CNTESTIMADOS = L_CNTCAR THEN
                        L_FUERA = 0;
                  END; (* IF L_ACCCOLCOD *)
                  ELSE
                     L_FUERA = 1;
               END; (* WHILE L_HUECOS *)
            END; (* IF NOT L_INICIO *)
         END; (* IF NOT L_INTERRUMPIDO *)
         IF NOT L_ACCCOLCOD THEN BEGIN
            (* No hay trabajo *)
(* SCREEN-RFT-AVI-001-P USING "No hay trabajo", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "No hay trabajo",
                                       "en este momento";
         END;
      END; (* ELSE de IF L_MULTIPEDIDO <> 'S' *)
   END; (* IF L_FINVIAJE <> 2 AND NOT L_PICINV *)
   ELSE IF L_FINVIAJE = 2 AND NOT L_PICINV AND L_MULTIPEDIDO = 'S' THEN BEGIN
      DBG2
        'Segunda vuelta sin mostrar inicio de viaje ';
      (* Los contenedores ya tienen las colas de segunda vuelta asociadas *)
      SELECT * FROM V_CARGACAR WITH L_ESTCOD = L_CAR;
      FOR V_CARGACAR SELECTED DO BEGIN
 
         (* V2EXI : GGOMEZ 09/07/2007 *)
         EXEC SQL
         UPDATE ACCCOL SET COLEST = 'IN'
          WHERE ACCCOL.ACCCOLCOD = :ACCCOLCOD
            AND ACCCOL.COLSIGCOD = 0
            AND ACCCOL.COLEST <> 'CO'
            AND ACCCOL.ACCCOLCOD IN
                    (SELECT CNTDOR.ACCCOLCOD FROM CNTDOR, ALMUBI
                      WHERE ALMUBI.ESTCOD = :L_CAR
                        AND CNTDOR.CNTCOD = ALMUBI.CNTCOD
                        AND ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD);
 
         DBG2
           'Cambio a IN el estado de la cola ' + $STR(ACCCOLCOD);
      END;
   END;
END;
 
END; (* SEGMENT *)
 
L_FINVIAJE = 0;
L_HAYACCIONES = 1;
L_RECOGIDO = 0;
 
L_INCREPPANT = 0;
(*L_INCREPPANT: INCIDENCIA REPETIR PANTALLA                         *)
(*L_INCREPPANT VALE 1 CUANDO SE PULSA STOCK INSUFICIENTE EN SEGUNDA *)
(*VUELTA, Y SE GENERA UNA REPOSICION O HAY MERCANCIA EN MUELLE,PARA *)
(*QUE REPITA LA PANTALLA CON EL MENSAJE Espere Reposicion...........*)
 
L_TEXTO = ' ';
L_ALMCOD = GV_ALMCOD;
 
WHILE ((NOT L_SALIR AND NOT L_FINVIAJE AND L_HAYACCIONES) OR
       L_INCREPPANT) DO BEGIN
 
   $INITIALIZE(L_CANLEIDOS);
   $INITIALIZE(L_PESOLEIDOS);
 
   (* RS 23/03/2004  Incidencia 6414 *)
   L_CONCURRENCIA = 0;
 
   L_VECES_1 = 0;
   DBG2
     'Empiezo el WHILE';
   DBG2
     'L_TEXTO ' + L_TEXTO;
 
   L_HAYACCIONES = 0;
   L_RECO = 0;
   L_ACCCOD1 = 0;
   L_ACCCOD2 = 0;
   L_ACCCODNEW1 = 0;
   L_ACCCODNEW2 = 0;
 
   (* Selecciono acciones no finalizadas con destino, ordenadas por su *)
   (* ordenacion en la cola -segun tipo de ruta, que depende de la zona*)
   (* de colas de preparacion: RECO, INTE, FRAG- y por la ruta de pick.*)
 
   (* RS 17/02/03 V2pmp - Picking Multipedido *)
   (* El multipedido debe selecionar las acciones entre todas las colas *)
   (* asignadas.                                                        *)
   IF L_MULTIPEDIDO <> 'S' OR L_PICINV THEN
      L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_ACCCOLCOD) +
                 " AND ACCEST <> 'CO' " +   (* QUITAR *)
                 " AND UBIORICOD <> 0 " +
                 " ORDER BY ACCORD, ACCORDREC";
   ELSE
      L_CLAUSE = ", ACCCOL WHERE ACCCOL.RECMAQCOD = " + $STR(GV_RECMAQCOD) +
                 " AND ACCCOL.ACCCOLCOD = X0.ACCCOLCOD " +
                 " AND COLEST = 'IN' " +
                 " AND X0.ACCEST <> 'CO' " +
                 " AND UBIORICOD <> 0 " +
                 " ORDER BY ACCORD, ACCORDREC";
 
   DBG2
     L_CLAUSE;
 
   L_ARTCOD_ANT = 0;
 
   SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
   FOR ACCTRA SELECTED DO BEGIN
      (* Analiza la accion *)
      L_MOSTRAR = 0;
      L_CANTIDAD = 0;
      L_ACCCODNEW = 0;
      L_CANHAY    = 0;
      L_ANALIZA   = 1;
 
      DBG2
        'CANMOV ' + $STR(CANMOV);
 
      (******************* PICKING INVERSO **************************)
      (* Para el picking inverso no es necesario analizar la accion *)
      (* ya que no importa la cantidad que hay en la ubicacion de   *)
      (* picking, pues se va a meter mercancia, no sacar, por tanto *)
      (* tampoco debe generarse reposicion.                         *)
 
      IF NOT L_PICINV THEN BEGIN
 
         DBG2
           'Analizo las acciones';
         DBG2
           'ACCION    ' + $STR(ACCCOD);
         DBG2
           'ACCORD ' + $STR(ACCORD);
         DBG2
           'ACCORDREC ' + $STR(ACCORDREC);
         IF L_PIFIJO = 1 THEN BEGIN
         L_UBI-NP = ' ';
         L_PICKALTURA1 = 0;
         L_ALMUBINP = 0;
         LOGIC-LIB-PAR-001 USING 'EXPEDICION'
                      , 'UBI-NP-ALTURA'
                      , L_UBI-NP MODIFY;
         EXEC SQL
          SELECT ALMUBICOD
            INTO :L_ALMUBINP
            FROM ALMPRV
            WHERE ALMUBIREF = :L_UBI-NP;
          IF UBIORICOD <> L_ALMUBINP THEN BEGIN
            L_SEGUNDA = 1;
           DBG2 'ES PICKING FIJO MOSTRAMOS ACCION';
          END;
 
         END;
         WHILE 1 DO BEGIN
            DBG2
              'AUTOREP = ' + $STR(L_AUTOREP);
            L_ENTRO = 0;
            (*V2PD 30/10/2001 *)
            IF L_HAYACCIONES = 1 THEN BEGIN (* Si estamos analizando 2¨ accion*)
                                            (* y el articulo es de Picking    *)
                                            (* caotico, no se analiza para no *)
                                            (* generar desorden en cola       *)
               EXEC SQL
               SELECT UBIPICDIN
                 INTO :L_UBIPICDIN
                 FROM ARTALM
                WHERE ARTCOD = :ARTCOD
                  AND ALMCOD = :L_ALMCOD;
 
               IF L_UBIPICDIN = 'C' AND L_PICK-DINAM[1] = 'S' THEN BEGIN
 
                  EXEC SQL
                  SELECT CNTNDO.CANUNI
                    INTO :L_CANHAY
                    FROM ALMUBI, CNTNDO
                   WHERE ALMUBI.ALMUBICOD = :UBIORICOD
                     AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
                     AND CNTNDO.ARTCOD    = :ARTCOD;
 
                  (* L_CANHAY es la cantidad en la ubicacion. CAN es la *)
                  (* de la accion. L_CANTIDAD es la que se presenta en  *)
                  (* pantalla.                                          *)
                  IF CAN > L_CANHAY THEN
                     L_CANTIDAD = L_CANHAY;
                  ELSE L_CANTIDAD = CAN;
 
                  L_MOSTRAR   = 1;
                  L_ACCCODNEW = 0;
                  L_ANALIZA   = 0;
                  DBG2
                    'Picking caotico, ACCION ' + $STR(ACCCOD) +
                    ' Se muestra pero no analiza todavia ' +
                    'ARTCOD ' + $STR(ARTCOD);
               END; (* IF L_UBIPICDIN = 'C' AND L_PICK-DINAM[1] = 'S' *)
 
DBG4
   'L_ARTCOD_ANT ' + $STR(L_ARTCOD_ANT);
DBG4
   'ARTCOD ' + $STR(ARTCOD);
 
               (* RS 08/04/03 V2asap *)
               IF L_NO-ANALIZA = 'S' OR ARTCOD = L_ARTCOD_ANT THEN BEGIN
                  L_ANALIZA = 0;
                  L_MOSTRAR = 1;
                  L_ACCCODNEW = 0;   (** Modif. JLM el 13/10/2003 **)
                  IF L_UBIPICDIN <> 'C' OR L_PICK-DINAM[1] <> 'S' THEN BEGIN
                     L_CANTIDAD = CAN;
                  END;
               END;
            END; (* IF L_HAYACCIONES = 1 *)
 
            IF L_ANALIZA = 1 THEN BEGIN
               (* RS 19/05/03 Hay que saber si es o no de segunda vuelta *)
               (* en el picking multipedido para que no cree una tercera *)
               IF L_MULTIPEDIDO = 'S' THEN BEGIN
                  L_SEGUNDA = 0;
                  L_COLSIGCODAUX = 0;
                  EXEC SQL
                  SELECT COLSIGCOD
                    INTO :L_COLSIGCODAUX
                    FROM ACCCOL
                   WHERE ACCCOL.ACCCOLCOD = :ACCCOLCOD;
                  DBG2
                    'Cola de segunda vuelta ' + $STR(L_COLSIGCODAUX) +
                    ' de ' + $STR(ACCCOLCOD);
                  IF NOT L_COLSIGCODAUX THEN
                     L_SEGUNDA = 0;
               END;
 
               LOGIC-TRA-PIC-002 USING ACCCOD,
                                       L_MOSTRAR MODIFY,
                                       L_CANTIDAD MODIFY, (*cantidad mostrar*)
                                       L_SEGUNDA,
                                       L_ACCCODNEW MODIFY, (*accion 2 vuelta*)
                                       0,
                                       L_AUTOREP,
                                       L_ENTRO MODIFY; (*autoreposicion*)
               (* V2PD 30/10/2001 *)
            END;
            IF NOT L_AUTOREP OR NOT L_ENTRO THEN
               BREAK;
         END; (* WHILE 1 *)
      END; (* IF NOT L_PICINV *)
      ELSE BEGIN (* Picking Inverso *)
         L_MOSTRAR = 1;
         L_CANTIDAD = CAN;
         L_ACCCODNEW = ACCCOD;
      END;
      IF L_CANTIDAD = 0 THEN BEGIN
         L_MOSTRAR = 0;
      END;
 
      DBG2
        'MOSTRAR ' + $STR(L_MOSTRAR) + ' CANT ' + $STR(L_CANTIDAD);
 
      L_NO_HACER = 0;
      IF L_MOSTRAR THEN BEGIN
         L_UBI-NP = ' ';
         L_PICKALTURA1 = 0;
         L_ALMUBINP = 0;
         LOGIC-LIB-PAR-001 USING 'EXPEDICION'
                      , 'UBI-NP-ALTURA'
                      , L_UBI-NP MODIFY;
         EXEC SQL
          SELECT ALMUBICOD
            INTO :L_ALMUBINP
            FROM ALMPRV
            WHERE ALMUBIREF = :L_UBI-NP;
         IF UBIORICOD = L_ALMUBINP THEN BEGIN
            L_PICKALTURA1 = 1;
            L_SEGUNDA = 0;
          DBG2 'ES PICKING ALTURA';
         END;
      END;
 
      IF L_MOSTRAR AND NOT L_NO_HACER THEN BEGIN
         L_ACCCOD1     = L_ACCCOD2;
         L_CANTIDAD1   = L_CANTIDAD2;
         L_ACCCODNEW1  = L_ACCCODNEW2;
         L_ACCCOD2     = ACCCOD;
         L_CANTIDAD2   = L_CANTIDAD;
         L_ACCCODNEW2  = L_ACCCODNEW;
         L_HAYACCIONES = L_HAYACCIONES + 1;
         L_CLAUSE = " WHERE ACCCOD = " + $STR(ACCCOD);
         SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
         FOR ACCTRA SELECTED DO BEGIN
            ACCEST = 'AS';
 
            DBG2
              'Marco la accion ' + $STR(ACCCOD) + ' como asignada';
 
            IF L_HAYACCIONES = 1 THEN BEGIN
               ACCRELCOD = 0;
               L_CANTIDADACCION = CAN;
               IF L_MULTIPEDIDO = 'S' THEN BEGIN
                  EXEC SQL
                  SELECT COLSIGCOD
                    INTO :L_COLSIGCOD
                    FROM ACCCOL
                   WHERE ACCCOLCOD = :ACCCOLCOD;
                  IF L_COLSIGCOD THEN
                     L_SEGUNDA = 0;
                  ELSE
                     L_SEGUNDA = 0;
               END;
            END;
         END;
      END;
      ELSE BEGIN
         (* Marca la accion como completa, y continua analizando *)
         (* la siguiente.                                        *)
 
         DBG2
           'Antes de EXP-ACT-001 ';
         DBG2
           'CANMOV ' + $STR(L_CANMOV) + ' J ' + $STR(J);
         (* RS 08/07/2008 - Incidencia 18691 *)
         L_LIBERAR = 0;
         IF L_GEST-MANIP-CNT[1] = 'S' AND NOT L_PICINV THEN BEGIN
            EXEC SQL
            SELECT 1
              INTO :L_HAYACCS
              FROM ACCTRA
             WHERE    ACCCOD <> :ACCCOD
               AND ACCCOLCOD = :ACCCOLCOD
               AND    ACCEST <> 'CO';
 
            DBG4
               'L_HAYACCS ' + $STR(L_HAYACCS);
 
            IF L_HAYACCS THEN
               LOGIC-EXP-ACT-001 USING ACCCOD, 0, L_CNTCOD;
            ELSE BEGIN
               EXEC SQL
               SELECT 1
                 INTO :L_HAYACCS
                 FROM ACCCOL, ACCTRA
                WHERE ACCCOL.ACCCOLCOD = :ACCCOLCOD
                  AND ACCTRA.ACCCOLCOD = ACCCOL.COLSIGCOD;
 
               DBG4
                  'L_HAYACCS en segunda vuelta ' + $STR(L_HAYACCS);
               IF L_HAYACCS THEN
                  LOGIC-EXP-ACT-001 USING ACCCOD, 0, L_CNTCOD;
               ELSE BEGIN
                  LOGIC-EXP-ACT-001 USING ACCCOD;
                  DBG4
                     'EXPORDCOD ' + $STR(EXPORDCOD);
                  L_LIBERAR = EXPORDCOD;
               END;
            END; (* ELSE IF L_HAYACCS *)
         END; (* IF L_GEST-MANIP-CNT[1] = 'S' AND NOT L_PICINV *)
         ELSE
            LOGIC-EXP-ACT-001 USING ACCCOD;
 
         EXEC SQL
         UPDATE ACCTRA SET ACCEST ='CO'
          WHERE ACCCOD = :ACCCOD;
         (* RS 08/07/2008 - Incidencia 18691 *)
         IF L_LIBERAR THEN
            LOGIC-EXP-ACT-005 USING L_LIBERAR;
 
         (* desrelacionamos la accion, si es que fuera relacionada *)
         EXEC SQL
         UPDATE ACCTRA SET ACCRELCOD = 0
          WHERE ACCRELCOD = :ACCCOD;
         DBG2
           'Marco la accion ' + $STR(ACCCOD) + ' como completada';
         (* RS 13/04/2004 *)
         L_INCIDESTINO = 0;
 
         (* Por si se caen los terminales o son apagados por los operarios *)
         (* ponemos el campo ACCRELCOD de la siguiente accion a 0, aunque  *)
         (* posteriormente sea analizada.                                  *)
 
         (* RS 17/02/03 V2pmp - Picking Multipedido *)
         IF L_MULTIPEDIDO <> 'S' OR L_PICINV THEN
            L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_ACCCOLCOD) +
                       " AND ACCEST <> 'CO' " +   (* QUITAR *)
                       " AND UBIORICOD <> 0 " +
                       " ORDER BY ACCORD, ACCORDREC";
         ELSE
            L_CLAUSE = ", ACCCOL WHERE ACCCOL.RECMAQCOD = " +
                       $STR(GV_RECMAQCOD) +
                       " AND ACCCOL.ACCCOLCOD = X0.ACCCOLCOD " +
                       " AND COLEST = 'IN' " +
                       " AND X0.ACCEST <> 'CO' " +
                       " AND UBIORICOD <> 0 " +
                       " ORDER BY ACCORD, ACCORDREC";
         SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
         FOR ACCTRA SELECTED ITERATIONS(1) DO
            ACCRELCOD = 0;
 
         (* Modif. FGG 10/03/2004 Incidencia Desasignar picking din-mico. *)
         (* Modif. FGG 22/03/2004 Incidencia Desasignar picking caãtico *)
         L_ARTCOD = 0;
         EXEC SQL
         SELECT ARTALM.ARTCOD
           INTO :L_ARTCOD
           FROM ARTALM, ALMUBI, ACCTRA
          WHERE ARTALM.UBIPIC = ALMUBI.ALMUBICOD
            AND (ARTALM.UBIPICDIN = 'S' OR ARTALM.UBIPICDIN = 'C')
            AND ALMUBI.ALMUBICOD = ACCTRA.UBIORICOD
            AND ACCTRA.ACCCOD = :ACCCOD;
         (* Fin 22/03/2004 *)
 
         IF L_ARTCOD THEN BEGIN
            DBG2
              'Intentamos desasignar el articulo ' + $STR(L_ARTCOD);
 
            LOGIC-DSG-SEL-001 USING L_ALMCOD,
                                    L_ARTCOD,
                                    0, 0, ' ', 0,
                                    L_CLAUSE MODIFY;
            DBG2
              L_CLAUSE;
            LOGIC-DSG-PIC-002 USING L_CLAUSE;
         END;
         (* Fin 10/03/2004 *)
 
         (* JLM 12/12/2006 - Incidencia IVN *)
         IF L_UBIPICDIN = 'C' AND L_PICK-DINAM[1] = 'S' THEN BEGIN
            L_RECO = 1;
            BREAK;
         END;
         ELSE
            CONTINUE;
      END;
      L_ARTCOD_ANT = ARTCOD;
      IF L_HAYACCIONES = 2 THEN BREAK;
   END;  (* FOR ACCTRA *)
 
 
   IF L_HAYACCIONES THEN BEGIN
      L_RECOGIDO = 1;
      IF NOT L_ACCCOD1 THEN BEGIN
         L_ACCCOD1 = L_ACCCOD2, L_ACCCOD2 = 0;
         L_CANTIDAD1   = L_CANTIDAD2, L_CANTIDAD2 = 0;
      END;
      LOGIC-LIB-MOV-INS USING 'TRAB','PICK', $SECTION_NAME,'',L_ACCCOD1;
 
      L_STOCK_INSU  = 0;
      L_ROTO   = 0;
      L_SUELTO = 0;
      L_PEDIDO = 0;
      L_NOSERVIR = 0;
      L_INCIDEN= '00000';
      L_CANTIORI = L_CANTIDAD1;
      L_PRESENTAR = 1;
 
      WHILE L_PRESENTAR DO BEGIN
         DBG2
           'Presentamos ';
         (* RS 24/04/03 Cambio de sitio la inicializacion de esta variable *)
         L_INCREPPANT = 0;
 
         L_INCIDENCIA = 0;
         L_PARTIR = 0;
         L_INCVERCAN = ' ';
         L_VERIFICADO = 1;
         EXEC SQL
         SELECT INCVERCAN
           INTO :L_INCVERCAN
           FROM EXPORDLIN,ACCTRA
          WHERE ACCTRA.ACCCOD = :L_ACCCOD1
            AND EXPORDLIN.EXPORDCOD = ACCTRA.EXPORDCOD
            AND EXPORDLIN.EXPORDLIN = ACCTRA.EXPORDLIN;
 
         DBG2
           'INCVERCAN ' + L_INCVERCAN + ' ACCION ' + $STR(L_ACCCOD1);
 
         (*  L_TEXTO = ' '; *)
         IF L_INCVERCAN = 'P' THEN BEGIN
            L_TEXTO = "CONFIRMAR CANT EN OFICINA";
            L_INCIDEN[4] = '1';
            L_VERIFICADO = 0;
         END;
 
         (*V2ol --> Observaciones en linea de preparacion *)
         (*  Si el parametro no esta activado no se muestran las *)
         (* observaciones de la linea. MOSTRAR-OBSLIN de EXPED.  *)
         (* EMA 20/01/2003  INCIDENCIA FREIREMAR                 *)
         IF L_MOSTRAROBSLIN = 'S' THEN BEGIN
            EXEC SQL
            SELECT EXPORDLIN.OBS
              INTO :L_OBS
              FROM EXPORDLIN,ACCTRA
             WHERE ACCTRA.EXPORDCOD = EXPORDLIN.EXPORDCOD
               AND ACCTRA.EXPORDLIN = EXPORDLIN.EXPORDLIN
               AND ACCTRA.ACCCOD    = :L_ACCCOD1;
            L_NULO = 0;
            IF $NVL(L_OBS,' ') = ' ' THEN
               L_NULO = 1;
            IF NOT L_NULO THEN BEGIN
               L_TEXTO1 = L_OBS[1:20];
               L_TEXTO2 = L_OBS[21:40];
(* SCREEN-RFT-AVI-001-P USING L_TEXTO1, L_TEXTO2; *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING L_TEXTO1, L_TEXTO2;
            END;
         END;
         (*fin V2ol ..................................... *)
 
         (* Si hay posibilidad de redondeo, se calcula antes de mostrar *)
         (* la accion. Solo se hace con la primera accion a realizar.   *)
         IF NOT L_PICINV AND L_REDONDEA = 'S' THEN BEGIN
 
            (* RS 10/03/03 V2iur - Incidencia unidades rotas *)
            (* Se elimina el parametro de unidades rotas     *)
            LOGIC-PIC-RED-001 USING L_ACCCOD1,
                                    L_CANTIDAD1 MODIFY,
                                    L_SUELTO;
         END;
         DBG2
           'Primera accion con cantidad ' +
           $STR(L_CANTIDAD1 + L_SUELTO - L_NOSERVIR);
         (* RS V2pmp - Picking multipedido *)
         (* La cola varia segun la accion *)
         IF L_MULTIPEDIDO = 'S' THEN
            EXEC SQL
            SELECT ACCCOLCOD
              INTO :L_ACCCOLCOD
              FROM ACCTRA
             WHERE ACCCOD = :L_ACCCOD1;
 
            (* JLM, 09/04/2008 Se calcula de nuevo L_SEGUNDA *)
 
            L_COLSIGCODAUX = 0;
            EXEC SQL
            SELECT COLSIGCOD
              INTO :L_COLSIGCODAUX
              FROM ACCCOL
             WHERE ACCCOLCOD = :L_ACCCOLCOD;
            IF L_COLSIGCODAUX THEN
               L_SEGUNDA = 0;
            ELSE
               L_SEGUNDA = 0;
 
         (* RS 11/03/03 V2gipd - Gestion incidencia picking en destino *)
         IF NOT L_INCIDESTINO THEN BEGIN
 
            (* Modif. FGG 21/04/2003 V2?? Carrefour *)
            L_LEIDO = 0;
            DBG2
              'MI L_PICINV: ' + $STR(L_PICINV);
 
            DBG2
              'LEE-EAN-UBI: ' + L_LEE-EAN-UBI;
 
            IF L_LEE-EAN-UBI = 'S' AND L_PICINV THEN BEGIN
               WHILE NOT L_LEIDO AND NOT L_SALIR DO BEGIN
(* SCREEN-RFT-PIC-006-P USING L_ACCCOLCOD, *)
SECTION "SCREEN-RFT-PIC-006-" + GVPF_TTR
 USING L_ACCCOLCOD,
                                             L_CNTCOD,
                                             L_ACCCOD1,
                                             L_ACCCOD2,
                                         (L_CANTIDAD1 + L_SUELTO - L_NOSERVIR),
                                             L_CANTIDAD2,
                                             L_SALIR MODIFY,
                                             L_FINVIAJE MODIFY,
                                             L_UBIORI MODIFY,
                                             L_INCIDENCIA MODIFY,
                                             L_TEXTO,
                                             L_INCIDEN MODIFY,
                                             ' ',
                                             0,
                                             L_PICINV,
                                             ' ',
                                             L_NO_HACER MODIFY,
                                             L_LEIDO MODIFY;
               END;
            END;
            L_DESASIGNAR = 2;  (** EMA 25/11/2003 **)
 
            (* RS 27/11/2006 - Incidencia 10178 *)
            L_PERMITIR = 1;
            L_UBIORI = 0;
            L_UBIORIGEN = 0;
            IF L_PICINV THEN
               L_PERMITIR = 0;
DBG_ANOTA 'ANTES de RFT-PIC-001 L_UBIORIGEN ' + $STR(L_UBIORIGEN);
(* SCREEN-RFT-PIC-001-P USING L_ACCCOLCOD, *)
SECTION "SCREEN-RFT-PIC-001-" + GVPF_TTR
 USING L_ACCCOLCOD,
                                       L_CNTCOD,
                                       L_ACCCOD1,
                                       L_ACCCOD2,
                            (L_CANTIDAD1 + L_SUELTO - L_NOSERVIR),
                                       L_CANTIDAD2,
                                       L_SALIR MODIFY,
                                       L_FINVIAJE MODIFY,
                                       L_UBIORI MODIFY,
                                       L_INCIDENCIA MODIFY,
                                       L_TEXTO,
                                       L_INCIDEN MODIFY,
                                       ' ',
                                       L_DESASIGNAR,
                                       L_PICINV,
                                       ' ',
                                       L_NO_HACER MODIFY,
                                       L_LEIDO,
                                       L_PARTIR MODIFY,
                                       L_PERMITIR;
             L_UBIORIGEN = L_UBIORI;
            (* Fin 21/04/2003 *)
            (****************************************************************)
            SEGMENT BEGIN
            DBG2
              'VUELVE DE RFT-PIC-001-P';
            L_UBIORIGEN = L_UBIORI;
            (*EV: Incidencia LOGISTA 20-04-2004. Se sirve mercancia de mas. *)
            (*Esto ocurre porque en multipedido, cuando el operario pulsa   *)
            (*fin viaje, ya no se va a ejecutar la accion que esta mostrando*)
            (*y si se ha generado accion de segunda vuelta, hay que borrarla*)
            (*en este punto. Si no es multipedido, la accion de segunda vuel*)
            (*ta se borra al salir del while.                               *)
            DBG2
              'L_MULTIPEDIDO:' + L_MULTIPEDIDO;
            IF L_FINVIAJE AND L_MULTIPEDIDO = 'S' THEN BEGIN
               DBG2
                 'Fin viaje con multipedido';
               DBG2
                 'Borrar acciones de segunda vuelta correspondientes ' +
                 'a la accion/es presentadas.';
               IF L_ACCCODNEW1 THEN BEGIN
                  DBG2
                    'IF L_ACCCODNEW1 <> 0';
                  EXEC SQL
                  DELETE FROM ACCTRA
                   WHERE ACCCOD = :L_ACCCODNEW1;
                  DBG2
                    'Borra acc segunda vuelta ' +
                    'L_ACCCODNEW1: ' + $STR(L_ACCCODNEW1);
               END;
               IF L_ACCCODNEW2 THEN BEGIN
                  DBG2
                    'IF L_ACCCODNEW2 <> 0';
                  EXEC SQL
                  DELETE FROM ACCTRA
                   WHERE ACCCOD = :L_ACCCODNEW2;
                  DBG2
                    'Borra acc segunda vuelta ' +
                    'L_ACCCODNEW2: ' + $STR(L_ACCCODNEW2);
               END;
               (* Comprueba si hay acciones en la cola de segunda vuelta *)
               L_HAYACCS = 0;
               L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_COLSIGCOD) ;
               SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
               FOR ACCTRA SELECTED DO BEGIN
                  L_HAYACCS = 1;
                  DBG2
                    'Hay accs en cola de segunda vuelta ' +
                    $STR(L_COLSIGCOD);
               END;
               IF NOT L_HAYACCS THEN BEGIN
                  DBG2
                    'No hay acciones de segunda vuelta';
                  EXEC SQL
                  DELETE FROM ACCCOL
                   WHERE ACCCOLCOD = :L_COLSIGCOD;
                  DBG2
                    'Borra cola segunda vuelta: ' +
                    $STR(L_COLSIGCOD);
               END;
            END;  (*IF L_FINVIAJE AND L_MULTIPEDIDO*)
            (*EV: fin borrado accion de segunda vuelta en fin viaje multiped*)
            END;(*SEGMENT*)
            (****************************************************************)
 
            (* RS 11/04/2004 *)
            L_ESCERO = 0;
            DBG2
              'L_TEXTO ' + L_TEXTO;
            L_TEXTO = ' ';
            IF L_NO_HACER THEN
               L_CANTIDAD1 = 0;
 
            DBG2
              'L_NO_HACER ' + $STR(L_NO_HACER);
 
            (* RS 27/02/03 V2pmp - Picking Multipedido *)
            (* L_FINVIAJE = 3 implica que el operario ha pulsado Fin viaje*)
            (* y siguen habiendo colas aun preparandose. Solo se ira a    *)
            (* muelle cuando se hayan finalizado todas o se haya pulsado  *)
            (* Fin viaje en todas.                                        *)
            IF L_FINVIAJE = 3 THEN BEGIN
               DBG2
                 'FINVIAJE ' + $STR(L_FINVIAJE);
               (* RS 06/05/03 Cortefiel. Seguir preparando la cola en un *)
               (* nuevo contenedor si hay hueco en carretilla y acciones *)
               (* pendientes. Siempre y cuando el parametro este activo. *)
               IF L_CNTDORNEW = 'S' THEN BEGIN
                  (* Compruebo si hay acciones pendientes de la cola *)
                  L_ACCPENDIENTES = 0;
                  EXEC SQL
                  SELECT COUNT(ACCCOD)
                    INTO :L_ACCPENDIENTES
                    FROM ACCTRA
                   WHERE ACCCOLCOD = :L_ACCCOLCOD
                     AND ACCEST <> 'CO';
                  L_ACCPENDIENTES = $NVL(L_ACCPENDIENTES,0);
                  DBG2
                    'Acciones Pendientes ' + $STR(L_ACCPENDIENTES);
                  IF L_ACCPENDIENTES THEN BEGIN
                     (* Compruebo si hay hueco en carretilla *)
                     L_HUECOS = 0;
                     EXEC SQL
                     SELECT COUNT(ALMUBICOD)
                       INTO :L_HUECOS
                       FROM RECMAQ, ALMUBI
                      WHERE RECMAQCOD = :GV_RECMAQCOD
                        AND ALMUBI.ESTCOD = RECMAQ.ESTCOD
                        AND UBISIT = 'OK'
                        AND UBIEST = 'VA'
                        AND CNTCOD = 0
                     GROUP BY RECMAQ.ESTCOD;
                     L_HUECOS = $NVL(L_HUECOS,0);
                  END; (* IF L_ACCPENDIENTES *)
                  DBG2
                    'Huecos libres ' + $STR(L_HUECOS);
                  IF L_HUECOS THEN BEGIN
SEGMENT BEGIN
#INCLUDE-CAPTURA-CNTDOR
END;
                     DBG2
                       'SALIR ' + $STR(L_SALIR) + ' FINCNT ' +
                       $STR(L_FINCNT) + ' INICIO ' + $STR(L_INICIO);
 
                     IF L_SALIR OR L_FINCNT OR L_INICIO THEN BEGIN
                        L_SALIR = 0;
                        L_FINCNT = 0;
                        L_INICIO = 0;
 
                        IF L_NO-DESASIGNA <> 'S' THEN BEGIN
                           (* Esto creo que sobra, pero no estoy segura *)
                           EXEC SQL
                           UPDATE ACCCOL SET COLEST = 'PD'
                            WHERE ACCCOLCOD = :L_ACCCOLCOD;
                        END;
                     END;
                     ELSE
                        EXEC SQL
                        UPDATE ACCCOL SET RECOPECOD = :GV_RECOPECOD,
                                          RECMAQCOD = :GV_RECMAQCOD,
                                             COLEST = 'IN'
                         WHERE ACCCOLCOD = :L_ACCCOLCOD;
                  END; (* IF L_HUECOS *)
               END; (* IF L_CNTDORNEW = 'S' *)
               BREAK;
            END;
         END; (* IF NOT L_INCIDESTINO *)
 
         (** JLM el 04/09/2003 INICIO **)
         IF L_PARTIR = 1 THEN  BEGIN
            L_SALIR1 = 0;
            L_OK = 0;
            WHILE NOT L_SALIR1 AND NOT L_OK DO BEGIN
(* SCREEN-RFT-PIC-007-P USING L_ACCCOLCOD, *)
SECTION "SCREEN-RFT-PIC-007-" + GVPF_TTR
 USING L_ACCCOLCOD,
                                          L_CNTCOD,
                                          L_ACCCOD1,
                               (L_CANTIDAD1 + L_SUELTO - L_NOSERVIR),
                                          L_SALIR1 MODIFY,
                                          L_CANNEW MODIFY,
                                          L_OK MODIFY;
               IF NOT L_SALIR1 AND L_OK = 1 THEN BEGIN
                  (** Actualiza la cantidad de L_ACCCOD1 y crea otra accion **)
                  (** con el resto de la cantidad.                          **)
                  L_CANRESTO = L_CANTIDAD1 - L_CANNEW;
                  L_CANTIDAD1 = L_CANNEW;
                  L_SUELTO = 0;
                  L_NOSERVIR = 0;
                  EXEC SQL
                  UPDATE ACCTRA SET CAN = :L_CANTIDAD1
                   WHERE ACCCOD = :L_ACCCOD1;
 
                  (* i22527, ID, 10/07/2009 *)
                  L_CANTIDADACCION = L_CANTIDAD1;
                  (* Fin modificacion i22527, ID, 10/07/2009 *)
 
                  FOR ACCTRA<ACCCOD:L_ACCCOD1> DO BEGIN
                     (* JLM 22/10/2003 Mira si hay segunda vuelta, si es asi *)
                     (* la suma a CANRESTO y borra la accion de segunda      *)
                     (* vuelta.                                              *)
                     IF L_SEGUNDA = 0 THEN BEGIN
                        L_ARTCOD2 = ARTCOD;
                        L_EXPORDCOD2 = EXPORDCOD;
                        L_EXPORDLIN2 = EXPORDLIN;
 
                        L_CLAUSE = " WHERE ACCCOLCOD = "+$STR(L_COLSIGCOD)+
                                   " AND ARTCOD = "+$STR(L_ARTCOD2)+
                                   " AND EXPORDCOD ="+$STR(L_EXPORDCOD2)+
                                   " AND EXPORDLIN ="+$STR(L_EXPORDLIN2);
 
                        L_EXISTE = 0;
                        L_CANSEG = 0;
 
                        SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
                        FOR ACCTRA SELECTED DO BEGIN
                           L_CANSEG = CAN;
                           L_EXISTE = 1;
                           L_ACCCOD2V = ACCCOD;
                        END;
 
                        IF L_EXISTE = 1 THEN BEGIN
                           LOGIC-ACC-BOR-001 USING L_ACCCOD2V;
                           L_CANRESTO = L_CANRESTO + L_CANSEG;
                        END;
                     END;
                     (* Hasta aqui JLM el 22/10/2003 *)
                     LOGIC-LIB-CNT-001 USING 'CACC', L_ACCCODNEW11 MODIFY;
                     DBG2
                       'Crea accion al partir ' + $STR(L_ACCCODNEW11);
                     DBG2
                       'Cantidad en la accion ' + $STR(L_CANRESTO);
                     DBG2
                       'Ubicacion primer crea accion ' + $STR(UBIORICOD);
                     CREATE ACCTRA WITH
                        ACCCOD     = L_ACCCODNEW11,
                        ACCCOLCOD  = ACCCOLCOD,
                        ACCRELCOD  = ACCRELCOD,
                        ARTCOD     = ARTCOD,
                        ACCEST     = 'PD',
                        ACCTIPTAR  = ACCTIPTAR,
                        ACCORD     = ACCORD,
                        ACCORDREC  = ACCORDREC + 1,
                        UBIORICOD  = UBIORICOD,
                        CNTCOD     = CNTCOD,
                        NDOCOD     = NDOCOD,
                        UBIDESCOD  = UBIDESCOD,
                        CNTDESCOD  = CNTDESCOD,
                        CAN        = L_CANRESTO,
                        EXPORDCOD  = EXPORDCOD,
                        EXPORDLIN  = EXPORDLIN,
                        ACCORD     = ACCORD,
                        MOMCRE     = $NOW,
                        MOMINI     = MOMINI;
                     L_VECES_1 = L_VECES_1 + 1;
                     IF L_VECES_1 > 1 THEN BEGIN
                        L_ACCORD = ACCORD;
                        L_ACCORDREC = ACCORDREC + 1;
                        EXEC SQL
                        UPDATE ACCTRA SET ACCORDREC = :L_ACCORDREC + 1
                         WHERE ACCCOLCOD = :L_ACCCOLCOD
                           AND ACCORD = :L_ACCORD
                           AND ACCORDREC = :L_ACCORDREC
                           AND ACCCOD <> :L_ACCCOD1
                           AND ACCCOD <> :L_ACCCODNEW11;
                     END;
                     L_ACCCOD2 = L_ACCCODNEW11;
                     L_CANTIDAD2 = L_CANRESTO;
                  END;
               END;
            END;
         END;
         (** JLM el 04/09/2003 FIN **)
 
         IF L_INCIDENCIA OR L_INCIDESTINO THEN BEGIN
 
            (********************** PICKING INVERSO **************************)
            (* La unica incidencia a tratar por el momento sera aquella en   *)
            (* la que no quepa toda la mercancia en el picking. Se pedira    *)
            (* la cantidad que se mete y se genera otra accion para el resto.*)
 
            IF NOT L_PICINV THEN BEGIN
               DBG2
                 'Incidencia de Picking';
               (* Pantalla de incidencias *)
               L_FININCIDE = 0;
               L_CONFIRMA = 0;
               L_RECHAZA = 0;
 
               WHILE NOT L_FININCIDE DO BEGIN
                  LOGIC-LIB-MOV-INS USING 'TRAB','INCI', $SECTION_NAME,'',0;
 
                  DBG2
                    'Dentro de while, antes de PIC-003-P';
                  DBG2
                    'L_STOCK_INSU ' + $STR(L_STOCK_INSU);
                  DBG2
                    'NO SERVIR ' + $STR(L_NOSERVIR);
                  DBG2
                    'L_CANTIORI ' + $STR(L_CANTIORI);
 
(* SCREEN-RFT-PIC-003-P USING L_INCIDEN MODIFY, *)
SECTION "SCREEN-RFT-PIC-003-" + GVPF_TTR
 USING L_INCIDEN MODIFY,
                                             L_ACCCOD1,
                                             L_CANTIORI,
                                             L_STOCK_INSU  MODIFY,
                                             L_ROTO   MODIFY,
                                             L_SUELTO MODIFY,
                                             L_PEDIDO MODIFY,
                                             L_CONFIRMA MODIFY,
                                             L_RECHAZA MODIFY,
                                             L_SEGUNDA,
                                             L_NOSERVIR MODIFY;
                  DBG2
                    'NO SERVIR ' + $STR(L_NOSERVIR);
 
                  DBG2
                    'ROTO ' + $STR(L_ROTO);
                  IF L_CONFIRMA OR L_RECHAZA THEN
                     L_FININCIDE = 1;
                  IF L_RECHAZA THEN BEGIN
                     L_INCIDEN = '00000';
                     L_ROTO = 0;
                     L_SUELTO = 0;
                     L_STOCK_INSU = 0;
                     L_PEDIDO = 0;
                     L_NOSERVIR = 0;
                  END;
               END; (* WHILE NOT L_FININCIDE *)
               DBG2
                 'Salgo de WHILE NOT L_FININCIDE';
               (* RS 07/03/03 V2iur - Incidencia unidades rotas *)
               IF L_INCIDEN[1] = '1' OR L_INCIDEN[2] = '1' THEN BEGIN
 
                  IF NOT L_SEGUNDA THEN BEGIN
                     DBG2
                       'Inc. Stock ins. o uds. rotas, SEGUNDA = ' +
                       $STR(L_SEGUNDA);
SEGMENT BEGIN
#INCLUDE-CAN-INCIDENCIA
END;
DBG2
   ' L_CANTIORI ' + $STR(L_CANTIORI);
DBG2
   ' L_CANTIDAD1 ' + $STR(L_CANTIDAD1);
DBG2
   ' L_UBIORI ' + $STR(L_UBIORI);
                   IF L_UBIORI <> 0 THEN BEGIN
                      EXEC SQL
                       SELECT 1
                          INTO :L_PICKALTURA1
                          FROM ALMUBI
                          WHERE UBITIP <> 'PI'
                          AND ALMUBICOD = :L_UBIORI;
                   END;
                   IF L_CANTIORI <> L_CANTIDAD1 AND L_PICKALTURA1
                      AND L_INCIDEN[1] = '1' AND L_CANTIDAD1 <> 0 THEN BEGIN
                  EXEC SQL
                  UPDATE ACCTRA SET CAN = :L_CANTIDAD1
                   WHERE ACCCOD = :L_ACCCOD1;
                  L_CANTIDADACCION = L_CANTIDAD1;
                    FOR ACCTRA<ACCCOD:L_ACCCOD1> DO BEGIN
                     IF L_SEGUNDA = 0 THEN BEGIN
                        L_ARTCOD2 = ARTCOD;
                        L_EXPORDCOD2 = EXPORDCOD;
                        L_EXPORDLIN2 = EXPORDLIN;
                        L_CLAUSE = " WHERE ACCCOLCOD = "+$STR(L_COLSIGCOD)+
                                   " AND ARTCOD = "+$STR(L_ARTCOD2)+
                                   " AND EXPORDCOD ="+$STR(L_EXPORDCOD2)+
                                   " AND EXPORDLIN ="+$STR(L_EXPORDLIN2);
 
                        L_EXISTE = 0;
                        L_CANSEG = 0;
 
                        SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
 
                        FOR ACCTRA SELECTED DO BEGIN
                           L_CANSEG = CAN;
                           L_EXISTE = 1;
 
                           L_ACCCOD2V = ACCCOD;
                        END;
                        L_CANNUEVA = 0;
                        IF L_EXISTE = 1 THEN BEGIN
                           LOGIC-ACC-BOR-001 USING L_ACCCOD2V;
                           L_CANNUEVA = L_CANTIORI - L_CANTIDAD1;
                        END;
                        IF L_CANNUEVA = 0 THEN BEGIN
                           L_CANNUEVA = L_CANTIORI - L_CANTIDAD1;
                        END;
                     END;
                        L_ACCCOLCOD21 = 0;
                        IF L_COLSIGCOD = 0 THEN BEGIN
                     LOGIC-LIB-CNT-001 USING 'CCOL', L_ACCCOLCOD21 MODIFY;
                        EXEC SQL
                          UPDATE ACCCOL SET
                                 COLSIGCOD = :L_ACCCOLCOD21
                                 WHERE ACCCOLCOD = :L_ACCCOLCOD;
                        END;
                        ELSE BEGIN
                           L_ACCCOLCOD21 = L_COLSIGCOD;
                        END;
                        L_HAY21 = 0;
DBG2
  'L_ACCCOLCOD21 ' + $STR(L_ACCCOLCOD21);

                        SELECT * FROM ACCCOL WHERE ACCCOLCOD = L_ACCCOLCOD21;
                        FOR ACCCOL SELECTED DO BEGIN
DBG2
  'ENTRAMOS AL FOR ACCCOLCOD Y PONEMOS L_HAY21 a 1';
                        L_HAY21 = 1;
                        END;
DBG2
  'L_HAY21 despues del select ' + $STR(L_HAY21);
                        IF L_HAY21 = 0 THEN BEGIN
                        CREATE ACCCOL WITH
                           ACCCOLCOD = L_ACCCOLCOD21,
                           COLEST    = 'GE',
                           COLPRI    = '5',
                           COLTIP    = 'SEC',
                           COLPIC    = 'S',
                           ZONPRECOD = L_ZONPRECOD,
                           ZONCOLCOD = 0,
                           CAJCNT    = L_CAJCNT,
                           VARIOSCNT = L_VARIOSCNT,
                           EXPORDCOD = EXPORDCOD,
                           MOMINI    = $NOW,
                           MOVHORPOS = '-RP',
                           MOVVER    = 0,
                           ANCOPE    = 99,
                           COLSIGCOD = 0;
 
                        END;
 
 
                     LOGIC-LIB-CNT-001 USING 'CACC', L_ACCCODNEW11 MODIFY;
                     DBG2
                       'Crea accion al partir ' + $STR(L_ACCCODNEW11);
                     DBG2
                       'Cantidad en la accion ' + $STR(L_CANNUEVA);
                     DBG2
                       'Ubicacion almubinp ' + $STR(L_ALMUBINP);
                     DBG2
                       'Ubicacion origen ' + $STR(UBIORICOD);
                     CREATE ACCTRA WITH
                        ACCCOD     = L_ACCCODNEW11,
                        ACCCOLCOD  = L_ACCCOLCOD21,
                        ACCRELCOD  = ACCRELCOD,
                        ARTCOD     = ARTCOD,
                        ACCEST     = 'PD',
                        ACCTIPTAR  = ACCTIPTAR,
                        ACCORD     = ACCORD,
                        ACCORDREC  = ACCORDREC + 1,
                        UBIORICOD  = UBIORICOD,
                        CNTCOD     = CNTCOD,
                        NDOCOD     = NDOCOD,
                        UBIDESCOD  = UBIDESCOD,
                        CNTDESCOD  = CNTDESCOD,
                        CAN        = L_CANNUEVA,
                        EXPORDCOD  = EXPORDCOD,
                        EXPORDLIN  = EXPORDLIN,
                        ACCORD     = ACCORD,
                        MOMCRE     = $NOW,
                        MOMINI     = MOMINI;
                     L_VECES_1 = L_VECES_1 + 1;
                     IF L_VECES_1 > 1 THEN BEGIN
                        L_ACCORD = ACCORD;
                        L_ACCORDREC = ACCORDREC + 1;
                        EXEC SQL
                        UPDATE ACCTRA SET ACCORDREC = :L_ACCORDREC + 1
                         WHERE ACCCOLCOD = :L_ACCCOLCOD
                           AND ACCORD = :L_ACCORD
                           AND ACCORDREC = :L_ACCORDREC
                           AND ACCCOD <> :L_ACCCOD1
                           AND ACCCOD <> :L_ACCCODNEW11;
                     END;
                     L_ACCCOD2 = L_ACCCODNEW11;
                     L_CANTIDAD2 = L_CANNUEVA;
                    END;
                   END;
                  END;
                  IF L_SEGUNDA THEN BEGIN
                     DBG2
                       'L_SEGUNDA <> 0, LLAMA A PIC-INC-001';
                     LOGIC-PIC-INC-001 USING L_ACCCOD1,
                                             L_INCIDEN,
                                             L_CANTIDAD1,
                                             L_SEGUNDA,
                                             L_STOCK_INSU,
                                             L_ROTO,
                                             L_REPONER MODIFY,
                                             1, (* Preparador Esperando *)
                                             L_AUTOREP,
                                             0,
                                             L_NOSERVIR;   (* 22432 *)
                       IF L_PICKALTURA1 = 1 THEN
                          L_REPONER = 0;
                     DBG2
                       'Despues de PIC-INC-001, REPONER vale ' +
                       $STR(L_REPONER);
                     IF L_REPONER THEN BEGIN
                        DBG2
                          'EN IF L_REPONER';
                        L_INCREPPANT = 1; (*PARA QUE REPITA LA PANTALLA*)
 
                        L_TEXTO = "Espere Reposicion";
 
                        DBG2
                          'L_INCREPPANT = 1';
                        DBG2
                          'L_TEXTO=' + L_TEXTO;
                        IF L_REGISTRAR = 'S' THEN BEGIN
                           L_ESPERA = 1;
                           DBG2
                             'L_REGISTRAR VALE S, L_ESPERA=1';
                        END;
                     END;
                     ELSE BEGIN
                        DBG2
                          'EN ELSE DE IF L_REPONER';
                        L_ESTCOD = 0;
                        IF L_ESPERA-MER-MUE = 'S' THEN BEGIN
                           DBG2
                            'Entra por la busqueda de contenedores en muelle';
                           DBG2
                             'L_CANTIDAD1 ' + $STR(L_CANTIDAD1);
                           DBG2
                             'L_STOCK_INSU ' + $STR(L_STOCK_INSU);
                           (* modificacion EMA: 04/09/01 se busca si hay stock*)
                           (* en ubicaciones tipo proceso con contenido OK    *)
                           (* para poder servir el resto del ped. *)
                           L_ESTREF = '';
                           L_ALMCOD = GV_ALMCOD;
                           EXEC SQL
                           SELECT ARTCOD
                             INTO :L_ARTCOD
                             FROM ACCTRA
                            WHERE ACCCOD = :L_ACCCOD1;
                           DBG2
                             'L_ARTCOD ' + $STR(L_ARTCOD);
                           LOGIC-UBC-MUE-001 USING L_MEZCLA,
                                                   L_ALMCOD,
                                                   L_ARTCOD,
                                                   L_ESTCOD MODIFY;
                           DBG2
                             'L_ESTCOD ' +$STR(L_ESTCOD);
                           IF L_ESTCOD THEN BEGIN (*HAY EN MUELLE*)
                              EXEC SQL
                              SELECT ESTREF
                                INTO :L_ESTREF
                                FROM ALMEST
                               WHERE ESTCOD = :L_ESTCOD;
                              DBG2
                                'L_ESTREF ' + L_ESTREF;
 
                              L_INCREPPANT = 1;(*EV*)
                              L_TEXTO = "Mercan. en Mue " + L_ESTREF;
 
                              IF L_REGISTRAR = 'S' THEN
                                 L_ESPERA = 1;
                           END; (*IF L_ESTCOD *)
                           ELSE BEGIN
SEGMENT BEGIN
#INCLUDE-CAN-INCIDENCIA
END;
                           END;
                        END;  (* IF L_ESPERA_MER_MUE *)
 
                        (* EMA: INCIDENCIA MERCANCIA EN MUELLE, SIEMPRE     *)
                        (* PONIA CANTIDAD A MOSTRAR 0 AUN HABIENDO          *)
                        (* ENCONTRADO MERCANCÕA EN EL MULLE ESTABA ENTRANDO *)
                        (* POR LOS ELSE BEGIN DE LOS IF QUE HAY MAS ABAJO   *)
                        (* 29/04/2003                                       *)
 
                        IF NOT L_ESTCOD THEN BEGIN
                           L_HAY = 0;
                           IF L_ESPERA-REP-ALM = 'S' AND
                              L_TERCERO <> L_TERCOD AND
                              L_TERCERO <> L_TERCODUDS THEN BEGIN
                              DBG2
                                'Entra por la busqueda de contenedores ' +
                                'en otro almacen';
                              L_ALMCOD = GV_ALMCOD;
                              L_ALMCODREL = 0;
                              EXEC SQL
                              SELECT ALMCODREL
                                INTO :L_ALMCODREL
                                FROM ALMREL
                               WHERE ALMCOD = :L_ALMCOD
                                 AND TIPREL = 'EXRE';
                              IF L_ALMCODREL THEN
                                 LOGIC-UBC-ARL-001 USING L_ALMCODREL, L_ARTCOD,
                                                         L_HAY MODIFY;
                              IF L_HAY THEN BEGIN
                                 L_INCREPPANT = 1;
                                 L_TEXTO = 'Merc. en otro almacen';
                                 IF L_REGISTRAR = 'S' THEN
                                    L_ESPERA = 1;
                              END;
                              ELSE BEGIN
SEGMENT BEGIN
#INCLUDE-CAN-INCIDENCIA
END;
                              END;
                           END;(* IF L_ESPERA-REP-ALM = 'S' *)
                           IF NOT L_HAY THEN BEGIN
                              IF L_MENSAJ-OTRO-F = 'S' AND
                                 L_TERCERO <> L_TERCOD AND
                                 L_TERCERO <> L_TERCODUDS THEN BEGIN
                                 DBG2
                                   'Entra por la busqueda de otros formatos' +
                                   ' en ubicacion de picking';
                                 L_ALMCOD = GV_ALMCOD;
                                 EXEC SQL
                                 SELECT ARTPRICOD
                                   INTO :L_ARTPRICOD
                                   FROM ART
                                  WHERE ARTCOD = :L_ARTCOD;
                                 LOGIC-UBC-PIC-001 USING L_ALMCOD, L_ARTPRICOD,
                                                         L_HAYPIC MODIFY;
                                 IF L_HAYPIC THEN BEGIN
                                    L_INCREPPANT = 1;
                                    L_TEXTO = 'Merc. otra ubic.pick';
                                    IF L_REGISTRAR = 'S' THEN
                                       L_ESPERA = 1;
                                 END;
                                 ELSE BEGIN
SEGMENT BEGIN
#INCLUDE-CAN-INCIDENCIA
END;
                                 END;
                              END;
                              ELSE BEGIN
SEGMENT BEGIN
#INCLUDE-CAN-INCIDENCIA
END;
                              END;
                           END; (* IF NOT L_HAY *)
                        END; (* IF NOT L_ESTCOD *) (* INCIDENCIA EMA *)
                     END; (* ELSE DE IF L_REPONER *)
                     DBG2
                       'INICIALIZA L_INCIDEN[1:2] A 00';
                     L_INCIDEN[1:2] = '00';
                     DBG2
                       'SALE DE IF L_SEGUNDA';
                  END; (* IF L_SEGUNDA *)
               END; (* IF L_INCIDENCIA[1] *)
               DBG2
                 'L_CANTIDAD1 ' + $STR(L_CANTIDAD1);
               (* RS 11/05/04 No servir unidades no actulizaba bien las *)
               (* cantidades.                                           *)
               L_CANACC = 0;
               EXEC SQL
               SELECT CANMOV
                 INTO :L_CANACC
                 FROM ACCTRA
                WHERE ACCCOD = :L_ACCCOD1;
               DBG2
                 'L_CANMOV ' + $STR(L_CANACC);
               DBG2
                 'L_NOSERVIR ' + $STR(L_NOSERVIR);
               (* EMA 18/11/2004 - INCIDENCIA  7614 GRUPO CONSTENLA     *)
               (* MODIFICO LA LINEA DE LA INCIDENCIA DE UNIDADES ROTAS  *)
               (* COMPROBANDO SI L_CANTIDAD1 = 0 EN LUGAR DE SI ES IGUAL*)
               (* A L_ROTO *)
               IF (L_INCIDEN[1] = '1' AND NOT L_STOCK_INSU) OR
                  (L_INCIDEN[2] = '1' AND NOT L_CANTIDAD1) OR
                  (L_INCIDEN[5] = '1' AND
                  (L_CANTIDAD1 - L_CANACC) = L_NOSERVIR) THEN BEGIN
                  L_PRESENTAR = 0;
                  DBG2
                    'Entra POR IF (L_INCIDEN[1] = 1 AND ' +
                    'L_STOCK_INSU = 0) OR (L_INCIDEN[2] = 1 AND ' +
                    'L_CANTIDAD1 = 0)';
                  DBG2
                    'Pone L_PRESENTAR A 0';
                  DBG2
                    'STOCK INSUF A 0';
                  (* RS 11/04/2004 *)
                  L_ESCERO = 1;
                  IF L_INCIDEN[5] = '1' AND L_CANACC THEN
                     L_CANTIDAD1 = 0;
               END;
 
 
               IF L_INCIDEN[4] = '1' AND NOT L_SEGUNDA THEN BEGIN
                  DBG2
                    'Entra POR L_INCIDEN[4] = 1 AND NOT L_SEGUNDA';
                  L_PRESENTAR = 0;
                  DBG2
                    'Pone L_PRESENTAR A 0';
               END;
               IF L_INCIDEN[4] = '1' AND L_SEGUNDA THEN BEGIN
                  DBG2
                    'Entra POR L_INCIDEN[4] = 1 AND L_SEGUNDA';
                  DBG2
                    'Incidencia 4 de segunda vuelta';
                  LOGIC-PIC-INC-001 USING L_ACCCOD1,
                                          L_INCIDEN,
                                          L_CANTIDAD1,
                                          L_SEGUNDA,
                                          L_STOCK_INSU,
                                          L_ROTO,
                                          L_REPONER MODIFY,
                                          0,
                                          L_AUTOREP;
               END;
               IF L_INCIDEN[1] ='1' OR L_INCIDEN[2] = '1' OR
                  L_INCIDEN[3] ='1' OR L_INCIDEN[4] = '1' OR
                  L_INCIDEN[5] = '1' THEN BEGIN
                  LOGIC-LIB-MOV-UPD USING 'OK  ', ' ',0;
               END;
               ELSE BEGIN
                  LOGIC-LIB-MOV-UPD USING 'EXIT', ' ',8;
               END;
               IF L_ESPERA THEN BEGIN
                  DBG2
                    'Espera reposicion o mercancia en muelle';
                  LOGIC-LIB-MOV-INS USING 'GEST','ESRE', $SECTION_NAME, '', 0;
                  LOGIC-LIB-MOV-UPD USING 'OK', '', 0, 'GEST', 'ESRE';
                  L_ESPERA = 0;
                  DBG2
                    'L_ESPERA pasa a valer 0';
               END;
               (* Actualizamos la cantidad en la accion, para que los *)
               (* informes de productividad salgan correctamente      *)
               DBG2
                 'Cantidad a actualizar en accion ' + $STR(L_ACCCOD1) +
                 ' ' + $STR(L_CANTIDAD1);
               EXEC SQL
               UPDATE ACCTRA SET CAN = :L_CANTIDAD1
                WHERE ACCCOD = :L_ACCCOD1;
               LOGIC-LIB-MOV-INS USING 'TRAB','PICK',$SECTION_NAME,'',L_ACCCOD1;
               DBG2
                 'Cantidad a actualizar en accion ' + $STR(L_CANTIDADACCION) +
                 ' ' + $STR(L_CANTIORI);
               EXEC SQL
               UPDATE ACCTRA SET CAN = :L_CANTIDADACCION
                WHERE ACCCOD = :L_ACCCOD1;
 
               (* RS 11/03/03 V2gipd - Gestion incidencia picking destino *)
               (* Para salir del WHILE *)
               IF L_INCIDESTINO THEN BEGIN
                  DBG2
                    'IF L_INCIDESTINO THEN BREAK';
                  BREAK;
               END;
            END; (* IF NOT L_PICINV *)
            ELSE BEGIN
 
               DBG2
                 'Incidencia de Picking Inverso';
 
               (* Control del las incidencias del Picking Inverso *)
               L_FININCIDE = 0;
               L_CONFIRMA = 0;
               L_RECHAZA = 0;
 
               WHILE NOT L_FININCIDE DO BEGIN
                  LOGIC-LIB-MOV-INS USING 'TRAB','INCI', $SECTION_NAME,'',0;
                  DBG2
                    'Dentro de WHILE L_FININCIDE, antes de PIB-001-P';
 
                  (* Modif. FGG 22/05/2003 Cortefiel *)
                  (* Obtenemos el numero de incidencia pulsada y si est- *)
                  (* activo el parametro INCI-CAN-PIC-INV, realizamos la *)
                  (* entrada o salida de mercancia en el contenedor de la*)
                  (* acciãn.                                             *)
                  L_NUMINC = 0;
(* SCREEN-RFT-PIB-001-P USING L_INCIDEN MODIFY, *)
SECTION "SCREEN-RFT-PIB-001-" + GVPF_TTR
 USING L_INCIDEN MODIFY,
                                             L_ACCCOD1,
                                             L_CANTIDAD1,
                                             L_CANINCI MODIFY,
                                             L_CONFIRMA MODIFY,
                                             L_RECHAZA MODIFY,
                                             L_NUMINC MODIFY;
 
                  DBG2
                    'NUMINC: ' + $STR(L_NUMINC);
 
                  IF L_CONFIRMA AND L_INCI-CAN-PICI = 'S' THEN BEGIN
                     DBG2
                       'IF L_CONFIRMA AND L_INCI-CAN-PICI';
                     L_ARTCODPI    = 0;
                     L_UBIDESCODPI = 0;
                     EXEC SQL
                     SELECT ACCTRA.ARTCOD, UBIDESCOD
                       INTO :L_ARTCODPI, :L_UBIDESCODPI
                       FROM ACCTRA
                      WHERE ACCCOD = :L_ACCCOD1;
 
                     EXEC SQL
                     SELECT NDOCOD, FECFAB, FECCAD, CRIROT, LOTE
                       INTO :L_NDOCODPI, :L_FECFABPI,
                            :L_FECCADPI, :L_CRIROTPI, :L_LOTEPI
                       FROM CNTNDO
                      WHERE CNTEXTCOD = :L_CNTCOD
                        AND ARTCOD    = :L_ARTCODPI;
 
                     DBG2
                       'CANTIDAD1: ' + $STR(L_CANTIDAD1);
                     DBG2
                       'CANINCI: ' + $STR(L_CANINCI);
                     (* Salida de mercancia *)
                     IF L_NUMINC = 1 THEN BEGIN
                        L_DIF = L_CANTIDAD1 - L_CANINCI * (-1);
 
                        L_ORIMOVPI = 'SALI'; (* Traspaso Mercancia *)
                        L_CLAMOVPI = 'SAPI'; (* Traspaso *)
                        L_OBSPI = 'Salida de mercancia por incidencia en ' +
                                  'Picking inverso';
                        L_FECFABPI = ' ';
                        DBG2
                          'Salida de ' + $STR(L_DIF) +
                          ' unidades del articulo ' + $STR(L_ARTCODPI);
                     END;
 
                     (* Entrada de mercancia *)
                     IF L_NUMINC = 2 THEN BEGIN
                        L_DIF = (-1) * L_CANINCI - L_CANTIDAD1;
                        L_ORIMOVPI = 'ENTR'; (* Traspaso Mercancia *)
                        L_CLAMOVPI = 'ENPI'; (* Traspaso *)
                        L_OBSPI = 'Entrada de mercancia por incidencia en ' +
                                  'Pinking inverso';
                        L_FECFABPI = $DATES;
 
                        DBG2
                          'Entrada de ' + $STR(L_DIF) +
                          ' unidades del articulo ' + $STR(L_ARTCODPI);
                     END;
 
                     DBG2
                       'Se realiza un ajuste del contenedor ' +
                       'de la acciãn: ' + $STR(L_ACCCOD1);
                     DBG2
                       ' con ORIMOV: ' + L_ORIMOVPI;
                     DBG2
                       ' CLAMOV: ' + L_CLAMOVPI +
                       ' CNTCOD ' + $STR(L_CNTCOD);
                     DBG2
                       ' y cantidad: ' + $STR(-1 * L_DIF);
 
                     (* Se realiza un ajuste del contenedor de la acciãn *)
                     LOGIC-LIB-MOV-002 USING L_NDOCODPI, L_CNTCOD, L_CNTCOD,
                                             (-1) * L_DIF, L_ORIMOVPI,
                                             L_CLAMOVPI, L_OBSPI, 0, L_ARTCODPI,
                                             0,' ', L_FECFABPI, L_FECCADPI, ' ',
                                             L_CRIROTPI, 0;
 
                     (* Modifico la cantidad en la accion, la cual debe *)
                     (* ser negativa por tratarse del picking inverso   *)
                     DBG2
                       'Se actualiza CAN de ACCTRA con CANINCI ' +
                       $STR(-1 * L_CANINCI);
                     EXEC SQL
                     UPDATE ACCTRA SET CAN = (-1) * :L_CANINCI
                      WHERE ACCCOD = :L_ACCCOD1;
 
                     DBG2
                       'Actaulizamos L_CANTIDAD1 a L_CANINCI';
                     L_CANTIDAD1 = L_CANINCI * (-1);
 
                     (* Modif. FGG 11/06/2003 Cortefiel *)
                     (* Lanzamos el interfaz de ajustes de stock *)
                     L_TERPROCODPI = 0;
                     EXEC SQL
                     SELECT TERPROCOD
                       INTO :L_TERPROCODPI
                       FROM ART
                      WHERE ARTCOD = :L_ARTCODPI;
 
                     IF L_NUMINC = 2 THEN
                        L_DIF = L_DIF * (-1);
                     DBG2
                       'Envio ajuste L_DIF = ' + $STR(L_DIF);
 
                     LOGIC-INT-AST-000 USING L_ARTCODPI, L_DIF,
                                             "INPI", L_LOTEPI, 0, L_OBSPI,
                                             L_UBIDESCODPI, L_TERPROCODPI,
                                             L_TERPROCODPI,0;
                     (* Fin 11/06/2003 *)
 
                  END;
                  IF L_CONFIRMA OR L_RECHAZA THEN
                     L_FININCIDE = 1;
                  IF L_RECHAZA THEN BEGIN
                     L_INCIDEN = '00000';
                     L_CANINCI = 0;
                  END;
               END; (* WHILE NOT L_FININCIDE *)
 
               (* Impedimos que se ejecute este trozo de cãdigo que busca *)
               (* ubicaciãn de altura, para el resto de mercancia si el   *)
               (* par-metro INCI-CAN-PIC-INV est- activo ya que se ha     *)
               (* traspasado todo el contenido a la ubicaciãn de picking  *)
               IF L_INCIDEN[1] = '1' AND L_INCI-CAN-PICI = 'N' THEN BEGIN
                  DBG2
                    'IF L_INCIDEN[1] AND L_INCI-CAN-PICI = N';
                  (* Fin 22/05/2003 *)
                  IF L_CANINCI THEN BEGIN
                     (* Modifico la cantidad en la accion, la cual debe *)
                     (* ser negativa por tratarse del picking inverso   *)
 
                     DBG2
                       'Cantidad de incidencia ' + $STR(L_CANINCI);
 
                     EXEC SQL
                     UPDATE ACCTRA SET CAN = (-1) * :L_CANINCI
                      WHERE ACCCOD = :L_ACCCOD1;
                  END; (* IF L_CANINCI *)
                  ELSE BEGIN
                     L_PRESENTAR = 0;
                     DBG2
                       'Pone L_PRESENTAR A 0';
                  END;
                  L_ZONPICCOD = 0;
                  L_ZONUBICOD = 0;
                  L_ZONUBIEXT = 0;
                  EXEC SQL
                  SELECT ZONPICCOD, UBIPICDIN, UBIORICOD, ZONUBICOD
                    INTO :L_ZONPICCOD,:L_UBIPICDIN,:L_UBIORICOD,:L_ZONUBICOD
                    FROM ACCTRA, ARTALM
                   WHERE ACCTRA.ACCCOD = :L_ACCCOD1
                     AND ARTALM.ARTCOD = ACCTRA.ARTCOD
                     AND ARTALM.ALMCOD = :GV_ALMCOD;
 
                  L_CLAUSE2 = " WHERE ZONUBICOD = "+$STR(L_ZONUBICOD) +
                              " AND NUMORD > 0 " +
                              " ORDER BY NUMORD ";
                  SELECT * FROM ALMZONUBIEXT
                       SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE2);
                  FOR ALMZONUBIEXT SELECTED ITERATIONS(1) DO
                     L_ZONUBIEXT = ZONUBIEXT;
 
                  IF L_UBIPICDIN = 'C' THEN BEGIN
                     DBG2
                       'IF L_UBIPICDIN = C';
                     (* RS 26/03/2004 MAR13 *)
                     L_NUMVER = 0;
                     LOGIC-LIB-PAR-001 USING 'MAPA',
                                             'RUTAREC-REPAPIC',
                                             ' ', L_NUMVER MODIFY;
                     IF NOT L_NUMVER THEN
                        LOGIC-LIB-PAR-001 USING 'MAPA','RUTAREC-ACTIVA', ' ',
                                                L_NUMVER MODIFY;
                     (* Llamamos al programa UBH-PIC-002 que hace *)
                     (* exactamente este trozo de cãdigo          *)
                     LOGIC-UBH-PIC-002 USING L_ZONPICCOD
                                           , L_ZONUBICOD
                                           , L_NUMVER
                                           , L_UBIORICOD
                                           , L_UBIPICINC MODIFY
                     ;
 
                     IF L_UBIPICINC THEN BEGIN
 
                        LOGIC-LIB-CNT-001 USING 'CACC', L_ACCCODINC MODIFY;
                        FOR ACCTRA<ACCCOD:L_ACCCOD1> DO
                           CREATE ACCTRA WITH
                              ACCCOD    = L_ACCCODINC,
                              ACCCOLCOD = ACCTRA.ACCCOLCOD,
                              ACCRELCOD = -1,
                              ACCEST    = 'PD',
                              ACCTIPTAR = ACCTRA.ACCTIPTAR,
                              NDOCOD    = ACCTRA.NDOCOD,
                              UBIORICOD = L_UBIPICINC,
                              UBIDESCOD = ACCTRA.UBIDESCOD,
                              ARTCOD    = ACCTRA.ARTCOD,
                              CAN       = (L_CANTIDAD1 + L_CANINCI),
                              RECCOD    = ACCTRA.RECCOD,
                              MOMCRE    = $NOW,
                              MOMINI    = $NOW;
                     END; (* IF L_UBIPICINC *)
                  END; (* IF L_UBIPICDIN = 'C' OR *)
                  L_CANTIDAD1 = (-1) * L_CANINCI;
 
                  LOGIC-GAC-RUT-002 USING L_ACCCODINC,
                                         'RECO';
               END; (* IF L_INCIDEN[1] *)
 
               DBG2
                 'Antes de LIB-MOV-UPD';
               IF L_INCIDEN[1] = '1' THEN
                  LOGIC-LIB-MOV-UPD USING 'OK',
                                          ' ',
                                          0;
               ELSE
                  LOGIC-LIB-MOV-UPD USING 'EXIT',
                                          ' ',
                                          8;
            END; (* PICKING INVERSO *)
        (***********************************************************)
         END; (* IF L_INCIDENCIA OR L_INCIDESTINO*)
         ELSE BEGIN
            IF NOT L_PARTIR THEN (* PAM 26/11/2003 JLM 28/11/2003 *)
               L_PRESENTAR = 0;
            DBG2
              'ELSE DE IF L_INCIDENCIA OR L_INCDESTINO';
            DBG2
              'Inicializa L_PRESENTAR a cero';
         END;
         DBG2
           'DENTRO DEL WHILE L_PRESENTAR';
      END; (* WHILE L_PRESENTAR *)
      DBG2
        'FUERA DEL WHILE L_PRESENTAR';
      IF NOT L_SALIR AND NOT L_FINVIAJE THEN BEGIN
         DBG2
           'IF NOT L_SALIR AND NOT L_FINVIAJE';
         IF L_INCIDEN[4] = '1' THEN BEGIN
            DBG2
              'IF L_INCIDEN[4] = 1';
            DBG2
              'Incidencia 4 fuera del bucle de L_PRESENTAR';
            DBG2
              'L_SEGUNDA ' + $STR(L_SEGUNDA);
            DBG2
              'L_CANTIDAD1 ' + $STR(L_CANTIDAD1);
            LOGIC-PIC-INC-001 USING L_ACCCOD1,
                                    L_INCIDEN,
                                    L_CANTIDAD1,
                                    L_SEGUNDA,
                                    L_STOCK_INSU,
                                    L_ROTO,
                                    L_REPONER MODIFY,
                                    0,
                                    L_AUTOREP;
 
            LOGIC-EXP-ACT-001 USING L_ACCCOD1;
 
            DBG2
              'Pongo como completada la accion ' + $STR(L_ACCCOD1) +
              ' con incidencia ' + L_INCIDEN;
            EXEC SQL
            UPDATE ACCTRA SET ACCEST ='CO'
             WHERE ACCCOD = :L_ACCCOD1;
 
            (* desrelacionamos la accion, si es que fuera relacionada *)
            EXEC SQL
            UPDATE ACCTRA SET ACCRELCOD = 0
             WHERE ACCRELCOD = :L_ACCCOD1;
            DBG2
              'Marco la accion ' + $STR(L_ACCCOD1) +
              ' de la incidencia como cerrada';
            DBG2
              '-----Hace un CONTINUE------';
            (* RS 13/04/2004 *)
            L_INCIDESTINO = 0;
            CONTINUE;
         END;
 
         LOGIC-LIB-MOV-UPD USING 'OK  ', ' ',0,'TRAB','PICK';
 
         (* RS 23/09/03 Una vez leida la ubicacion origen o ean del articulo *)
         (* se modifica el estado de la accion a IN para poder distinguir    *)
         (* entre aquellas acciones que confirman el movimiento en un cntdor *)
         (* destino, cuales han leido el origen de la accion y cuales no.    *)
         (* Se pretende controlar los casos de concurrencia de operarios en  *)
         (* una misma ubicacion, ya que la mercancia en picking no se reserva*)
         DBG2
           'Cambio el estado de la accion ' + $STR(L_ACCCOD1) + ' a IN';
         EXEC SQL
         UPDATE ACCTRA SET ACCEST = 'IN'
          WHERE ACCCOD = :L_ACCCOD1
            AND ACCEST = 'AS';
 
         L_CNTINTCOD = L_CNTCOD;
         L_CNTEXTCOD = L_CNTCOD;
         L_ACTUALIZADO = 0;
         IF (L_VARIOSCNT = 'S' OR L_CAJCNT = 'S') AND
            NOT L_PICINV AND NOT L_ESCERO THEN BEGIN
            DBG2
              'IF (L_VARIOSCNT = S OR L_CAJCNT=S) AND ' +
              'NOT L_PICINV';
            (* RS 07/01/03 V2apfi Si se permite preparar varios contenedores*)
            (* a la vez y el parametro DOBLE-LECTURA esta activo, se        *)
            (* realizaran tantas lecturas como unidades distintas haya que  *)
            (* preparar para una misma accion                               *)
            I = 1;
            L_AVISO = ' ';
            IF L_DOBLE-LECTURA = 'S' THEN BEGIN
               DBG2
                 'IF L_DOBLE-LECTURA = S';
               L_UNIEXP = ' ';
               L_UNIMIN = ' ';
               L_NUMUNI = 0;
               L_CANEXP = 0;
               L_CANUDS = 0;
               (* Por si se cae el terminal entre la peticion de cajas y *)
               (* la de unidades.                                        *)
               L_CANMOV = 0;
               EXEC SQL
               SELECT UNIEXP, UNIMIN, NUMUNI, CANMOV
                 INTO :L_UNIEXP, :L_UNIMIN, :L_NUMUNI, :L_CANMOV
                 FROM ACCTRA, ART, ARTPRE
                WHERE ACCTRA.ACCCOD = :L_ACCCOD1
                  AND ART.ARTCOD = ACCTRA.ARTCOD
                  AND ARTPRE.ARTCOD = ART.ARTCOD
                  AND ARTPRE.UNITIP = ART.UNIEXP;
               DBG2
                 'CANTIDAD1 ' + $STR(L_CANTIDAD1);
               DBG2
                 'L_CANMOV ' + $STR(L_CANMOV);
               DBG2
                 'L_NOSERVIR ' + $STR(L_NOSERVIR);
               DBG2
                 'L_SUELTO ' + $STR(L_SUELTO);
 
               L_CANEXP =
          $TRUNC((L_CANTIDAD1 + L_SUELTO - L_NOSERVIR - L_CANMOV) / L_NUMUNI);
               L_CANUDS =
             $MOD((L_CANTIDAD1 + L_SUELTO - L_NOSERVIR - L_CANMOV), L_NUMUNI);
 
               DBG2
                 'L_CANEXP ' + $STR(L_CANEXP);
               DBG2
                 'L_CANUDS ' + $STR(L_CANUDS);
 
               L_LECTURAS = 0;
               IF L_CANEXP THEN BEGIN
                  L_AVISO = "Lea destino " + L_UNIEXP;
                  IF L_CANUDS THEN BEGIN
                     L_LECTURAS = 2;
                     I = 2;
                  END;
               END;
               ELSE IF L_CANUDS THEN BEGIN
                  L_LECTURAS = 1;
                  L_AVISO = "Lea destino " + L_UNIMIN;
                  IF L_ANID-DOBLE THEN
                     L_AVISO = "Lea destino resto";
               END;
            END;
 
            (* RS 11/03/03 V2gipd - Gestion incidencia picking destino *)
            L_INCIAUX = 0;
            IF L_INCIDESTINO = 2 THEN BEGIN
               DBG2
                 'IF L_INCIDESTINO=2';
               L_INCIAUX = L_INCIDESTINO;
            END;
 
            LOOP J INIT(1) ITERATIONS(I) DO BEGIN
               DBG2
                 'LOOP J ITERATIONS I';
               (* Si lleva varios contenedores, o lleva cajas contenedoras *)
               (* cada vez que deposita mercancia tiene que confirmar el   *)
               (* contenedor en el que lo deja.                            *)
               L_MENSAJE = 0;
               IF J = I THEN L_MENSAJE = 1;
 
               DBG2
                 'J ' + $STR(J);
(* SCREEN-RFT-PIC-002-P USING L_ACCCOLCOD, *)
SECTION "SCREEN-RFT-PIC-002-" + GVPF_TTR
 USING L_ACCCOLCOD,
                                          L_ACCCOD1,
                                          L_ACCCOD2,
                                          L_SALE MODIFY,
                                          L_CNTCOD,
                                          L_CNTINTCOD MODIFY,
                                          L_CNTEXTCOD MODIFY,
                                          L_VARIOSCNT,
                                          L_CAJCNT,
                                 (L_CANTIDAD1 + L_SUELTO - L_NOSERVIR),
                                          L_CANTIDAD2,
                                          0,
                                          ' ',
                                          L_AVISO,
                                          L_INCIDESTINO MODIFY,
                                          L_MENSAJE;
 
               IF L_INCIDESTINO THEN BEGIN
                  L_INCIDESTINO = J;
                  DBG2
                    'IF L_INCIDESTINO THEN BREAK';
                  BREAK;
               END;
 
               IF L_LECTURAS = 2 THEN BEGIN
                  DBG2
                    'IF L_LECTURAS=2';
SEGMENT BEGIN
                  EXEC SQL
                  SELECT NUMUNI
                    INTO :L_NUMUNI
                    FROM ACCTRA, ART, ARTPRE
                   WHERE ACCTRA.ACCCOD = :L_ACCCOD1
                     AND ART.ARTCOD = ACCTRA.ARTCOD
                     AND ARTPRE.ARTCOD = ART.ARTCOD
                     AND ARTPRE.UNITIP = ART.UNIEXP;
 
                  L_CANEXP = L_CANEXP * L_NUMUNI;
 
                  IF J = 1 THEN BEGIN
(*EV:19-07-2007*)
DBG2 'IF J = 1 THEN BEGIN';
DBG2 'L_CANTIDAD1 = ' + $STR(L_CANTIDAD1);
DBG2 'L_CANEXP = ' + $STR(L_CANEXP);
DBG2 'IGUALA L_CANTIDADAUX=L_CANTIDAD1 y L_CANTIDAD1=L_CANEXP';
                     (* Guardo la cantidad original para que en el caso *)
                     (* de preparar unidades, muestre la cantidad bien  *)
                     (* en pantalla.                                    *)
                     L_CANTIDADAUX = L_CANTIDAD1;
                     L_CANTIDAD1 = L_CANEXP;
DBG2 'L_CANTIDAD1===' + $STR(L_CANTIDAD1);
DBG2 'L_CANTIDADAUX===' + $STR(L_CANTIDADAUX);
DBG2 'L_INCIAUX' + $STR(L_INCIAUX);
DBG2 'L_LECTURAS ' + $STR(L_LECTURAS);
DBG2 'L_CANMOV ' + $STR(L_CANMOV);
                     (*Logista: incidencia 12427 cantidades negativas*)
                     IF L_LECTURAS = 2 THEN BEGIN
                        (*Se guarda la parte preparada en cajas*)
                        DBG2 'L_CANTIDADAUXCJ = L_CANEXP';
                        L_CANTIDADAUXCJ = L_CANEXP;
                     END;
DBG2 '>1>>>>>>>>>>INICIO GES-PIC-001';
SEGMENT BEGIN
#INCLUDE-GES-PIC-001
END;
DBG2 '>1>>>>>>>>>>FIN GES-PIC-001';
                     (* Debe mostrar la cantidad correcta *)
                     (* 23/03/2004 Incidencia 6414 *)
                     DBG2 'L_CANTIDADAUX:' + $STR(L_CANTIDADAUX);
                     DBG2 'L_CANTIDAD1 = L_CANTIDADAUX';
                     L_CANTIDAD1 = L_CANTIDADAUX;
                     IF L_CONCURRENCIA THEN BEGIN
                        DBG2
                          'CONCURRENCIA 1, <<<<<<BREAK>>>>>>';
                        BREAK;
                     END;
                  END;
                  ELSE
                     L_CANTIDAD1 = L_CANUDS;
END;
               END;
               ELSE IF L_CANUDS THEN BEGIN
                  L_CANTIDAD1 = L_CANUDS;
                  (* RS 11/04/2004 No se debe volver a actualizar la cantidad*)
                  L_ACTUALIZADO = 1;
               END;
 
               (* Si hay dos lecturas, la segunda seran las unidades *)
               L_AVISO = "Lea destino " + L_UNIMIN;
            END;  (* LOOP *)
            (* 23/03/2004 Incidencia 6414 *)
            IF L_CONCURRENCIA THEN BEGIN
               DBG2
                 'CONCURRENCIA 1';
               CONTINUE;
            END;
         END;
 
         IF NOT L_INCIDESTINO OR L_ESCERO THEN BEGIN
            IF L_LECTURAS <> 2 AND NOT L_ACTUALIZADO THEN BEGIN
               (* Gestionar las incidencias *)
               L_CANTIDAD1 = (L_CANTIDAD1 + L_SUELTO - L_NOSERVIR);
               DBG2
                 'Gest. Inc. L_CANTIDAD1 ' + $STR(L_CANTIDAD1);
            END;
            (****************************************************************)
DBG2 '>2>>>INICIO GES-PIC-001>>>>>>>>';
L_UBIORIGEN = L_UBIORI;
(*EV:19-07-2007*)
DBG2 'L_CANTIDAD1===' + $STR(L_CANTIDAD1);
DBG2 'L_CANTIDADAUX===' + $STR(L_CANTIDADAUX);
DBG2 'L_CANTIDADAUXCJ===' + $STR(L_CANTIDADAUXCJ);
DBG2 'L_INCIAUX' + $STR(L_INCIAUX);
DBG2 'L_LECTURAS ' + $STR(L_LECTURAS);
DBG2 'L_CANMOV ' + $STR(L_CANMOV);
DBG2 'L_UBIORIGEN ' + $STR(L_UBIORIGEN);
            (*Logista: incidencia 12427 cantidades negativas*)
            IF L_LECTURAS=2 AND L_CANTIDAD1=0 AND L_INCIDEN[1]='1' THEN BEGIN
   (*Si se ha preparado la parte de cj y se ha pulsado stk insuf a cero en *)
   (*la parte de unidades, hay que inicializar L_CANTIDADAUX con las cajas *)
   (*preparadas. Si se pulso stk insuf a cero en la parte de cj, hay que   *)
   (*inicializar L_CANITIDADAUX a cero.                                    *)
               L_CANTIDADAUX = L_CANTIDADAUXCJ;
               DBG2 'L_CANTIDADAUX = L_CANTIDADAUXCJ>>';
            END;
 
SEGMENT BEGIN
#INCLUDE-GES-PIC-001
END;
DBG2 '>2>>>FIN GES-PIC-001>>>>>>>>';
            (* 23/03/2004 Incidencia 6414 *)
            IF L_CONCURRENCIA THEN BEGIN
               DBG2
                 'CONCURRENCIA 2, <<<<<<<<<<<<CONTINUE>>>>>>>>>>>';
               CONTINUE;
            END;
            (*Logista: incidencia 12427 cantidades negativas*)
            DBG2 'L_CANTIDADAUXCJ = 0';
            L_CANTIDADAUXCJ = 0;
         END; (* IF NOT L_INCIDESTINO *)
 
         L_CANMOV2 = 0;
         EXEC SQL
         SELECT CANMOV
           INTO :L_CANMOV2
           FROM ACCTRA
          WHERE ACCCOD = :L_ACCCOD1;
         (* RS 26/09/2007 - Incidencia 15629 *)
         DBG4 'Modifico la cantidad de la accion a ' + $STR(L_CANMOV2);
         DBG4 ' en L_HISACCCOD ' + $STR(L_HISACCCOD);
         EXEC SQL
         UPDATE HISMOVACC SET CANUNI = :L_CANMOV2
          WHERE HISACCCOD = :L_HISACCCOD;
         L_HISACCCOD = GV_HISACCCOD;
         DBG2
           'Sale de IF NOT L_SALIR AND NOT L_FINVIAJE';
      END; (* IF NOT L_SALIR AND NOT L_FINVIAJE *)
      ELSE BEGIN
         DBG2
           'ELSE DE IF NOT L_SALIR AND NOT L_FINVIAJE';
         IF L_FINVIAJE = 3 THEN BEGIN
            L_FINVIAJE = 0;
            DBG2
              'IF L_FINVIAJE = 3 THEN L_FINVIAJE = 0';
         END;
         ELSE
            LOGIC-LIB-MOV-UPD USING 'EXIT', ' ',8,'TRAB','PICK';
      END;
      DBG2
        'Sale de IF L_HAYACCIONES';
   END; (* IF L_HAYACCIONES *)
   ELSE BEGIN
      DBG2
        'ELSE DE IF L_HAYACCIONES';
      (* Comprobar si ha presentado alguna accion *)
         L_FINVIAJE = 2; (* AP 09/02/00 *)
         DBG2
           'IF L_RECOGIDO THEN L_FINVIAJE=2';
      IF L_RECO = 1 THEN
         L_HAYACCIONES = 1;
 
   END;
   DBG2
     'DENTRO DEL WHILE NOT L_SALIR';
END; (* WHILE NOT L_SALIR *)
 
DBG2
  'Fuera del WHILE, SALIR ' + $STR(L_SALIR) +
  ' FINVIAJE ' + $STR(L_FINVIAJE) + ' HAYACCIONES ' + $STR(L_HAYACCIONES) +
  ' L_INCREPPANT ' + $STR(L_INCREPPANT);
 
DBG2
  'L_ACCCODNEW1 ' + $STR(L_ACCCODNEW1);
DBG2
  'L_ACCCODNEW2 ' + $STR(L_ACCCODNEW2);
DBG2
  'L_COLSIGCOD ' + $STR(L_COLSIGCOD);
 
IF L_SALIR OR L_FINVIAJE THEN BEGIN
   DBG2
     'IF L_SALIR OR L_FINVIAJE <> 0';
   (* Antes de salir se borran las acciones de segunda vuelta que se *)
   (* acaban de generar y pueden no ser necesarias.                  *)
   IF L_ACCCODNEW1 THEN BEGIN
      DBG2
        'IF L_ACCCODNEW1 <> 0';
      EXEC SQL
      DELETE FROM ACCTRA
       WHERE ACCCOD = :L_ACCCODNEW1;
      DBG2
        'Borro las acciones de segunda vuelta';
   END;
   IF L_ACCCODNEW2 THEN BEGIN
      DBG2
        'IF L_ACCCODNEW2 <> 0';
      EXEC SQL
      DELETE FROM ACCTRA
       WHERE ACCCOD = :L_ACCCODNEW2;
      DBG2
        'Borro las acciones de segunda vuelta';
   END;
 
   (* Compruebo si hay acciones en la cola de segunda vuelta *)
   L_HAYACCS = 0;
   L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_COLSIGCOD) +
              "   AND " + $STR(L_COLSIGCOD) + " > 0 ";
   SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
   FOR ACCTRA SELECTED DO BEGIN
      L_HAYACCS = 1;
      DBG2
        'HAY ACCS EN COLA DE SEGUNDA VUELTA';
   END;
   IF NOT L_HAYACCS THEN BEGIN
      DBG2
        'IF NOT L_HAYACCS';
      EXEC SQL
      DELETE FROM ACCCOL
       WHERE ACCCOLCOD = :L_COLSIGCOD;
      DBG2
        'Borro la cola de segunda vuelta';
   END;
END; (* IF L_SALIR OR L_FINVIAJE *)
 
IF L_SALIR = 1 THEN BEGIN
   DBG2
     'IF L_SALIR = 1';
   (* Descargar contenedor vacio. Incidencia 1971 de l'oreal *)
   L_CUANTOS = 0;
   EXEC SQL
   SELECT COUNT(NDOCOD)
     INTO :L_CUANTOS
     FROM CNTNDO
    WHERE CNTEXTCOD = :L_CNTCOD;
   L_CUANTOS = $NVL(L_CUANTOS,0);
   IF NOT L_CUANTOS AND L_CNTCOD THEN BEGIN
      LOGIC-DES-CNT-001 USING L_CNTCOD;
      (* RS 23/09/03 Los contenedores vacios deben tener ACCCOLCOD = 0 *)
      EXEC SQL
      UPDATE CNTDOR SET ACCCOLCOD = 0
       WHERE CNTCOD = :L_CNTCOD;
   END;
END;
 
(* RS 17/02/03 V2pmp - Picking Multipedido *)
IF L_MULTIPEDIDO <> 'S' OR L_PICINV THEN BEGIN
   DBG2
     'IF L_MULTIPEDIDO <> S OR L_PICINV';
   IF L_FINVIAJE = 2 THEN BEGIN
      DBG2
        'IF L_FINVIAJE=2';
      L_HAYACCSEG = 0;
      IF L_COLSIGCOD THEN BEGIN
         (* Compruebo si hay acciones de segunda vuelta no finalizadas *)
         L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_COLSIGCOD) +
                    " AND ACCEST <> 'CO' " +
                    " AND UBIORICOD <> 0 " ;
         SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
         FOR ACCTRA SELECTED DO
            L_HAYACCSEG = 1;
      END;
      IF NOT L_HAYACCSEG THEN BEGIN
         DBG2
           'IF NOT L_HAYACCSEG THEN L_FINVIAJE=1';
         L_FINVIAJE = 1;
      END;
   END;
   ELSE BEGIN
      DBG2
        'ELSE DE IF L_FINVIAJE=2';
      IF NOT L_FINVIAJE AND NOT L_COLSIGCOD THEN BEGIN
         DBG2
           'IF L_FINVIAJE=0 AND L_COLSIGCOD=0 THEN L_FINVIAJE=1';
         L_FINVIAJE = 1;
      END;
   END;
END;
ELSE BEGIN
   DBG2
     'ELSE DE IF L_MULTIPEDIDO <> S OR L_PICINV';
   (* Esta parte no la tengo clara *)
   IF L_FINVIAJE = 2 OR NOT L_FINVIAJE THEN BEGIN
      DBG2
        'IF L_FINVIAJE=2 OR L_FINVIAJE=0';
      DBG2
        'MULTIPEDIDO L_FINVIAJE ' + $STR(L_FINVIAJE);
      (* Compruebo si hay acciones de segunda vuelta no finalizadas *)
      L_CLAUSE = ", ACCCOL WHERE ACCCOL.ACCCOLCOD = X0.ACCCOLCOD " +
                 " AND RECMAQCOD = " + $STR(GV_RECMAQCOD) +
                 " AND COLSIGCOD = 0 " +
                 " AND X0.ACCEST <> 'CO' " +
                 " AND X0.UBIORICOD <> 0 ";
      DBG2
        L_CLAUSE;
      SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
      FOR ACCTRA SELECTED ITERATIONS(1) DO
         L_HAYACCSEG = 1;
      IF NOT L_HAYACCSEG THEN BEGIN
         DBG2
           'IF NOT L_HAYACCSEG THEN L_FINVIAJE=1';
         L_FINVIAJE = 1;
      END;
   END;
END;
DBG2
  'FINVIAJE ' + $STR(L_FINVIAJE);
IF L_FINVIAJE = 1 THEN BEGIN
   (* RS 29/04/03 Logista - Se vacia la carretilla de contenedores vacios *)
   DBG2
     'IF L_FINVIAJE=1';
   (* PAM 30/4/03 VER CABECERA *)
   IF NOT L_PICINV THEN BEGIN
      DBG2
        'IF NOT L_PICINV';
      LOGIC-VAC-CAR-001 USING L_CAR, 'SALI';
   END;
   (* RS 17/02/03 V2pmp - Picking Multipedido *)
   IF L_MULTIPEDIDO <> 'S' OR L_PICINV THEN BEGIN
      DBG2
        'IF L_MULTIPEDIDO <> S OR L_PICINV';
      L_COLPESCOD = 0;
      L_RECOPECOD = 0;
      L_GESCOLPES = ' ';
      L_PES = 0;
 
      EXEC SQL
      SELECT COLPESCOD, RECOPECOD
        INTO :L_COLPESCOD, :L_RECOPECOD
        FROM ACCCOL
       WHERE ACCCOLCOD = :L_ACCCOLCOD;
 
      EXEC SQL
      SELECT GESCOLPES, COLEST
        INTO :L_GESCOLPES , :L_COLEST
        FROM ACCCOL
       WHERE ACCCOLCOD = :L_COLPESCOD;
 
      IF L_GESCOLPES = 'S' AND L_COLEST <> 'CO' THEN BEGIN
 
         DBG2
           'FINVIAJE = 1, ACCCOLCOD: ' + $STR(L_ACCCOLCOD);
 
         (* No se porque tiene que poner completada la cola, pero lo hacia *)
         (* sin comprobar que hubiera acciones pendientes.                 *)
 
         L_HAYACCS = 0;
         L_CLAUSE  = " WHERE ACCCOLCOD = " + $STR(L_ACCCOLCOD) +
                     " AND ACCEST <> 'CO'" +
                     " AND UBIORICOD <> 0";
 
         SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
         FOR ACCTRA SELECTED ITERATIONS(1) DO
            L_HAYACCS = 1;
 
         IF NOT L_HAYACCS THEN BEGIN
            FOR ACCCOL<ACCCOLCOD:L_ACCCOLCOD> DO
               COLEST = 'CO';
            DBG2
              'Finalizo la cola de Picking ';
         END;
 
         IF L_PESO-EN-MANIP[1] <> 'S' THEN BEGIN
 
            DBG2
              'Asigno las acciones de pesaje de la cola ' +
              $STR(L_COLPESCOD);
 
            EXEC SQL
            UPDATE ACCTRA SET ACCEST = 'AS'
             WHERE ACCCOLCOD = :L_COLPESCOD
               AND ACCEST   <> 'CO';
            DBG2
              'Asigno la cola al mismo operario';
 
            EXEC SQL
            UPDATE ACCCOL SET COLEST    = 'AS',
                              RECOPECOD = :L_RECOPECOD
             WHERE ACCCOLCOD = :L_COLPESCOD
               AND COLEST    = 'PD';
            DBG2
              'Voy a hacer la cola de pesaje ' + $STR(L_COLPESCOD);
 
            LOGIC-RFL-PES-001 USING L_COLPESCOD,
                                    L_PES MODIFY,
                                    L_CNTCOD,
                                    0,
                                    0,
                                    L_PICINV,
                                    L_CANLEIDOS MODIFY,
                                    L_PESOLEIDOS MODIFY;
            DBG2
              'L_CANLEIDOS(1) = ' + $STR(L_CANLEIDOS(1));
            DBG2
              'L_PES despues es ' + $STR(L_PES);
 
         END; (* IF L_PESO-EN-MANIP[1] <> 'S' *)
      END; (* IF L_GESCOLPES = 'S' AND L_COLEST <> 'CO' *)
 
      (* RS :03/01/2003 Incidencia detectada en loreal*)
      IF L_COLPESCOD (* FM FRI07 08/07/2009: AND L_HAYACCS *)
                     AND L_PESO-EN-MANIP[1] <> 'S' THEN BEGIN
         (* Para poner el pedido a PR en caso de haber cola de pesaje *)
         SELECT * FROM ACCTRA WHERE ACCCOLCOD = L_COLPESCOD;
         FOR ACCTRA SELECTED ITERATIONS(1) DO
            L_ACCCODPES = ACCCOD;
 
         IF NOT L_PICINV AND L_GEST-MANIP-CNT[1] = 'S' THEN
            LOGIC-EXP-ACT-001 USING L_ACCCODPES, 0, L_CNTCOD;
         ELSE
            LOGIC-EXP-ACT-001 USING L_ACCCODPES;
 
      END;
 
      (* FINALIZO LA COLA DE PESAJE *)
      FOR ACCCOL<ACCCOLCOD:L_COLPESCOD> DO BEGIN
 
         IF L_PESO-EN-MANIP[1] <> 'S' THEN BEGIN
            COLEST = 'CO';
            DBG2
              'Cierro la cola de pesaje ' + $STR(L_COLPESCOD);
         END;
         ELSE BEGIN
            COLEST = 'BL';
            DBG2
              'Bloqueamos la cola de pesaje ' + $STR(L_COLPESCOD);
            DBG2
              'Se hara posteriormente en manipulacion';
         END;
      END;
 
      (*************************+** PICKING INVERSO **************************)
      (* El picking inverso no necesita leer muelle para dejar el contenedor *)
      (* ya que este debe vaciarse.                                          *)
      IF NOT L_PICINV THEN BEGIN
         (* LLAMO A FIN VIAJE *)
         DBG2
           'FIN VIAJE, COLA ' + $STR(L_ACCCOLCOD);
 
         IF GV_CLIENTE = 'nes1' OR GV_CLIENTE = 'lac' THEN BEGIN
            L_CNTCODNEW = 0;
            LOGIC-RFL-PFI-001 USING L_ACCCOLCOD,
                                    L_SALIR MODIFY,
                                    L_CNTCOD,
                                    L_CNTCODNEW MODIFY;
 
            (* JLM, 28/09/2006 NES25 *)
 
            IF L_CNTCODNEW THEN BEGIN
               L_CNTCOD = L_CNTCODNEW;
              L_FINVIAJE = 4;
            END;
         END;
         ELSE BEGIN
            LOGIC-RFL-PFI-001 USING L_ACCCOLCOD,
                                    L_SALIR MODIFY,
                                    L_CNTCOD;
         END;
 
         (* INTEGRACION CCR: cuando se deja el contenedor en el muelle, a *)
         (* continuaciãn se crean acciones de carga de camiãn para estos  *)
         (* contenedores preparados por picking. EMA 17/09/2002           *)
 
         IF L_CCAM-DESDE-PIC = 'S' THEN BEGIN
 
            L_GUIA = L_EXPORDCOD;
            DBG2
              'Se llama a la generacion de acciones de carga ' +
              'de camion de CCR ';
            LOGIC-LIB-CNT-001 USING 'CAOE', L_EXPNUMSEC MODIFY;
            EXEC SQL
            UPDATE EXPORDCAB SET EXPNUMSEC = :L_EXPNUMSEC
             WHERE EXPORDCOD = :L_GUIA;
            DBG2
              'Llamamos al programa GAC-CNT-001 ';
            LOGIC-GAC-CNT-001 USING L_EXPNUMSEC;
 
         END;
 
         (* FIN INTEGRACION CCR: EMA 17/09/2002 *)
 
      (*******************************************************************)
      END; (* IF NOT L_PICINV *)
   END;
   ELSE BEGIN
      DBG2
        'MULTIPEDIDO FIN VIAJE 1';
      (* El picking multipedido, al igual que ocurre con el picking con  *)
      (* doble lectura, no funciona con articulos de peso variable F, si *)
      (* hay gestion de cajas contenedoras.                              *)
 
      SELECT * FROM V_DESCARGA WITH L_ESTCOD = L_CAR;
      FOR V_DESCARGA SELECTED DO BEGIN
 
         L_ACCCOLCOD = ACCCOLCOD;
 
         L_COLPESCOD = 0;
 
         EXEC SQL
         SELECT COLPESCOD
           INTO :L_COLPESCOD
           FROM ACCCOL
          WHERE ACCCOLCOD = :L_ACCCOLCOD;
 
         L_GESCOLPES = ' ';
         L_COLEST    = ' ';
 
         EXEC SQL
         SELECT GESCOLPES, COLEST
           INTO :L_GESCOLPES , :L_COLEST
           FROM ACCCOL
          WHERE ACCCOLCOD = :L_COLPESCOD;
 
         IF L_GESCOLPES = 'S' AND L_COLEST <> 'CO' THEN BEGIN
 
            DBG2
              'FINVIAJE = 1, ACCCOLCOD: ' + $STR(L_ACCCOLCOD);
 
            (* No se porque tiene que poner completada la cola, pero lo hacia *)
            (* sin comprobar que hubiera acciones pendientes.                 *)
            L_HAYACCS = 0;
            L_CLAUSE  = " WHERE ACCCOLCOD = " + $STR(L_ACCCOLCOD) +
                        " AND ACCEST <> 'CO'" +
                        " AND UBIORICOD <> 0";
 
            SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
            FOR ACCTRA SELECTED ITERATIONS(1) DO
               L_HAYACCS = 1;
 
            IF NOT L_HAYACCS THEN BEGIN
               FOR ACCCOL<ACCCOLCOD:L_ACCCOLCOD> DO
                  COLEST = 'CO';
               DBG2
                 'Finalizo la cola de Picking ';
            END;
 
            IF L_PESO-EN-MANIP[1] <> 'S' THEN BEGIN
 
               DBG2
                 'Asigno las acciones de pesaje de la cola ' +
                 $STR(L_COLPESCOD);
 
               EXEC SQL
               UPDATE ACCTRA SET ACCEST    = 'AS'
                WHERE ACCCOLCOD = :L_COLPESCOD
                  AND ACCEST   <> 'CO';
               DBG2
                 'Asigno la cola al mismo operario';
 
               EXEC SQL
               UPDATE ACCCOL SET COLEST    = 'AS',
                                 RECOPECOD = :GV_RECOPECOD
                WHERE ACCCOLCOD = :L_COLPESCOD
                  AND COLEST    = 'PD';
               DBG2
                 'Voy a hacer la cola de pesaje ' + $STR(L_COLPESCOD);
 
               (* ©©©© OJO CON LAS CAJAS CONTENEDORAS !!!! *)
               L_CNTCODPES = 0;
 
               EXEC SQL
               SELECT CNTCOD
                 INTO :L_CNTCODPES
                 FROM CNTDOR
                WHERE ACCCOLCOD = :L_ACCCOLCOD;
 
               LOGIC-RFL-PES-001 USING L_COLPESCOD,
                                       L_PES MODIFY,
                                       L_CNTCODPES,
                                       0,
                                       0,
                                       L_PICINV,
                                       L_CANLEIDOS MODIFY,
                                       L_PESOLEIDOS MODIFY;
               DBG2
                 'L_CANLEIDOS(1) = ' + $STR(L_CANLEIDOS(1));
               DBG2
                 'L_PES despues es ' + $STR(L_PES);
 
            END; (* IF L_PESO-EN-MANIP[1] <> 'S' *)
         END; (* IF L_GESCOLPES = 'S' AMD L_COLEST <> 'CO' *)
 
         (* RS :03/01/2003 Incidencia detectada en loreal*)
 
         IF L_COLPESCOD AND L_PESO-EN-MANIP[1] <> 'S' THEN BEGIN
            (***************          JPP 06/07/2000        **************)
            (* Para poner el pedido a PR en caso de haber cola de pesaje *)
            SELECT * FROM ACCTRA WHERE ACCCOLCOD = L_COLPESCOD;
            FOR ACCTRA SELECTED ITERATIONS(1) DO
               L_ACCCODPES = ACCCOD;
 
            IF NOT L_PICINV AND L_GEST-MANIP-CNT[1] = 'S' THEN
               LOGIC-EXP-ACT-001 USING L_ACCCODPES, 0, L_CNTCODPES;
            ELSE
               LOGIC-EXP-ACT-001 USING L_ACCCODPES;
            (*************************************************************)
         END;
 
         (* FINALIZO LA COLA DE PESAJE *)
         FOR ACCCOL<ACCCOLCOD:L_COLPESCOD> DO BEGIN
 
            IF L_PESO-EN-MANIP[1] <> 'S' THEN BEGIN
               DBG2
                 'Cierro la cola de pesaje ' + $STR(L_COLPESCOD);
               COLEST = 'CO';
            END;
            ELSE BEGIN
               DBG2
                 'Bloqueo la cola de pesaje '+ $STR(L_COLPESCOD) +
                 ' se hara en manipulacion';
               COLEST = 'BL';
            END;
         END;
         DBG2
           'LLamada A RFL-PFI-001';
         (* LLAMO A FIN VIAJE *)
 
         IF GV_CLIENTE = 'nes1' OR GV_CLIENTE = 'lac' THEN BEGIN
            L_CNTCODNEW = 0;
 
            LOGIC-RFL-PFI-001 USING L_ACCCOLCOD,
                                    L_SALIR MODIFY,
                                    L_CNTCODPES,
                                    L_CNTCODNEW MODIFY;
 
            (* JLM, 28/09/2006 NES25 *)
 
            IF L_CNTCODNEW THEN BEGIN
               L_CNTCOD = L_CNTCODNEW;
               L_FINVIAJE = 4;
            END;
         END;
         ELSE BEGIN
            LOGIC-RFL-PFI-001 USING L_ACCCOLCOD,
                                    L_SALIR MODIFY,
                                    L_CNTCODPES;
         END;
      END; (* FOR V_CARGACAR *)
 
      (* RS 17/02/03 V2pmp - Picking multipedido *)
      SELECT * FROM V_CARGACAR WITH L_ESTCOD = L_CAR;
      FOR V_CARGACAR SELECTED DO BEGIN
         (* INTEGRACION CCR: cuando se deja el contenedor en el muelle, a *)
         (* continuaciãn se crean acciones de carga de camiãn para estos  *)
         (* contenedores preparados por picking. EMA 17/09/2002           *)
         L_EXPORDCOD = 0;
         EXEC SQL
         SELECT EXPORDCOD
           INTO :L_EXPORDCOD
           FROM ACCCOL
          WHERE ACCCOLCOD = :ACCCOLCOD;
 
         IF L_CCAM-DESDE-PIC = 'S' THEN BEGIN
 
            L_GUIA = L_EXPORDCOD;
            DBG2
              'Se llama a la generacion de acciones de carga' +
              ' de camion de CCR';
            LOGIC-LIB-CNT-001 USING 'CAOE', L_EXPNUMSEC MODIFY;
            EXEC SQL
            UPDATE EXPORDCAB SET EXPNUMSEC = :L_EXPNUMSEC
             WHERE EXPORDCOD = :L_GUIA;
            DBG2
              'Llamamos al programa GAC-CNT-001 ';
            LOGIC-GAC-CNT-001 USING L_EXPNUMSEC;
 
         END;
 
         (* FIN INTEGRACION CCR: EMA 17/09/2002 *)
      END;
   END; (* MULTIPEDIDO *)
END; (* IF L_FINVIAJE = 1 *)
 
IF L_FINVIAJE = 1 AND L_SALIR = 1 THEN BEGIN
   DBG2
     'IF L_FINVIAJE=1 AND L_SALIR=1';
   L_CUANTOS = 0;
   EXEC SQL
   SELECT COUNT(NDOCOD)
     INTO :L_CUANTOS
     FROM CNTNDO
    WHERE CNTEXTCOD = :L_CNTCOD;
   L_CUANTOS = $NVL(L_CUANTOS,0);
   IF NOT L_CUANTOS AND L_CNTCOD THEN BEGIN
      DBG2
        'No hay contenido en ' + $STR(L_CNTCOD);
      LOGIC-DES-CNT-001 USING L_CNTCOD;
      (* RS 23/09/03 Los contenedores vacios deben tener ACCCOLCOD = 0 *)
      EXEC SQL
      UPDATE CNTDOR SET ACCCOLCOD = 0
       WHERE CNTCOD = :L_CNTCOD;
   END;
END;
 
(* RS 17/02/03 V2pmp - Picking Multipedido *)
(* Activacion de las segundas vueltas *)
IF L_MULTIPEDIDO <> 'S' OR L_PICINV THEN BEGIN
   DBG2
     'IF L_MULTIPEDIDO <> S OR L_PICINV';
SEGMENT BEGIN
#INCLUDE-ACTIVA-VUELTA2
END;
END;
ELSE BEGIN
   DBG2
     'ELSE DE IF L_MULTIPEDIDO <> S OR L_PICINV';
   SELECT * FROM ACCCOL WHERE RECMAQCOD = GV_RECMAQCOD
                          AND    COLEST = 'IN';
   FOR ACCCOL SELECTED DO BEGIN
      L_ACCCOLCOD = ACCCOLCOD;
      L_COLSIGCOD = COLSIGCOD;
 
SEGMENT BEGIN
#INCLUDE-ACTIVA-VUELTA2
END;
   END;
END;
 
DBG1
  'FIN PROGRAMA -------------';
 
EXIT;
 
INCLUDE-CAPTURA-CNTDOR:
SEGMENT BEGIN
   (* Inicializacion del campo de inicio del trabajo de la cola. Solo *)
   (* visible por ALCAMPO.                                            *)
   FOR ACCCOL <ACCCOLCOD:L_ACCCOLCOD> DO BEGIN
      IF $NULL(MOMINICOL) THEN
         MOMINICOL = $NOW;
   END;
 
   (* Captura de la etiqueta de preparacion *)
   L_SALIR  = 0;
   L_INICIO = 0;
   L_FINCNT = 0;
(* SCREEN-RFT-PIN-001-P USING L_ACCCOLCOD, *)
SECTION "SCREEN-RFT-PIN-001-" + GVPF_TTR
 USING L_ACCCOLCOD,
                              L_CNTCOD MODIFY,
                              L_SALIR MODIFY,
                              L_INICIO MODIFY,
                              L_FINCNT MODIFY;
 
   (*CRF37*)
   L_NUEVACOLA = 0;
   IF L_FINVIAJE = 3 THEN BEGIN
      LOGIC-LIB-CNT-001 USING 'CCOL',L_NUEVACOLA MODIFY;
      SELECT  * FROM ACCCOL WHERE ACCCOLCOD = L_ACCCOLCOD;
      FOR ACCCOL SELECTED DO BEGIN
         CREATE ACCCOL WITH ACCCOLCOD = L_NUEVACOLA,
                            CNTCODETI = L_CNTCOD,
                            COLEST    = ACCCOL.COLEST,
                            COLPRI    = ACCCOL.COLPRI,
                            COLTIP    = ACCCOL.COLTIP,
                            COLPIC    = ACCCOL.COLPIC,
                            ZONPRECOD = ACCCOL.ZONPRECOD,
                            ZONCOLCOD = ACCCOL.ZONCOLCOD,
                            CAJCNT    = ACCCOL.CAJCNT,
                            VARIOSCNT = ACCCOL.VARIOSCNT,
                            EXPORDCOD = ACCCOL.EXPORDCOD,
                            MOMINI    = ACCCOL.MOMINI,
                            MOVHORPOS = ACCCOL.MOVHORPOS,
                            MOVVER    = ACCCOL.MOVVER,
                            ANCOPE    = ACCCOL.ANCOPE,
                            NUMCNT    = ACCCOL.NUMCNT,
                            RECMAQCOD = ACCCOL.RECMAQCOD,
                            RECOPECOD = ACCCOL.RECOPECOD,
                            COLSIGCOD = ACCCOL.COLSIGCOD;
      END;
      SELECT * FROM ACCTRA WHERE ACCCOLCOD = L_ACCCOLCOD;
      FOR ACCTRA SELECTED DO BEGIN
         ACCCOLCOD = L_NUEVACOLA;
      END;
      DBG2
        'Despues de actualizar todas las acciones a la nueva cola ' +
        $STR(L_NUEVACOLA);
   END;
 
   IF L_NUEVACOLA THEN BEGIN
      DBG2
        'Si se ha creado una nueva cola';
      DBG2
        'Modificamos la actual ' + $STR(L_ACCCOLCOD) + ' a la nueva';
      DBG2
        'y la borramos';
      L_COLA = L_NUEVACOLA;
      EXEC SQL
      DELETE FROM ACCCOL
       WHERE ACCCOLCOD = :L_ACCCOLCOD;
      L_ACCCOLCOD = L_NUEVACOLA;
   END;
   ELSE
      L_COLA = L_ACCCOLCOD;
 
   IF L_GEST-MANIP-CNT[1] = 'S' AND NOT L_PICINV AND NOT L_SALIR
   THEN BEGIN
      SELECT * FROM CNTDOR WHERE CNTCOD = L_CNTCOD;
       FOR CNTDOR SELECTED DO BEGIN
 
          IF ACCCOLCOD = 0 THEN
             ACCCOLCOD = L_COLA;
 
          IF EXPGESMAN <> 'NULL' AND EXPGESMAN <> ' ' THEN
             LOGIC-EXP-ACT-004 USING L_CNTCOD;
 
          L_EXPGESMAN = EXPGESMAN;
          EXPGESMAN   = 'NULL';
      END;
   END;
 
   EXEC SQL
   UPDATE CNTDOR SET ACCCOLCOD = :L_COLA
    WHERE CNTCOD    = :L_CNTCOD
      AND ACCCOLCOD = 0;
 
   (* Si hemos creado una cola nueva y hemos cambiado las acciones *)
   (* L_ACCCOLCOD ahora tiene que ser la nueva                     *)
   (* hay que ponerle a la nueva cola recurso y operario           *)
   IF NOT L_SALIR AND NOT L_INICIO THEN BEGIN
      IF L_MULTIPEDIDO = 'S' THEN BEGIN
         FOR ACCCOL <ACCCOLCOD:L_COLA> DO BEGIN
            COLEST = 'IN';
            RECOPECOD = GV_RECOPECOD;
            RECMAQCOD = GV_RECMAQCOD;
         END;
      END;
      LOGIC-LIB-MOV-UPD USING 'OK  ', ' ',0,'TRAB','PICI';
 
      (* RS 26/09/2007 - Incidencia 15629 *)
      L_HISACCCOD = GV_HISACCCOD;
      DBG4 'L_HISACCCOD ' + $STR(L_HISACCCOD);
 
 
 
      (* Desde aqui modificado por MAD 12/12/2000 *)
      (* Motivo: edicion de etiquetas de envio    *)
      L_ETIQUETAS = 'N';
      LOGIC-LIB-PAR-001 USING 'EXPEDICION','ETIENV',L_ETIQUETAS MODIFY;
      IF L_ETIQUETAS = 'S' THEN BEGIN
         L_OK = 0;
         LOGIC-LIB-ETI-ENV USING L_COLA,
                                 0,
                                 L_IMPETI MODIFY,
                                 L_PACKING MODIFY,
                                 L_IMPDOC MODIFY,
                                 L_OK MODIFY,
                                 L_CNTCOD;  (* MODIF. EMA. 24/03/01 *)
 
         IF L_OK = 1 THEN
(* SCREEN-RFT-AVI-001-P USING 'CONTENEDOR ', *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING 'CONTENEDOR ',
                                       'NO PREPARADO';
         IF L_OK = 3 THEN
(* SCREEN-RFT-AVI-001-P USING 'FUSION MULTIDESTINO'; *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING 'FUSION MULTIDESTINO';
         IF L_OK = 10 THEN
(* SCREEN-RFT-AVI-001-P USING 'EMITIR AL FINAL', *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING 'EMITIR AL FINAL',
                                       'DE LA PREPARACION';
      END; (* IF L_ETIQUETAS *)
      (* RS 13/7/2006 - NESS09 *)
      IF GV_CLIENTE = 'nes' THEN BEGIN
         L_PANCON = '';
         L_CLAUSE = ", ACCCOL WHERE ACCCOL.ACCCOLCOD = " + $STR(L_ACCCOLCOD) +
                    " AND X0.EXPORDCOD = ACCCOL.EXPORDCOD" +
                    " AND X0.TXTTIP IN ('Z11','Z14')";
         SELECT * FROM EXPORDCABTXT SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
         FOR EXPORDCABTXT SELECTED DO
            L_PANCON = $TRIM(L_PANCON, RIGHT) + '; ' + $TRIM(TXT,RIGHT);
 
         (* Formateo el mensaje para mostrarlo en pantalla *)
         M = GV_COLUMNAS;
         LOOP N INIT(1) STEP(M) DO BEGIN
            IF L_PANCON[N:N + M - 1] <> ' ' THEN
               L_PANCON = $TRIM(L_PANCON[1:N + M - 1], RIGHT) + ';' +
                          L_PANCON[N + M:1120];
         END;
 
         IF L_PANCON <> ' ' THEN
            SCREEN-INT-USR-GEN USING ''
                                   , 0
                                   , ' '
                                   , L_PANCON
                                   , "Pulse Enter para continuar"
                                   , "F7:Enter"
            ;
      END; (* IF GV_CLIENTE = nes *)
   END; (* IF NOT L_SALIR *)
   ELSE BEGIN
      LOGIC-LIB-MOV-UPD USING 'EXIT', ' ',8,'TRAB','PICI';
   END;
END;
EXIT;
 
INCLUDE-ACTIVA-VUELTA2:
SEGMENT BEGIN
      DBG2
        'Activa segunda vuelta';
      (* Comprueba si no quedan acciones en las colas, borra la cola de *)
      (* picking y activa la cola de segunda vuelta.                    *)
      (* Necesitamos otro mecanismo por si el terminal cae o se apaga en*)
      (* el fin de viaje para no dejar la cola de segunda vuelta blo-   *)
      (* queada.                                                        *)
      L_HAYACCS = 0;
      L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_ACCCOLCOD) +
                 " AND ACCEST <> 'CO' " +
                 " AND UBIORICOD <> 0 " ;
      DBG2
        'L_CLAUSE ' + L_CLAUSE;
      SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
      FOR ACCTRA SELECTED DO BEGIN
         DBG2
           'ACCCOD    ' + $STR(ACCCOD);
         DBG2
           'ACCEST    ' + ACCEST;
         DBG2
           'ACCTIPTAR ' + ACCTIPTAR;
         L_HAYACCS = 1;
      END;
      IF NOT L_HAYACCS THEN BEGIN
         L_HAYACCSEG = 0;
         IF L_COLSIGCOD THEN BEGIN
            DBG2
              'Averigua la cola de pesaje asociada a la cola de primera ' +
              'vuelta antes de borrarla ';
 
            L_COLPESCOD = 0;
 
            EXEC SQL
            SELECT COLPESCOD
              INTO :L_COLPESCOD
              FROM ACCCOL
             WHERE ACCCOLCOD = :L_ACCCOLCOD;
 
            DBG2
              'Si hay cola de segunda vuelta le asigno la cola de pesaje';
 
            IF L_COLPESCOD THEN
               FOR ACCCOL<ACCCOLCOD:L_COLSIGCOD> DO
                  COLPESCOD = L_COLPESCOD;
 
            L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_COLSIGCOD) +
                       " AND ACCEST <> 'CO' " +
                       " AND UBIORICOD <> 0 " ;
            SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
            FOR ACCTRA SELECTED DO BEGIN
               L_HAYACCSEG = 1;
            END;
 
            IF NOT L_HAYACCSEG THEN BEGIN
 
               EXEC SQL
               DELETE FROM ACCTRA
                WHERE ACCCOLCOD = :L_COLSIGCOD;
 
               EXEC SQL
               DELETE FROM ACCCOL
                WHERE ACCCOLCOD = :L_COLSIGCOD;
 
               IF L_PESO-EN-MANIP[1] = 'S' THEN BEGIN
 
                  L_COLEST = ' ';
 
                  EXEC SQL
                  SELECT COLEST
                    INTO :L_COLEST
                    FROM ACCCOL
                   WHERE ACCCOLCOD = :L_COLPESCOD;
 
                  IF L_COLEST = 'BL' THEN
                     EXEC SQL
                     UPDATE CNTDOR SET ACCCOLCOD = :L_COLPESCOD
                      WHERE ACCCOLCOD = :L_ACCCOLCOD;
               END;
            END;
            ELSE BEGIN
               LOGIC-GAC-RUT-001 USING L_COLSIGCOD;
               LOGIC-GAC-ROL-001 USING L_COLSIGCOD,
                                       L_NUMCNT MODIFY;
               (* RS 13/3/2003 V2pmp - Picking multipedido *)
               (* Al menos debe prepararse en un contenedor *)
               IF NOT L_NUMCNT THEN
                  L_NUMCNT = 1;
               SELECT * FROM ACCCOL WHERE ACCCOLCOD = L_COLSIGCOD;
               FOR ACCCOL SELECTED DO BEGIN
                  COLEST = 'PD';
                  NUMCNT = L_NUMCNT;
                  COLPRI = '4';
               END;
               L_SIGUIENTE = L_COLSIGCOD;
               (* JPP 4/5/00: Las colas de segunda vuelta usan la misma cola *)
               (*          de pesaje generada en la primera vuelta           *)
 
               (* RS 05/03/03 V2pmp - Picking multipedido. Los contenedores *)
               (* de la carretilla deben asociarse ahora a las colas de     *)
               (* segunda vuelta.                                           *)
 
               (* V2EXI : GGOMEZ 09/07/2007 *)
               EXEC SQL
               UPDATE CNTDOR SET ACCCOLCOD = :L_COLSIGCOD
                WHERE ACCCOLCOD = :L_ACCCOLCOD
                  AND CNTDOR.CNTCOD IN
                          (SELECT CNTCOD FROM ALMUBI
                            WHERE ALMUBI.ESTCOD = :L_CAR
                              AND CNTDOR.CNTCOD = ALMUBI.CNTCOD);
 
 
 
               (* RS 26/03/03 Incidencia - La cola de segunda vuelta tambien*)
               (* debe cambiarse en las cajas contenedoras.                 *)
               SELECT * FROM V_CNTDORCAR WITH L_ESTCOD = L_CAR;
               FOR V_CNTDORCAR SELECTED DO BEGIN
                  EXEC SQL
                  UPDATE CNTDOR SET ACCCOLCOD = :L_COLSIGCOD
                   WHERE    CNTCOD = :CNTCOD
                     AND ACCCOLCOD = :L_ACCCOLCOD;
               END;
            END; (* ELSE de IF NOT L_HAYACCSEG *)
         END; (* IF L_COLSIGCOD *)
 
         IF NOT L_COLSIGCOD AND L_PESO-EN-MANIP[1] = 'S' THEN BEGIN
 
            L_COLEST    = ' ';
            L_COLPESCOD = 0;
 
            EXEC SQL
            SELECT COLPESCOD
              INTO :L_COLPESCOD
              FROM ACCCOL
             WHERE ACCCOLCOD = :L_ACCCOLCOD;
 
            EXEC SQL
            SELECT COLEST
              INTO :L_COLEST
              FROM ACCCOL
             WHERE ACCCOLCOD = :L_COLPESCOD;
 
           IF L_COLEST = 'BL' THEN
              EXEC SQL
              UPDATE CNTDOR SET ACCCOLCOD = :L_COLPESCOD
               WHERE ACCCOLCOD = :L_ACCCOLCOD;
         END;
 
         (***********************************************)
         (* RS 27/03/03 V2pmp - No se deben borrar las colas de primera*)
         (* vuelta sin cola de segunda asociada, mientras existan otras*)
         (* colas de segunda vuelta.                                   *)
 
         L_PENDIENTE = 0;
 
         (* Modif 01/07/2005 No se comprobaba que el colsigcod existiera *)
         (*  y no se borraba la cola                                     *)
         SELECT * FROM ACCCOL WHERE RECMAQCOD = L_RECMAQCOD AND
                                    COLEST    = 'IN' AND
                                    ACCCOLCOD <> L_ACCCOLCOD;
         FOR ACCCOL SELECTED DO BEGIN
 
            EXEC SQL
            SELECT 1
              INTO :L_PENDIENTE
              FROM ACCTRA
             WHERE ACCCOLCOD = ACCCOLCOD
               AND ACCEST <> 'CO';
            IF NOT L_PENDIENTE THEN
               EXEC SQL
               SELECT 1
                 INTO :L_PENDIENTE
                 FROM ACCCOL
                WHERE ACCCOLCOD = COLSIGCOD;
 
            IF L_PENDIENTE THEN BREAK;
         END;
         DBG2
           'Colas de segunda vuelta ' + $STR(L_PENDIENTE);
 
         (* Fin Modif 01/07/2005 *)
 
         (* Borro la cola si tiene asociada una de segunda vuelta o ya no *)
         (* queda ninguna cola de segunda vuelta.                         *)
         IF L_HAYACCSEG OR NOT L_PENDIENTE THEN BEGIN
            EXEC SQL
            DELETE FROM ACCTRA
             WHERE ACCCOLCOD = :L_ACCCOLCOD;
            DBG2
              'Borro las acciones de la cola ' + $STR(L_ACCCOLCOD);
            EXEC SQL
            DELETE FROM ACCCOL
             WHERE ACCCOLCOD = :L_ACCCOLCOD;
            DBG2
              'Borro la cola ' + $STR(L_ACCCOLCOD);
         END;
 
         (* Borra la cola y las acciones de pesaje               *)
         L_HAYACCPES = 0;
 
         L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_COLPESCOD) +
                    " AND ACCEST <> 'CO' " +
                    " AND UBIORICOD <> 0 ";
 
         SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
         FOR ACCTRA SELECTED DO BEGIN
            L_HAYACCPES = 1;
         END;
 
         IF NOT L_HAYACCPES THEN BEGIN
            EXEC SQL
            DELETE FROM ACCTRA
             WHERE ACCCOLCOD = :L_COLPESCOD;
            EXEC SQL
            DELETE FROM ACCCOL
             WHERE ACCCOLCOD = :L_COLPESCOD;
         END;
         (********************************************************)
      END; (* IF NOT L_HAYACCS *)
 
      IF L_HAYACCS AND L_PESO-EN-MANIP[1] = 'S' THEN BEGIN
 
         DBG2
           'Cola ' + $STR(L_ACCCOLCOD) + " incompleta";
 
         L_COLEST    = ' ';
         L_COLPESCOD = 0;
         L_HAYACCPES = 0;
 
         EXEC SQL
         SELECT COLPESCOD
           INTO :L_COLPESCOD
           FROM ACCCOL
          WHERE ACCCOLCOD = :L_ACCCOLCOD;
 
         EXEC SQL
         SELECT COLEST
           INTO :L_COLEST
           FROM ACCCOL
          WHERE ACCCOLCOD = :L_COLPESCOD;
 
         L_HAYACCPES = 0;
 
         L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_COLPESCOD) +
                    " AND ACCEST <> 'CO' " +
                    " AND UBIORICOD <> 0 ";
 
         SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
         FOR ACCTRA SELECTED DO BEGIN
            L_HAYACCPES = 1;
         END;
 
         IF L_COLEST = 'BL' AND L_HAYACCPES THEN BEGIN
 
            LOGIC-LIB-CNT-001 USING 'CCOL', L_ACCCOLPES MODIFY;
 
            SELECT * FROM ACCCOL WHERE ACCCOLCOD = L_COLPESCOD;
            FOR ACCCOL SELECTED DO BEGIN
 
               CREATE ACCCOL WITH
                  ACCCOLCOD = L_ACCCOLPES,
                  ANCOPE    = ANCOPE,
                  CAJCNT    = CAJCNT,
                  COLEST    = COLEST,
                  COLPIC    = COLPIC,
                  COLPRI    = COLPRI,
                  COLSIGCOD = COLSIGCOD,
                  COLTIP    = COLTIP,
                  ESTCOD    = ESTCOD,
                  EXPORDCOD = EXPORDCOD,
                  MOMINI    = MOMINI,
                  MOVHOR    = MOVHOR,
                  MOVHORPOS = MOVHORPOS,
                  MOVVER    = MOVVER,
                  NUMCNT    = NUMCNT,
                  ORIASG    = ORIASG,
                  RECMAQCOD = RECMAQCOD,
                  RECOPECOD = RECOPECOD,
                  RFTTERCOD = RFTTERCOD,
                  VARIOSCNT = VARIOSCNT,
                  ZONCARCOD = ZONCARCOD,
                  ZONCOLCOD = ZONCOLCOD,
                  ZONPRECOD = ZONPRECOD,
                  COLPESCOD = COLPESCOD,
                  GESCOLPES = GESCOLPES;
            END;
 
            EXEC SQL
            UPDATE CNTDOR SET ACCCOLCOD = :L_ACCCOLPES
             WHERE ACCCOLCOD = :L_ACCCOLCOD;
 
            EXEC SQL
            UPDATE ACCTRA SET ACCCOLCOD = :L_ACCCOLPES
             WHERE ACCCOLCOD = :L_COLPESCOD;
 
            EXEC SQL
            UPDATE ACCCOL SET COLEST    = 'PD'
             WHERE ACCCOLCOD = :L_COLPESCOD;
 
         END;
      END;
 
END;(*SEGMENT*)
EXIT;
 
INCLUDE-CAN-INCIDENCIA:
                     L_TEXTO = ' ';
                     DBG2
                       'L_CANMOV antes de actualizar en CAN-INCIDENCIA ' +
                       $STR(L_CANMOV);
                     IF L_INCIDEN[1] = '1' THEN BEGIN
                        L_CANTIDAD1 = L_STOCK_INSU + L_CANMOV; (* 25-08-04 *)
                        DBG2
                          'CANTIDAD1 despues de Stock Insuf.' +
                          $STR(L_CANTIDAD1);
                     END;
                     IF L_INCIDEN[2] = '1' THEN BEGIN
                        IF L_INCIDEN[1] = '0' THEN BEGIN
                           (* Si no hay incidencia de stock insuficiente *)
                           (* calculamos el stock de la ubicacion, para  *)
                           (* saber lo que se puede servir.              *)
                           EXEC SQL
                           SELECT SUM(CNTNDO.CANUNI)
                             INTO :L_CANUBIPICK
                             FROM ALMUBI, CNTNDO, ACCTRA
                            WHERE ACCTRA.ACCCOD = :L_ACCCOD1
                              AND ALMUBI.ALMUBICOD = ACCTRA.UBIORICOD
                              AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
                              AND CNTNDO.ARTCOD    = ACCTRA.ARTCOD;
                           L_CANUBIPICK = $NVL(L_CANUBIPICK,0);
                           DBG2
                              'Stock en ubicacion: ' + $STR(L_CANUBIPICK);
                        END;
                        ELSE BEGIN
                           (* Si hay incidencia se considera el stock *)
                           (* insuficiente como el stock de la ubic.  *)
                           L_CANUBIPICK = L_CANTIDAD1;
                           DBG2
                             'Cantidad Stock ins. ' + $STR(L_CANUBIPICK);
                        END;
                        (* Si eliminando las unidades rotas, no hay stock *)
                        (* suficiente, se toma todo el stock. Si hubiera  *)
                        (* suficiente se le suma a la cantidad solicitada *)
                        (* las unidades rotas.                            *)
                        (* Esto se hace porque cuando se muestra la accion*)
                        (* siempre se resta las unidades rotas.           *)
                        DBG2
                          'CANTIDAD1 ' + $STR(L_CANTIDAD1);
                        DBG2
                          'CANUBIPICK ' + $STR(L_CANUBIPICK);
                        DBG2
                          'ROTO ' + $STR(L_ROTO);
                        IF L_CANTIDAD1 > (L_CANUBIPICK - L_ROTO) THEN
                           L_CANTIDAD1 = L_CANUBIPICK - L_ROTO;
                        DBG2
                          'CANTIDAD1 despues de Uds. Rotas ' +
                          $STR(L_CANTIDAD1);
                     END; (* IF L_INCIDEN[2] = '1' *)
EXIT;





















LOGIC-TRA-PIC-003:NOWARN;
(* Release Label (2) *)
PARM P_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
PARM P_COLSIGCOD LIKE(NAME=COLSIGCOD);
PARM P_ACCCOD LIKE(NAME=ACCCOD);
PARM P_CANTIDAD LIKE(NAME=CAN);
PARM L_ACCCODNEW LIKE(NAME=ACCCOD);
PARM P_UBIORICOD LIKE(NAME=ALMUBICOD);
PARM P_NO_RESTA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET TITLE("Trabajo de Picking: Crea acciones de Segunda vuelta");
DCL L_ARTCOD LIKE(NAME=ARTCOD);
DCL L_ARTREF LIKE(NAME=ARTREF);
DCL L_CAN LIKE(NAME=CAN);
DCL L_CANMOV LIKE(NAME=CANMOV);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=600,SUBTYPE=ALPHA);
DCL L_EXISTE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_EXPORDCOD LIKE(NAME=EXPORDCOD);
DCL L_EXPORDLIN LIKE(NAME=EXPORDLIN);
DCL L_EXPORDREF LIKE(NAME=EXPORDREF);
DCL L_HAY_ACC FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_TIPRUT LIKE(NAME=TIPRUT);
(****************************************************************************)
(* Titulo: Trabajo de Preparacion: Crea acciones de segunda vuelta          *)
(* Asunto: ADAIA V2 Primera Version                                         *)
(* Creado: Ana Armijo 18/03/1999                                            *)
(* Modif :                                                                  *)
(* Descripcion                                                              *)
(*    Este programa crea una accion en una cola de segunda vuelta, y en su  *)
(*    caso crea tambien la cola.                                            *)
(****************************************************************************)
(* Fecha.................: 9/02/2001                                        *)
(* Programador...........: PAM                                              *)
(* Proyecto o incidencia.: V2pd Cambio dinamico de Ubicacion de Picking     *)
(*                              y ReposiciÆn MÇltiple                       *)
(* Descripcion...........: Si viene por parÄmetro L_UBIORICOD una ubicaciÆn *)
(*                          se pone esa ubicaciÆn en la nueva acciÆn        *)
(****************************************************************************)
(* Fecha.................: 31/07/2001                                       *)
(* Programador...........: PAM                                              *)
(* Proyecto o incidencia.: ALICP1 Alicer Porcelanosa                        *)
(* Descripcion...........: Se a·ade el parÄmetro P_NO_RESTA, que si esta a 1*)
(*                          permite crear una acciÆn en la cola P_COLSIGCOD *)
(*                          aunque ya existiera una anteriormente para esa  *)
(*                          expedicion y linea                              *)
(****************************************************************************)
(* Fecha.................: 8/08/2001                                        *)
(* Programador...........: AP                                               *)
(* Proyecto o incidencia.: V2pd Cambio dinamico de Ubicacion de Picking     *)
(*                              y ReposiciÆn MÇltiple                       *)
(* Descripcion...........: Se accede a GAC-RUT-002 para obtener el orden de *)
(*                          la ruta de picking.                             *)
(****************************************************************************)
(* Fecha.................: 22/08/2001                                       *)
(* Programador...........: EV                                               *)
(* Proyecto o incidencia.: ALICP1 Alicer Porcelanosa                        *)
(* Descripcion...........:  Auque  el parÄmetro P_NO_RESTA estÅ a 1, no se  *)
(*                          permite crear mas de 2 acciones en  P_COLSIGCOD *)
(*                          para esa expedicion y linea de expedicion.      *)
(****************************************************************************)
(* Fecha.................: 15/11/2001                                       *)
(* Programador...........: PAM                                              *)
(* Proyecto o incidencia.: Mejora.                                          *)
(* Descripcion...........:  Se va a permitir crear mas de dos acciones para *)
(*                          el mismo pedido y linea puesto que esta         *)
(*                          limitacion ya no hace falta ya que el problema  *)
(*                          de que se sirva de mas estaba en el RFL-PIC-001 *)
(*                          al analizarse dos veces una accion de Picking   *)
(*                          habiendo Cambio dinamico de Ubicacion de Picking*)
(****************************************************************************)
(* Fecha.................: 23/09/2003                                       *)
(* Programador...........: RS                                               *)
(* Proyecto o incidencia.: Mejora.                                          *)
(* Descripcion...........: Se pone el NUMCNT de la cola de segunda vuelta a *)
(*    1 para que no de problemas con el picking multipedido. No puedo hacer *)
(*    la estimacion ya que las acciones no se a·aden a la cola todas a la   *)
(*    vez.                                                                  *)
(****************************************************************************)
(* Fecha.................: 24/11/2006                                       *)
(* Programador...........: EMA                                              *)
(* Proyecto o incidencia.: Mejora.                                          *)
(* Descripcion...........: Comento la lÕnea del CREATE ACCTRA donde pone    *)
(*    ACCRELCOD a 0, antes lo habÕa puesto a -1                             *)
(****************************************************************************)
(* Fecha.................: 04/01/2007                                       *)
(* Programador...........: JLM                                              *)
(* Proyecto o incidencia.: IVN 10155                                        *)
(* Descripcion...........: Se tendra en cuenta que pueda existir una accion *)
(*    diferente en primera vuelta de la misma linea de expedicion por el    *)
(*    picking caotico, y se tendra que sumar la cantidad si ya existe.      *)
(****************************************************************************)
(* Fecha.................: 03/10/2008                                       *)
(* Programador...........: RS                                               *)
(* Proyecto o incidencia.: Incidencia durante el analisis de LAC08.         *)
(* Descripcion...........: En la incidencia 10155 no estaba teniendo en     *)
(*    cuenta el estado de las acciones. No hay que tener en cuenta las CO.  *)
(****************************************************************************)
(* Fecha.................: 15/09/2009                                       *)
(* Programador...........: FM                                               *)
(* Proyecto o incidencia.: GCO i23013                                       *)
(* Descripcion...........: Si la accion de segunda vuelta se genero al eva- *)
(*    luar la segunda accion hay que devolver esta informacion para que se  *)
(*    borre la accion si el operario da fin de viaje                        *)
(****************************************************************************)
 
DBG1
   'INICIO PROGRAMA ----------------------------';
 
DBG1
   'P_ACCCOLCOD ' + $STR(P_ACCCOLCOD);
DBG1
   'P_COLSIGCOD ' + $STR(P_COLSIGCOD);
DBG1
   'P_ACCCOD ' + $STR(P_ACCCOD);
DBG1
   'P_CANTIDAD ' + $STR(P_CANTIDAD);
DBG1
   'P_UBIORICOD ' + $STR(P_UBIORICOD);
DBG1
   'P_NO_RESTA ' + $STR(P_NO_RESTA);
 
 
L_ACCCODNEW = 0;
 
(*Variables locales *)
L_HAY_ACC   = 0; (*Variable de conrol usada para el acceso a ACCTRA           *)
L_ARTCOD    = 0;
L_ARTREF    = '';
L_CAN       = 0;
L_CANMOV    = 0;
L_EXPORDCOD = 0;
L_EXPORDREF = '';
L_EXPORDLIN = 0;
 
(* Extraemos los datos de la acciÆn *)
EXEC SQL
SELECT ACCTRA.ARTCOD, ACCTRA.CAN, ACCTRA.CANMOV, EXPORDCOD, EXPORDLIN
  INTO :L_ARTCOD, :L_CAN, :L_CANMOV, :L_EXPORDCOD, :L_EXPORDLIN
  FROM ACCTRA
 WHERE ACCTRA.ACCCOD = :P_ACCCOD;
 
DBG4
   'L_CAN ' + $STR(L_CAN);
 
(* Extraemos la referencia del artÕculo *)
L_ARTREF = ' ';
EXEC SQL
SELECT ARTREF
  INTO :L_ARTREF
  FROM ART
 WHERE ARTCOD = :L_ARTCOD;
 
(* Extraemos la referencia de la expediciÆn *)
L_EXPORDREF = ' ';
EXEC SQL
SELECT EXPORDREF
  INTO :L_EXPORDREF
  FROM EXPORDCAB
 WHERE EXPORDCOD = :L_EXPORDCOD;
 
(* JLM, 04/01/2007 INV *)
 
(* Buscamos una acciÆn de la cola de primera vuelta  *)
(* para la misma lÕnea de expedicion                 *)
 
IF P_COLSIGCOD THEN BEGIN
   L_HAY_ACC = 0;
   L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(P_ACCCOLCOD) +
              "   AND ACCCOD <> " + $STR(P_ACCCOD) +
              "   AND EXPORDCOD = " + $STR(L_EXPORDCOD) +
              "   AND EXPORDLIN = " + $STR(L_EXPORDLIN) +
              "   AND    ACCEST <> 'CO'";
   SELECT * FROM ACCTRA  SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
   FOR ACCTRA SELECTED DO BEGIN
      DBG4
         'Actualiza ACCCOD ' + $STR(ACCCOD);
      L_HAY_ACC = 1;
      IF NOT P_NO_RESTA THEN BEGIN
         CAN = L_CAN - P_CANTIDAD;
      END;
   END;
END;
 
(* Fin JLM 04/01/2007 INV *)
 
IF NOT L_HAY_ACC THEN BEGIN
 
   (* Buscamos una acciÆn de la cola para la misma lÕnea de expediciÆn *)
   L_HAY_ACC = 0;
   L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(P_COLSIGCOD) +
              "   AND EXPORDCOD = " + $STR(L_EXPORDCOD) +
              "   AND EXPORDLIN = " + $STR(L_EXPORDLIN) +
              "   AND    ACCEST <> 'CO'";
   SELECT * FROM ACCTRA  SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
   FOR ACCTRA SELECTED DO BEGIN
      L_HAY_ACC = 1;
(* FM 15/09/2009: i23013 *)
      L_ACCCODNEW = ACCCOD;
      IF NOT P_NO_RESTA AND P_CANTIDAD = 0 THEN BEGIN
         CAN = L_CAN - P_CANTIDAD;
      END;
   END;
END;
 
IF NOT L_HAY_ACC OR P_NO_RESTA THEN BEGIN
   IF NOT ACCCOL.<ACCCOLCOD:P_COLSIGCOD> THEN BEGIN
      FOR ACCCOL<ACCCOLCOD:P_ACCCOLCOD> DO BEGIN
         CREATE ACCCOL WITH
            ACCCOLCOD = P_COLSIGCOD,
            COLEST    = 'GE',
            COLPRI    = COLPRI,
            COLTIP    = COLTIP,
            COLPIC    = COLPIC,
            ZONCARCOD = ZONCARCOD,
            ZONPRECOD = ZONPRECOD,
            ZONCOLCOD = ZONCOLCOD,
            EXPORDCOD = EXPORDCOD,
            MOMINI    = MOMINI,
            MOVHORPOS = MOVHORPOS,
            MOVHOR    = MOVHOR,
            MOVVER    = MOVVER,
            ANCOPE    = ANCOPE,
            RECOPECOD = RECOPECOD,
            RECMAQCOD = RECMAQCOD,
            RFTTERCOD = RFTTERCOD,
            CAJCNT    = CAJCNT,
            VARIOSCNT = VARIOSCNT,
            COLSIGCOD = 0;
            NUMCNT    = 1;
      END;   (* FOR  ACCCOL *)
   END; (* IF NOT ACCCOL *)
 
   FOR ACCTRA<ACCCOD:P_ACCCOD> DO BEGIN
      LOGIC-LIB-CNT-001 USING 'CACC', L_ACCCODNEW MODIFY;
 
      IF NOT P_UBIORICOD THEN
         P_UBIORICOD = ACCTRA.UBIORICOD;
 
      DBG4 'Crea accion de segunda vuelta';
      CREATE ACCTRA WITH
         ACCCOD     = L_ACCCODNEW,
         ACCCOLCOD  = P_COLSIGCOD,
         ACCRELCOD  = -1,
         ARTCOD     = ARTCOD,
         ACCEST     = 'PD',
         ACCTIPTAR  = ACCTIPTAR,
         ACCRELCOD  = 0,         (* ?? *)
         ACCORD     = ACCORD,
         ACCORDREC  = ACCORDREC, (* Para la apilabilidad no serÕa igual *)
         UBIORICOD  = P_UBIORICOD,
         CNTCOD     = CNTCOD,
         NDOCOD     = NDOCOD,
         UBIDESCOD  = UBIDESCOD,
         CNTDESCOD  = CNTDESCOD,
         CAN        = L_CAN - P_CANTIDAD,
         EXPORDCOD  = EXPORDCOD,
         EXPORDLIN  = EXPORDLIN,
         ACCORD     = ACCORD,
         MOMCRE     = $NOW,
         MOMINI     = MOMINI;
 
   END;
   EXEC SQL
   SELECT ALMZONCOL.TIPRUT
     INTO :L_TIPRUT
     FROM ACCCOL, ALMZONCOL
    WHERE    ACCCOL.ACCCOLCOD = :P_COLSIGCOD
      AND ALMZONCOL.ZONCOLCOD = ACCCOL.ZONCOLCOD;
 
   LOGIC-GAC-RUT-002 USING L_ACCCODNEW, L_TIPRUT;
 
END;
 
DBG1
   'L_ACCCODNEW ' + $STR(L_ACCCODNEW);
DBG1
   'FIN PROGRAMA -------------------------------';
EXIT;











SCREEN-RFT-PIC-010-P:NOWARN;
(* Substituted by RFT-PIC-010-PPO5 *)
(* Release Label (5) *)
PARM P_ARTCOD LIKE(NAME=ARTCOD);
PARM P_DIAMINCADEXP LIKE(NAME=DIAMINCADEXP);
PARM P_ALMCOD LIKE(NAME=ALMCOD);
PARM P_UBIORICOD LIKE(NAME=UBIORICOD);
PARM P_CAMBIA-FORM FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
PARM P_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_EXPORDCOD LIKE(NAME=EXPORDCOD);
PARM P_TERCOD LIKE(NAME=TERCOD);
PARM P_BOBINA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_CANACC LIKE(NAME=CAN);
PARM P_DIAMAXCADEXP LIKE(NAME=DIAMINCADEXP);
SET TITLE("Seleccion ubicacion donde hacer picking de articulo");
SET ARITHMETIC(DIV0=ZERO);
SET SCREEN-ENTRY(CONFIRM=NO,MANUAL=NO);
SET WINDOW(ROW=2,COL=0,HEIGHT=15,WIDTH=22,LINE=SINGLE,FORE=BLACK,BACK=MAGENTA,
           COORDROW=UP,COORDCOL=LEFT);
SET WINDOW(ROW=2,COL=0,HEIGHT=15,WIDTH=22,LINE=SINGLE,FORE=BLACK,BACK=MAGENTA,
           COORDROW=UP,COORDCOL=LEFT);
DCL I FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_ALMUBIALI1 FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL L_ALMUBIALI2 FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL L_ALMUBIALI3 FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL L_ALMUBIALI4 FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL L_ALMUBIALI5 FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL L_ALMUBIALI6 FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCL L_ALMUBICOD1 LIKE(NAME=ALMUBICOD);
DCL L_ALMUBICOD2 LIKE(NAME=ALMUBICOD);
DCL L_ALMUBICOD3 LIKE(NAME=ALMUBICOD);
DCL L_ALMUBICOD4 LIKE(NAME=ALMUBICOD);
DCL L_ALMUBICOD5 LIKE(NAME=ALMUBICOD);
DCL L_ALMUBICOD6 LIKE(NAME=ALMUBICOD);
DCL L_ALMUBICOD_1 LIKE(NAME=ALMUBICOD);
DCL L_ARTDES LIKE(NAME=ARTDES);
DCL L_ARTLOT LIKE(NAME=ARTLOT);
DCL L_ARTLOT2 FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
DCL L_ARTLOTCTR LIKE(NAME=ARTLOTCTR);
DCL L_ARTPRICOD LIKE(NAME=ARTPRICOD);
DCL L_ARTPROCTR LIKE(NAME=ARTPROCTR);
DCL L_ARTREF LIKE(NAME=ARTREF);
DCL L_ASG FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ASGRES LIKE(NAME=ASGRES);
DCL L_ASGRESOEX LIKE(NAME=ASGRESOEX);
DCL L_AVISO FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_BARRAS FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=1500,SUBTYPE=ALPHA);
DCL L_CNTCOD LIKE(NAME=CNTCOD);
DCL L_ESTA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HOY FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_OFFSET FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_OK FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_OPC FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC);
DCL L_RESERVADO1 FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_RESERVADO2 FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_RESERVADO3 FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_RESERVADO4 FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_RESERVADO5 FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_RESERVADO6 FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_TERPROCOD LIKE(NAME=TERPROCOD);
DCLHUGE L_ALMUBIALI(1000) FORMAT(TYPE=CHAR,LENGTH=16,SUBTYPE=ALPHA);
DCLHUGE L_ALMUBICOD(1000) FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC);
FNCKEY "Anterior" KEY(NUM=3) DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY     = 3;
 
#INCLUDE-RFT-PIC-010-P
 
IF L_OFFSET >= 6 THEN BEGIN
 
   L_OFFSET     = L_OFFSET - 6;
   L_ALMUBICOD1 = L_ALMUBICOD(L_OFFSET + 1);
   L_ALMUBIALI1 = L_ALMUBIALI(L_OFFSET + 1);
   L_ALMUBICOD2 = L_ALMUBICOD(L_OFFSET + 2);
   L_ALMUBIALI2 = L_ALMUBIALI(L_OFFSET + 2);
   L_ALMUBICOD3 = L_ALMUBICOD(L_OFFSET + 3);
   L_ALMUBIALI3 = L_ALMUBIALI(L_OFFSET + 3);
   L_ALMUBICOD4 = L_ALMUBICOD(L_OFFSET + 4);
   L_ALMUBIALI4 = L_ALMUBIALI(L_OFFSET + 4);
   L_ALMUBICOD5 = L_ALMUBICOD(L_OFFSET + 5);
   L_ALMUBIALI5 = L_ALMUBIALI(L_OFFSET + 5);
   L_ALMUBICOD6 = L_ALMUBICOD(L_OFFSET + 6);
   L_ALMUBIALI6 = L_ALMUBIALI(L_OFFSET + 6);
 
END;
ELSE BEGIN
   L_AVISO = "Primera Pagina";
   ERR L_AVISO;
END;
   END;
FNCKEY "Siguiente" KEY(NUM=4) DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY     = 4;
 
#INCLUDE-RFT-PIC-010-P
 
IF L_OFFSET + 6 < I THEN BEGIN
 
   L_OFFSET     = L_OFFSET + 6;
   L_ALMUBICOD1 = L_ALMUBICOD(L_OFFSET + 1);
   L_ALMUBIALI1 = L_ALMUBIALI(L_OFFSET + 1);
   L_ALMUBICOD2 = L_ALMUBICOD(L_OFFSET + 2);
   L_ALMUBIALI2 = L_ALMUBIALI(L_OFFSET + 2);
   L_ALMUBICOD3 = L_ALMUBICOD(L_OFFSET + 3);
   L_ALMUBIALI3 = L_ALMUBIALI(L_OFFSET + 3);
   L_ALMUBICOD4 = L_ALMUBICOD(L_OFFSET + 4);
   L_ALMUBIALI4 = L_ALMUBIALI(L_OFFSET + 4);
   L_ALMUBICOD5 = L_ALMUBICOD(L_OFFSET + 5);
   L_ALMUBIALI5 = L_ALMUBIALI(L_OFFSET + 5);
   L_ALMUBICOD6 = L_ALMUBICOD(L_OFFSET + 6);
   L_ALMUBIALI6 = L_ALMUBIALI(L_OFFSET + 6);
 
END;
ELSE BEGIN
   L_AVISO = "Ultima Pagina";
   ERR L_AVISO;
END;
   END;
PRINT "Seleccion Ubicacion" CURSOR(ROW=1,COL=3),
      "Art:" CURSOR(ROW=2,COL=1),
      "Ubicaciones:" CURSOR(ROW=4,COL=1),
      "1." CURSOR(ROW=5,COL=1),
      "2." CURSOR(ROW=6,COL=1),
      "3." CURSOR(ROW=7,COL=1),
      "4." CURSOR(ROW=8,COL=1),
      "5." CURSOR(ROW=9,COL=1),
      "6." CURSOR(ROW=10,COL=1),
      "F3:Pag Ant  F4:Pag Sig" CURSOR(ROW=13,COL=1),
      "F7:Aceptar  F8:Salir" CURSOR(ROW=14,COL=1);
(****************************************************************************)
(* Titulo: Muestra las ubicaciones con caducidad aceptable del articulo     *)
(* Asunto: ADAIA V2 V2??                                                    *)
(* Creado: PAM 18/03/2003                                                   *)
(* Descripcion                                                              *)
(*    Este proceso permite ver las distintas ubicaciones que cumplen con la *)
(*    restriccion de caducidad                                              *)
(*--------------------------------------------------------------------------*)
(* Historia:                                                                *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 26/06/2003                                     *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: V2cdpk Control de caducidad en picking.        *)
(*    Descripcion          : Incidencia RYC 4903.                           *)
(*       Al mostrar las ubicaciones donde hay stock del articulo de         *)
(*       criterio de rotaciÆn aceptable se ordena igual que en el programa  *)
(*       UBC-ALM-001 si el destino es picking:                              *)
(*           ORDER BY CRIROT, LLENOS(ALMUBI.ESTCOD), CNTCOM,                *)
(*           DISTANCIA_PICREF(ALMUBI.ALMCOD, ALMUBI.ALMUBICOD, X0.ARTCOD)   *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 10/09/2003                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: Incidencia RYC.                                *)
(*    Descripcion          : Se sustituye X0.ARTCOD POR ART.ARTCOD, ya que  *)
(*       X0 es el fichero ALMPRV y no tiene ARTCOD y da error.              *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 20/01/2004                                     *)
(*    Programador          : EMA                                            *)
(*    Proyecto o incidencia: Incidencia Campomos - 7952                     *)
(*    Descripcion          : Despues de coger la ubicacion seleccionada,    *)
(*       cambiamos tambiÅn el artÕculo, por si en la ubicacion hubiera otro *)
(*       distinto al que se le pasÆ inicialmente, pueden ser formatos.      *)
(*       Al no hacerse asÕ al volver al picking para preparar la accion da  *)
(*       Err: Stock Insuficiente.                                           *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 30/05/2005                                     *)
(*    Programador          : LR                                             *)
(*    Proyecto o incidencia: Incidencia Sandoval - 8064                     *)
(*    Descripcion          : Se aumenta el tama·o del array L_ALMUIALI y    *)
(*                           L_ALMUBICOD DE 100 a 1000.                     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 12/06/2006                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: WAT07                                          *)
(*    Descripcion          : Incluir en los contenedores a mostrar, los que *)
(*                           estan reservados para el tercero o para la     *)
(*                           orden de expedicion -CNTNDO.ASGRES y           *)
(*                           CNTNDO.ASGRESOEX-, y que no tengan ya acciones *)
(*                           generadas -CNTNDO.NDOSIT = OK-                 *)
(*                           A la hora de ordenar los cnts. seleccionados,  *)
(*                           mostrar primero los que estan  reservados para *)
(*                           tercero u oex, saltando criterio de rotacion.  *)
(*                           En la pantalla se mostrara la marca asterisco  *)
(*                           al lado de las ubicaciones con contenedores    *)
(*                           reservados para la orden o para el tercero.    *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 29/06/2006                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: WAT07                                          *)
(*    Descripcion          : Para los contenedores reservados para el       *)
(*                           tercero o la orden, no hay que tener en cuenta *)
(*                           si la caducidad es aceptable o no. No hay que  *)
(*                           tener en cuenta nada mas que estÅ reservado.   *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 11/07/2006                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: WAT07                                          *)
(*    Descripcion          : Al selecionar los contenedores en altura reser-*)
(*                           vados para el tercero o para la orden, no hay  *)
(*                           que tener en cuenta los  dias minimos para     *)
(*                           expedir para ese tercero, pero SI hay que tener*)
(*                           en cuenta que la mercancia no este caducada.   *)
(*                           Se a·ade el control de que la mercancia reser- *)
(*                           vada no este caducada.                         *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 06/09/2006                                     *)
(*    Programador          : JLM                                            *)
(*    Proyecto o incidencia: V2BOB                                          *)
(*    Descripcion          : Si es bobina se controla que la cantidad de    *)
(*       las ubicaciones sea mayor o igual que la de la accion.             *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 15/09/2006                                     *)
(*    Programador          : JLM                                            *)
(*    Proyecto o incidencia: V2BOB                                          *)
(*    Descripcion          : Si es bobina solo muestra la primera ubicacion.*)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 19/10/2006                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: Inc9708                                        *)
(*    Descripcion          : Si el contenedor es multireferencia estÄ devol-*)
(*       viendo un articulo cualquiera.                                     *)
(*       Si el articulo esta en el contenedor devolvemos el articulo, si no *)
(*       uno de sus formatos.                                               *)
(*       A·ado la gestion por lote.                                         *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 23/11/2006                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: WAT08                                          *)
(*    Descripcion          : Se contempla como disponible los contenidos    *)
(*       con NDOSIT=NPIC excepto para el caso de la REPOSICION.             *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 22/12/2006                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: KAM17                                          *)
(*    Descripcion          : Se recibe en posicion 11 el nuevo parametro    *)
(*        DIAMAXCADEXP. Se modifican los L_CLAUSE de busqueda de mercancia  *)
(*        para que se tenga en cuenta este valor cuando es <> 0             *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 01/02/2007                                     *)
(*    Programador          : EV                                             *)
(*    Proyecto o incidencia: KAM17                                          *)
(*    Descripcion          : Se sustituyen todos los DBG2 por DBG2 y        *)
(*    las comillas dobles de los dbg por comillas simples.                  *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 17/04/2008                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: Inc. 16210 STY                                 *)
(*    Descripcion          : Se cambia en L_CLAUSE UBISIT = por             *)
(*      UBISIT || '' = para mejorar el rendimiento de las consultas.        *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 17/04/2008                                     *)
(*    Programador          : RS                                             *)
(*    Proyecto o incidencia: Incidencia 18048                               *)
(*    Descripcion          : El picking en altura solo se realiza sobre ubi-*)
(*       caciones de tipo RE. Se elimina la consulta de ubicaciones CM.     *)
(*--------------------------------------------------------------------------*)
(*    Fecha                : 28/01/2014                                     *)
(*    Programador          : US                                             *)
(*    Proyecto o incidencia: PPO05                                          *)
(*    Descripcion          : Se omite la opcion de que el operario elija la *)
(*       ubicacion de altura y se regresa la primera seleccionada.          *)
(****************************************************************************)
 
DBG2
   'P_BOBINA ' + $STR(P_BOBINA);
DBG2
   'P_CANACC ' + $STR(P_CANACC);
 
(* RS 19/10/2006 - Inc9708 *)
EXEC SQL
SELECT ARTREF, ARTDES, ARTPRICOD, ARTPROCTR, TERPROCOD, ARTLOTCTR, ARTLOT
  INTO :L_ARTREF, :L_ARTDES, :L_ARTPRICOD, :L_ARTPROCTR, :L_TERPROCOD,
       :L_ARTLOTCTR, :L_ARTLOT
  FROM ART
 WHERE ART.ARTCOD = :P_ARTCOD;
 
L_ARTLOT2 = ' ';
IF NOT $NULL(L_ARTLOT) THEN
   L_ARTLOT2 = L_ARTLOT;
 
L_OFFSET = 0;
I        = 0;
L_HOY    = $EDIT($DATE,'DD/MM/YYYY');
L_CLAUSE = " , CNTNDO, CNTDOR, ALMUBI, ART " ;
 
IF P_CAMBIA-FORM <> 'S' THEN
BEGIN
   L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
              " WHERE CNTNDO.ARTCOD = " + $STR(P_ARTCOD);
   IF P_BOBINA = 1 THEN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " AND CNTNDO.CANUNI >= " + $STR(P_CANACC);
END;
ELSE BEGIN
 
   L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
             " WHERE ART.ARTPRICOD = " + $STR(L_ARTPRICOD);
 
   IF L_ARTPROCTR = 'S' THEN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
              " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
 
   (* RS 19/10/2006 - Inc9708 *)
   IF L_ARTLOTCTR = 'S' THEN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
              " AND ART.ARTLOT = '" + $TRIM(L_ARTLOT2,RIGHT) + "'";
 
   IF P_BOBINA = 1 THEN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " AND CNTNDO.CANUNI >= " + $STR(P_CANACC);
END;
 
(*
   WAT07
   SE SELECCIONAN POR UN LADO LOS CONTENIDOS RESERVADOS SIN TENER EN CUENTA
   LA CADUCIDAD, Y POR OTRO LADO LOS NO RESERVADOS, TENIENDO EN CUENTA
   CADUCIDAD ACEPTABLE, SI ES EL CASO.
*)
(* WAT07 11-07-2006
   SE A¶ADE EL CONTROL DE QUE LOS CONTENIDOS RESERVADOS NO ESTEN CADUCADOS
*)
L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
           " AND CNTNDO.CNTEXTCOD = CNTDOR.CNTCOD " +
           " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
           " AND ALMUBI.ALMCOD = " + $STR(P_ALMCOD) +
           " AND ALMUBI.UBITIP IN ('CM','RE')" +
           " AND CNTNDO.ARTCOD = ART.ARTCOD " +
           " AND ALMUBI.ALMUBICOD = X0.ALMUBICOD " +
           " AND (NDOSIT = 'OK' OR NDOSIT = 'NPIC') " +
           " AND UBISIT || '' = 'OK' " +
           " AND UBIEST = 'LL' " +
           " AND EXPORDCOD + 0= 0 " +
           " AND " +
           " ( " +
              " ( " + "((" +$STR(P_TERCOD) + " <> 0 " +
                      " AND CNTNDO.ASGRES = " + $STR(P_TERCOD) + ")" +
                      " OR " + "(" + $STR(P_EXPORDCOD) + " <> 0 " +
                      " AND CNTNDO.ASGRESOEX = " + $STR(P_EXPORDCOD) + "))" +
                      " AND ((ART.ROTTIP = 'FC' AND " +
                      "  FECCAD > LTR_TO_DATE('" +  L_HOY +
                      "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC')" +
              " ) " + " OR " +
              " ( " + " ((ART.ROTTIP = 'FC' AND " +
                      "  FECCAD - " + $STR(P_DIAMINCADEXP) +
                      "  > LTR_TO_DATE('" +  L_HOY +
                      "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC')" +
 
(*WAT17 *)            " AND " +
                      " (( " + $STR(P_DIAMAXCADEXP) + " <> 0 " +
                      " AND ART.ROTTIP = 'FC' AND " +
                      "  FECCAD - " + $STR(P_DIAMAXCADEXP) +
                      "  <= LTR_TO_DATE('" +  L_HOY +
                      "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC'" +
(*FIN WAT17*)         " OR " + $STR(P_DIAMAXCADEXP) + " = 0) " +
 
                      " AND CNTNDO.ASGRES = 0 AND CNTNDO.ASGRESOEX = 0 " +
               ") " +
           " ) " +
           " ORDER BY ASGRES DESC, ASGRESOEX DESC," +           (*WAT07*)
                    " CRIROT, LLENOS(ALMUBI.ESTCOD), CNTCOM, " +
           " DISTANCIA_PICREF(ALMUBI.ALMCOD, ALMUBI.ALMUBICOD, ART.ARTCOD)";
 
DBG2 L_CLAUSE[1:600];
DBG2 L_CLAUSE[601:1200];
 
L_ASG = 0;
SELECT * FROM ALMPRV SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
FOR ALMPRV SELECTED DO BEGIN
 
   IF P_BOBINA = 1 AND I = 1 THEN
      BREAK;
   L_ALMUBICOD_1 = ALMUBICOD;
DBG_ANOTA 'L_ALMUBICOD_1 ' + $STR(L_ALMUBICOD_1);
   IF L_ALMUBICOD_1 <> 0 THEN BEGIN
      P_UBIORICOD = L_ALMUBICOD_1;
      RETURN;
   END;
   L_CNTCOD = 0;
   EXEC SQL
      SELECT CNTCOD
        INTO :L_CNTCOD
        FROM ALMUBI
       WHERE ALMUBICOD = :L_ALMUBICOD_1;
   EXEC SQL
      SELECT ASGRES, ASGRESOEX
        INTO :L_ASGRES, :L_ASGRESOEX
        FROM CNTNDO
       WHERE CNTEXTCOD = :L_CNTCOD;
 
   IF L_ASGRES = 0 AND L_ASGRESOEX = 0 AND L_ASG = 1 THEN
      BREAK;
 
   IF L_ASGRES <> 0 OR L_ASGRESOEX <> 0 THEN
      L_ASG = 1;
 
   I              = I + 1;
   L_ALMUBIALI(I) = ALMUBIALI;
   L_ALMUBICOD(I) = ALMUBICOD;
END;
 
L_ALMUBIALI1 = L_ALMUBIALI(L_OFFSET + 1);
L_ALMUBICOD1 = L_ALMUBICOD(L_OFFSET + 1);
L_ALMUBIALI2 = L_ALMUBIALI(L_OFFSET + 2);
L_ALMUBICOD2 = L_ALMUBICOD(L_OFFSET + 2);
L_ALMUBIALI3 = L_ALMUBIALI(L_OFFSET + 3);
L_ALMUBICOD3 = L_ALMUBICOD(L_OFFSET + 3);
L_ALMUBIALI4 = L_ALMUBIALI(L_OFFSET + 4);
L_ALMUBICOD4 = L_ALMUBICOD(L_OFFSET + 4);
L_ALMUBIALI5 = L_ALMUBIALI(L_OFFSET + 5);
L_ALMUBICOD5 = L_ALMUBICOD(L_OFFSET + 5);
L_ALMUBIALI6 = L_ALMUBIALI(L_OFFSET + 6);
L_ALMUBICOD6 = L_ALMUBICOD(L_OFFSET + 6);
 
(*WAT07*)
(*Inicializacion de la marca de cnt reservado para tercero o para oex*)
L_RESERVADO1 = ' ';
EXEC SQL
SELECT '*' INTO :L_RESERVADO1
  FROM ALMUBI,CNTNDO
 WHERE ALMUBI.ALMUBICOD = :L_ALMUBICOD1
   AND ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
   AND ((CNTNDO.ASGRES <> 0 AND CNTNDO.ASGRES = :P_TERCOD) OR
        (CNTNDO.ASGRESOEX <> 0 AND CNTNDO.ASGRESOEX = :P_EXPORDCOD));
L_RESERVADO2 = ' ';
EXEC SQL
SELECT '*' INTO :L_RESERVADO2
  FROM ALMUBI,CNTNDO
 WHERE ALMUBI.ALMUBICOD = :L_ALMUBICOD2
   AND ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
   AND ((CNTNDO.ASGRES <> 0 AND CNTNDO.ASGRES = :P_TERCOD) OR
        (CNTNDO.ASGRESOEX <> 0 AND CNTNDO.ASGRESOEX = :P_EXPORDCOD));
L_RESERVADO3 = ' ';
EXEC SQL
SELECT '*' INTO :L_RESERVADO3
  FROM ALMUBI,CNTNDO
 WHERE ALMUBI.ALMUBICOD = :L_ALMUBICOD3
   AND ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
   AND ((CNTNDO.ASGRES <> 0 AND CNTNDO.ASGRES = :P_TERCOD) OR
        (CNTNDO.ASGRESOEX <> 0 AND CNTNDO.ASGRESOEX = :P_EXPORDCOD));
L_RESERVADO4 = ' ';
EXEC SQL
SELECT '*' INTO :L_RESERVADO4
  FROM ALMUBI,CNTNDO
 WHERE ALMUBI.ALMUBICOD = :L_ALMUBICOD4
   AND ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
   AND ((CNTNDO.ASGRES <> 0 AND CNTNDO.ASGRES = :P_TERCOD) OR
        (CNTNDO.ASGRESOEX <> 0 AND CNTNDO.ASGRESOEX = :P_EXPORDCOD));
L_RESERVADO5 = ' ';
EXEC SQL
SELECT '*' INTO :L_RESERVADO5
  FROM ALMUBI,CNTNDO
 WHERE ALMUBI.ALMUBICOD = :L_ALMUBICOD5
   AND ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
   AND ((CNTNDO.ASGRES <> 0 AND CNTNDO.ASGRES = :P_TERCOD) OR
        (CNTNDO.ASGRESOEX <> 0 AND CNTNDO.ASGRESOEX = :P_EXPORDCOD));
L_RESERVADO6 = ' ';
EXEC SQL
SELECT '*' INTO :L_RESERVADO6
  FROM ALMUBI,CNTNDO
 WHERE ALMUBI.ALMUBICOD = :L_ALMUBICOD6
   AND ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
   AND ((CNTNDO.ASGRES <> 0 AND CNTNDO.ASGRES = :P_TERCOD) OR
        (CNTNDO.ASGRESOEX <> 0 AND CNTNDO.ASGRESOEX = :P_EXPORDCOD));
 
GV_RFSENTIDO = '>';
GV_RFKEY     = -1;
 
#INCLUDE-RFT-PIC-010-P
FIELD L_ARTREF PROMPT("") CURSOR(ROW=2,COL=5) NOLABEL NOSEQ 
   EDIT(LENGTH=16) DISPLAY;
FIELD L_ARTDES PROMPT("L_ARTDES        :") 
   CURSOR(ROW=3,COL=1) NOLABEL NOSEQ EDIT(LENGTH=22) DISPLAY;
FIELD L_AVISO PROMPT("L_AVISO         :") 
   CURSOR(ROW=12,COL=1) NOLABEL NOSEQ EDIT(LENGTH=22) DISPLAY;
FIELD L_BARRAS PROMPT("EAN13") CURSOR(ROW=15,COL=1) NOLABEL NOSEQ 
   EDIT(LENGTH=20);
FIELD L_ALMUBIALI1 PROMPT("") CURSOR(ROW=5,COL=3) NOLABEL NOSEQ 
   EDIT(LENGTH=16) DISPLAY;
FIELD L_ALMUBIALI2 PROMPT("") LEFT(3) NOLABEL NOSEQ 
   EDIT(LENGTH=16) DISPLAY;
FIELD L_ALMUBIALI3 PROMPT("") LEFT(3) NOLABEL NOSEQ 
   EDIT(LENGTH=16) DISPLAY;
FIELD L_ALMUBIALI4 PROMPT("") LEFT(3) NOLABEL NOSEQ 
   EDIT(LENGTH=16) DISPLAY;
FIELD L_ALMUBIALI5 PROMPT("") LEFT(3) NOLABEL NOSEQ 
   EDIT(LENGTH=16) DISPLAY;
FIELD L_ALMUBIALI6 PROMPT("") LEFT(3) NOLABEL NOSEQ 
   EDIT(LENGTH=16) DISPLAY;
FIELD L_RESERVADO1 PROMPT("") CURSOR(ROW=5,COL=19) NOLABEL NOSEQ NOENTRY 
   EDIT(LENGTH=1) DISPLAY;
FIELD L_RESERVADO2 PROMPT("") LEFT(19) NOLABEL NOSEQ NOENTRY 
   EDIT(LENGTH=1) DISPLAY;
FIELD L_RESERVADO3 PROMPT("") LEFT(19) NOLABEL NOSEQ NOENTRY 
   EDIT(LENGTH=1) DISPLAY;
FIELD L_RESERVADO4 PROMPT("") LEFT(19) NOLABEL NOSEQ NOENTRY 
   EDIT(LENGTH=1) DISPLAY;
FIELD L_RESERVADO5 PROMPT("") LEFT(19) NOLABEL NOSEQ NOENTRY 
   EDIT(LENGTH=1) DISPLAY;
FIELD L_RESERVADO6 PROMPT("") LEFT(19) NOLABEL NOSEQ NOENTRY 
   EDIT(LENGTH=1) DISPLAY;
AT ACCEPT DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY     = 0;
 
#INCLUDE-RFT-PIC-010-P
 
IF $NUM(L_BARRAS) < 1 OR $NUM(L_BARRAS) > 6 THEN BEGIN
 
   L_AVISO = "Error: Elija 1 a 6";
   ERR L_AVISO;
 
END;
ELSE BEGIN
 
   L_OPC = $NUM(L_BARRAS);
   IF L_ALMUBIALI(L_OFFSET + L_OPC) = ' ' THEN BEGIN
      L_AVISO = "Error:Elija ubicacion";
      ERR L_AVISO;
   END;
   ELSE BEGIN
      P_UBIORICOD = L_ALMUBICOD(L_OFFSET + L_OPC);
 
      (* RS 19/10/2006 - Inc9708 *)
      IF P_CAMBIA-FORM = 'S' THEN BEGIN
         (* Compruebo si el articulo estÄ en el contenedor *)
         L_ESTA = 0;
         EXEC SQL
         SELECT 1
           INTO :L_ESTA
           FROM ALMUBI, CNTNDO
          WHERE ALMUBI.ALMUBICOD = :P_UBIORICOD
            AND    ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
            AND    CNTNDO.ARTCOD = :P_ARTCOD;
 
         IF NOT L_ESTA THEN BEGIN
            IF L_ARTPROCTR <> 'S' AND L_ARTLOTCTR <> 'S' THEN
               EXEC SQL
               SELECT CNTNDO.ARTCOD
                 INTO :P_ARTCOD
                 FROM ALMUBI, CNTNDO, ART
                WHERE ALMUBI.ALMUBICOD = :P_UBIORICOD
                  AND    ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
                  AND    CNTNDO.ARTCOD = ART.ARTCOD
                  AND    ART.ARTPRICOD = :L_ARTPRICOD;
            ELSE IF L_ARTPROCTR = 'S' THEN
               EXEC SQL
               SELECT CNTNDO.ARTCOD
                 INTO :P_ARTCOD
                 FROM ALMUBI, CNTNDO, ART
                WHERE ALMUBI.ALMUBICOD = :P_UBIORICOD
                  AND    ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
                  AND    CNTNDO.ARTCOD = ART.ARTCOD
                  AND    ART.ARTPRICOD = :L_ARTPRICOD
                  AND    ART.TERPROCOD = :L_TERPROCOD;
 
            ELSE IF L_ARTLOTCTR = 'S' THEN
               EXEC SQL
               SELECT CNTNDO.ARTCOD
                 INTO :P_ARTCOD
                 FROM ALMUBI, CNTNDO, ART
                WHERE ALMUBI.ALMUBICOD = :P_UBIORICOD
                  AND    ALMUBI.CNTCOD = CNTNDO.CNTEXTCOD
                  AND    CNTNDO.ARTCOD = ART.ARTCOD
                  AND    ART.ARTPRICOD = :L_ARTPRICOD
                  AND       ART.ARTLOT = :L_ARTLOT2;
 
         END; (* IF NOT L_ESTA *)
      END; (* IF P_CAMBIA-FORM = 'S' *)
   END;
END;
END;
AT REJECT DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY     = 8;
P_UBIORICOD  = 0;
P_SALIR      = 1;
 
#INCLUDE-RFT-PIC-010-P
END;
EXIT;












INCLUDE-GES-PIC-001:
(*****************************************************************************)
(*    Fecha                : 27/06/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia  Freire 4808.                        *)
(*    Descripcion          : Llama a GAC-PIC-005 con nuevo parametro         *)
(*                           L_SEGUNDA.                                      *)
(*                           En el caso de 2ù vuelta se crean con la cantidad*)
(*                           que falta por prepara en vez de 0.              *)
(*****************************************************************************)
(*    Fecha                : 01/09/2004                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: MVM1.7                                          *)
(*    Descripcion          : Despues de realizar el movimiento se llamara a  *)
(*      un nuevo programa para incrementar el contador de accesos al hueco   *)
(*      de picking.                                                          *)
(*****************************************************************************)
(*    Fecha                : 31/01/2005                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: BGR01                                           *)
(*    Descripcion          : Se modifica para que despues del movimiento de  *)
(*     mercancia si el array de peso leido es distinto de 0 se cra contenido *)
(*     por cada peso y se elimina el contenido del total.                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/03/2006                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: 8865 MILER                                      *)
(*    Descripcion          : Debe mostarse el peso medio del contenido, no   *)
(*       el de la ficha del artÕculo.                                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 03/05/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: V2pesfij                                        *)
(*    DescripciÆn          : Grabar el peso en el contenido de los cnts.     *)
(*       cuando se trata de peso fijo -PESVAR = ' ','N'-                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 14/06/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: EST44.1 AVISO DE RETIRADA DE PALLET             *)
(*    Descripcion          : Cuando el stock minimo de picking esta a -1, no *)
(*       se genera reposicion.                                               *)
(*       Este desarrollo consiste en que cuando el stock de picking queda a  *)
(*       cero, y la zona de picking pertenece a la tabla general AVRP, se    *)
(*       mostrara al operario un aviso de retirada de pallet y se le permiti-*)
(*       ra pulsar F7:Confirmar retirarda, en cuyo caso se generara reposi-  *)
(*       cion, o F1: inventarirar, en cuyo caso se llamara al inventario.    *)
(*       Se ejecutara cuando GV_CLIENTE = estesa por peticion de RS en lugar *)
(*       de ponerlo privado.                                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 21/09/2006                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: V2BOB                                           *)
(*    DescripciÆn          : Si el articulo es bobina para saber el stock en *)
(*       picking, mirara todo los contenidos del hueco y no solo el NDOCOD.  *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/10/2006                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: V2BOB                                           *)
(*    DescripciÆn          : Si el articulo es bobina se actualiza el        *)
(*       CNTDORMAT del contenedor de inicio viaje por el que esta preparando.*)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 13/12/2006                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 9799 - Ahorramas Charcuteria         *)
(*    Descripcion          : Se pone privada la parte que se hizo para BGR01 *)
(*       ya que en las fusiones y en segunda vuelta se carga el contenido que*)
(*       se preparÆ en la primera vuelta.                                    *)
(*       No se hace distincion con el ORIMOV para el caso del peso, siempre  *)
(*       se hara con TRAS.                                                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 04/07/2007                                      *)
(*    Programador          : MLUZ                                            *)
(*    Proyecto o incidencia: V2CNTCRE                                        *)
(*    Descripcion          : Cambiar los creates CNTDOR por la macro CNT-CRE *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/10/2007                                      *)
(*    Programador          : YMA                                             *)
(*    Proyecto o incidencia: 15107 Montfrisa                                 *)
(*    Descripcion          : Cuando el peso no era medio y estaba activada   *)
(*        el GEST-CRIROT-PICK no se grababa el peso en los contenidos.       *)
(*--------------------------------------------------------------------------*)
(* Modif                 : 22/10/2007                                       *)
(* Programador           : MLUZ                                             *)
(* Proyecto o incidencia : V2CNTCRE                                         *)
(* Descripcion           : Modifico la llamada al CNT-CRE para mandar como  *)
(*                         parametro la referencia.                         *)
(*--------------------------------------------------------------------------*)
(* Modif                 : 11/06/2008                                       *)
(* Programador           : JLM                                              *)
(* Proyecto o incidencia : i18550 - TPR                                     *)
(* Descripcion           : Modifico el order by cuando es gestion picking   *)
(*   para que saque lo primero que llego al hueco de picking.               *)
(*--------------------------------------------------------------------------*)
(* Modif                 : 02/11/2011                                       *)
(* Programador           : ID                                               *)
(* Proyecto o incidencia : Incidencia 29848                                 *)
(* Descripcion           : Se modifica el calculo de peso para no perder    *)
(*                         precision, ya que provocaba que el dato en PES y *)
(*                         en PESSER fuese diferente.                       *)
(*--------------------------------------------------------------------------*)
(* Modif                 : 14/11/2011                                       *)
(* Programador           : RS                                               *)
(* Proyecto o incidencia : Incidencia 30413                                 *)
(* Descripcion           : Si se hace picking en altura y el contenedor se  *)
(*    vacia, debe salir de la ubicaciÆn.                                    *)
(*****************************************************************************)
 
DBG2
  'EN GES-PIC-001, CANMOV ' + $STR(L_CANMOV);
DBG2
  'L_LECTURAS ' + $STR(L_LECTURAS);
DBG2
  'J ' + $STR(J);
         (* !!! Si peso variable pedirlo aqui *)
         (* JPP 4/5/2000 se comprueba si el articulo es de peso variable y *)
         (*              se crea la accion de pesaje correspondiente       *)
         EXEC SQL
            SELECT PESVAR, ACCTRA.ARTCOD
              INTO :L_PESVAR, :L_ARTCOD
              FROM ACCTRA, ART
             WHERE ACCTRA.ACCCOD = :L_ACCCOD1
               AND ACCTRA.ARTCOD = ART.ARTCOD;
 
         (* RS: 05/08/2002 Si se trata de picking inverso y el parametro *)
         (* PEDIR-PESO-INV tiene el valor N, no se tratara el peso       *)
         IF (NOT L_PICINV OR L_PESO_INV <> 'N') AND NOT L_NO_HACER THEN BEGIN
 
           (* Se creara la cola de pesaje tanto si se pesa al final como *)
           (* durante la preparacion *)
           (* Si el peso es medio y hay gestion, en el picking inverso no*)
           (* se debe gestionar.                                         *)
            IF (L_PESVAR = 'F' OR L_PESVAR = 'P') OR
               (L_PESVAR = 'M' AND L_MOD-PESO-MEDIO = 'S' AND
                NOT L_PICINV) THEN BEGIN
 
               (* Si hubo incidencia de stock insuficiente en el picking o  *)
               (* de stock excesivo en el picking inverso y la cantidad es  *)
               (* cero, no se debe preguntar por el peso.                   *)
               (* EV:SE A¶ADE LA CONDICION DE NOT L_INCREPPANT, YA QUE SI   *)
               (* L_INCREPPANT VALE 1 SIGNIFICA QUE SE HA PULSADO STOCK     *)
               (* INSUFICIENTE EN SEGUNDA VUELTA Y ESTA ESPERANDO REPOSICION*)
               IF ( L_INCIDEN[1] = '0' OR L_CANTIDAD1)
                                  AND NOT L_INCREPPANT THEN BEGIN
 
                  DBG2
                     'Creo una accion de pesaje asociada a la cola ' +
                     $STR(L_ACCCOLCOD) + ' y accion ' +
                     $STR(L_ACCCOD1) + ' de picking';
 
 
                  (* L_LECTURAS es 2 cuando el parÄmetro DOBLE-LECTURA esta *)
                  (* activo y la accion tiene cajas y unidades. J es igual a*)
                  (* 2 cuando se esta realizando la segunda lectura corres- *)
                  (* pondiente a las unidades. Por eso no sera necesario    *)
                  (* crear otra accion de pesaje, basta con modificar la que*)
                  (* existe.                                                *)
                  IF L_LECTURAS <> 2 OR J <> 2 THEN BEGIN
                     DBG2
                        'Se crea accion de pesaje';
                     LOGIC-GAC-PIC-005 USING L_ACCCOLCOD,
                                             L_ACCCOD1,
                                             L_SEGUNDA;
                  END;
                  ELSE BEGIN
                     (* Modifico si hay accion de pesaje*)
                     L_ACCPESCOD = 0;
                     EXEC SQL
                        SELECT ACCTRA.ACCCOD
                          INTO :L_ACCPESCOD
                          FROM ACCCOL, ACCTRA
                         WHERE ACCCOL.ACCCOLCOD = :L_ACCCOLCOD AND
                               ACCTRA.ACCCOLCOD = ACCCOL.COLPESCOD AND
                                  ACCTRA.ARTCOD = :L_ARTCOD;
                     IF L_ACCPESCOD THEN
                        EXEC SQL
                           UPDATE ACCTRA SET CAN = :L_CANTIDAD1,
                                          CNTCOD = :L_CNTINTCOD,
                                          ACCEST = 'PD'
                            WHERE ACCCOD = :L_ACCPESCOD;
                  END;
               END;
               ELSE BEGIN
                  DBG2
                     'La cantidad en la incidencia era ' + $STR(L_CANTIDAD1);
               END;
            END;
 
            (* JPP 4/5/00 se pide el peso de la cantidad preparada *)
 
            (********************* PICKING INVERSO *************************)
            (* En el picking inverso, si el articulo es de peso variable,  *)
            (* independientemente de si es P o F tiene que pedirse el peso *)
            (* cada vez que deje algo en el hueco de picking, nunca al fi- *)
            (* nal del viaje, ya que entonces no se podria pesar nada, por *)
            (* estar todo ubicado.                                         *)
            (* Tampoco se debe gestionar el peso medio.                    *)
            DBG2
              'L_PESVAR ' + L_PESVAR;
            DBG2
              'L_PICINV ' + $STR(L_PICINV);
            DBG2
              'L_INCIDEN[1] ' + L_INCIDEN[1];
            DBG2
              'L_CANTIDAD1 ' + $STR(L_CANTIDAD1);
 
            IF (L_PESVAR = 'P' OR (L_PICINV AND L_PESVAR = 'F'))
               OR (L_PESVAR = 'M' AND L_MOD-PESO-MEDIO = 'S' AND
               NOT L_PICINV) THEN BEGIN
               (* EV:SE A¶ADE LA CONDICION DE NOT L_INCREPPANT, YA QUE SI   *)
               (* L_INCREPPANT VALE 1 SIGNIFICA QUE SE HA PULSADO STOCK     *)
               (* INSUFICIENTE EN SEGUNDA VUELTA Y ESTA ESPERANDO REPOSICION*)
               IF (L_INCIDEN[1] = '0' OR L_CANTIDAD1)
                                     AND NOT L_INCREPPANT THEN BEGIN
 
                  (* El tratamiento del peso se debe hacer con las cantidades *)
                  (* positivas, por ello en el picking inverso se multiplica  *)
                  (* por -1 la cantidad para pasarla a positivo.              *)
                  IF L_PICINV THEN
                     L_CANTIDAD1 = (-1) * L_CANTIDAD1;
 
                  DBG2
                     'Antes de la accion de pesaje, L_CANTIDAD1 ' +
                                                    $STR(L_CANTIDAD1);
                  DBG2
                     'Antes de la accion de pesaje, L_PES ' +
                                                    $STR(L_PES);
#INCLUDE-CTR-PES-001
 
                  DBG2
                     'Despues de accion de pesaje, L_CANTIDAD1 ' +
                                                   $STR(L_CANTIDAD1);
                  DBG2
                     'Despues de la accion de pesaje, L_PES ' +
                                                      $STR(L_PES);
 
                  (* Volvemos a dejar la cantidad negativa para seguir con el *)
                  (* proceso del picking inverso, despues de haber obtenido el*)
                  (* peso.                                                    *)
                  IF L_PICINV THEN
                     L_CANTIDAD1 = (-1) * L_CANTIDAD1;
               END; (* IF INCIDEN[1] = '0' *)
            END;(* IF L_PESVAR = 'P' *)
         END; (* IF NOT L_PICINV OR L_PESO_INV <> 'N' *)
         (******************************************************************)
 
         (************************ PICKING INVERSO **************************)
         (* Para el picking inverso no es necesario gestionar la incidencia *)
 
         IF (L_INCIDEN[1] = '1' OR L_INCIDEN[2] = '1') AND
            NOT L_PICINV THEN BEGIN
 
            DBG2
               'Gestion de la incidencia con accion ' + $STR(L_ACCCOD1);
               L_CANTIDADINCI = L_CANTIDAD1;
               IF L_LECTURAS = 2 THEN
                  L_CANTIDADINCI = L_CANTIDADAUX;
               ELSE IF L_INCIAUX = 2 THEN
                  L_CANTIDADINCI = L_CANTIDAD1 + L_CANMOV;
 
DBG_ANOTA 'Antes de PIC-INC L_UBIORIGEN ' + $STR(L_UBIORIGEN);
               LOGIC-PIC-INC-001 USING L_ACCCOD1,
                                       L_INCIDEN,
                                       L_CANTIDADINCI,
                                       L_SEGUNDA,
                                       L_STOCK_INSU,
                                       L_ROTO,
                                       0,
                                       0,
                                       L_AUTOREP,
                                       L_PES,
                                       L_NOSERVIR, (* 22432 *)
                                       L_UBIORIGEN;
            L_INCIDEN[1:2] = '00';
         END;
 
         (* SE PONE EL TRATAMIENTO DE LAS INCIDENCIAS DESPUES DEL PESO *)
         (* ADEMAS SE A¶ADE UN NUEVO PARAMETRO A PIC-INC-001 : L_PES   *)
 
 
         IF NOT L_INCREPPANT THEN BEGIN
            L_MOMINI = $NOW;
 
            DBG2
               'Cantidad a poner en la accion ' + $STR(L_CANTIDAD1);
 
            L_NDOCOD = 0; (*EV POR CASQUES EN LIB-MOV-003*)
            EXEC SQL
               SELECT NDOCOD INTO :L_NDOCOD
                 FROM CNTNDO,ALMUBI
                WHERE ALMUBI.ALMUBICOD = :L_UBIORI
                  AND CNTNDO.ARTCOD = :L_ARTCOD
                  AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD;
 
DBG2
  'L_NDOCOD ' + $STR(L_NDOCOD);
 
            (* RS 25/09/2002 V2gcrp - Gestion del criterio de rotacion en *)
            (* picking.                                                   *)
            IF L_PICINV AND L_GEST-CRIPICK = 'S' THEN BEGIN
               L_CRIROT = ' ';
               EXEC SQL
                  SELECT CRIROT INTO :L_CRIROT
                    FROM CNTNDO
                   WHERE CNTEXTCOD = :L_CNTCOD AND
                            ARTCOD = :L_ARTCOD;
               DBG2
                  'El contenedor' + ' ' + $STR(L_CNTCOD) + ' ' +
                  'con articulo' + ' ' + $STR(L_ARTCOD) + ' ' +
                  'tiene crirot' + ' ' + L_CRIROT;
               L_NDOCOD = 0;
               EXEC SQL
                  SELECT NDOCOD INTO :L_NDOCOD
                    FROM CNTNDO, ALMUBI
                   WHERE ALMUBI.ALMUBICOD = :L_UBIORI
                     AND CNTNDO.ARTCOD = :L_ARTCOD
                     AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
                     AND CNTNDO.CRIROT = :L_CRIROT;
 
               DBG2
                  'Ubicacion origen ' + $STR(L_UBIORI);
               DBG2
                  'Contenido en Picking a mover' + $STR(L_NDOCOD);
            END;
 
            IF L_PES = 0 AND (L_PESVAR = 'M' OR
                              L_PESVAR = ' ' OR L_PESVAR = 'N') THEN BEGIN
               (*V2pesfij:se a·ade OR L_PESVAR = ' ' OR L_PESVAR = N*)
               IF L_CANTIDAD1 THEN BEGIN
                  L_PESOUNI = 0;
 
                  (* RS 02/03/2006 - Incidencia 8865 *)
                  EXEC SQL
                  SELECT PES/CANUNI
                     INTO :L_PESOUNI
                     FROM CNTNDO
                    WHERE NDOCOD = :L_NDOCOD;
 
                  (* RS 22/09/2006 - Mejora a la incidencia 8865 *)
                  IF NOT L_PESOUNI THEN
                     EXEC SQL
                     SELECT PESUNI
                       INTO :L_PESOUNI
                       FROM ARTPRE
                      WHERE ARTCOD = :L_ARTCOD
                        AND UNITIP = 'UD';
 
                  L_PES = L_PESOUNI * L_CANTIDAD1;
               END;
            END;
 
           (*********************** PICKING INVERSO *************************)
           (* La ubicacion puede estar vacia y por tanto no tener contenedor*)
           (* ni contenido, y en el caso de estar asignada tiene contenedor *)
           (* pero no contenido.                                            *)
           (* Para poder mover la mercancia hay que tener contenedor y      *)
           (* y contenido en el destino, por tanto cuando se crea el cntdor *)
           (* hay que ubicarlo.                                             *)
 
   (* PAM   IF NOT L_NDOCOD  AND L_PICINV THEN BEGIN    PAM 11/11/2002 *)
            IF NOT L_NDOCOD  AND L_PICINV AND L_CANTIDAD1 <> 0 THEN BEGIN
               L_CNTCODAUX = 0;
               L_DIMCOD = ' ';
               L_REFERENCIA = ' ';
               EXEC SQL
                  SELECT DIMCOD, CNTCOD, ALMUBIREF
                    INTO :L_DIMCOD, :L_CNTCODAUX, :L_REFERENCIA
                    FROM ALMUBI, ALMPRV
                   WHERE ALMUBI.ALMUBICOD = :L_UBIORI AND
                         ALMPRV.ALMUBICOD = ALMUBI.ALMUBICOD;
 
               DBG2
                  'PI: Contenedor en ubicacion ' + $STR(L_CNTCODAUX);
 
               IF NOT L_CNTCODAUX THEN BEGIN
                  (* Creo un contenedor para poder mover la mercancia *)
                  EXEC SQL
                      SELECT CNTCOD INTO :L_CNTCODAUX
                        FROM CNTDOR
                       WHERE CNTDORREF = :L_REFERENCIA;
                  IF L_CNTCODAUX = 0 THEN BEGIN
                     CNT-CRE 0, L_REFERENCIA, L_CNTCODAUX MODIFY;
                     IF GV_ERR > 0 THEN ERR-CTR;
                     EXEC SQL
                     UPDATE CNTDOR SET MULREF = 'N',
                                       CNTTIP = 'PI',
                                       DIM    = :L_DIMCOD
                      WHERE CNTCOD = :L_CNTCODAUX;
 
                  END;
                  DBG2
                     'PI: Nuevo contenedor ' + $STR(L_CNTCODAUX);
                  DBG2
                     'PI: Voy a ubicarlo en ' + $STR(L_UBIORI);
 
                  LOGIC-LIB-MOV-001 USING L_CNTCODAUX,
                                          L_UBIORI,
                                          'ENTR',
                                          'ENTR',
                                          ' ',
                                          ' ',
                                          ' ',
                                          0,
                                          'ENOT';
                   DBG2
                      'PI: Cntdor creado en ubicacion ' + $STR(L_CNTCODAUX);
 
               END;
 
               (* Creo un contenido a 0 para poder mover la mercancia *)
               L_NDOCOD1 = 0;
               EXEC SQL
                  SELECT NDOCOD INTO :L_NDOCOD1
                    FROM ACCTRA
                   WHERE ACCCOD = :L_ACCCOD1;
 
               DBG2
                  'PI: Contenido de la accion ' + $STR(L_NDOCOD1);
 
               IF L_PESVAR = 'M' OR L_PESVAR = ' ' OR L_PESVAR = 'N' THEN BEGIN
                  (*V2pesfij:se a·ade OR L_PESVAR = ' ' OR L_PESVAR = N*)
                  IF L_CANTIDAD1 THEN BEGIN
                     L_PESOUNI = 0;
                     (* RS 02/03/2006 - Incidencia 8865 *)
                     EXEC SQL
                     SELECT PES/CANUNI
                        INTO :L_PESOUNI
                        FROM CNTNDO
                       WHERE CNTEXTCOD = :L_CNTINTCOD
                         AND    ARTCOD = :L_ARTCOD;
 
                     L_PES = L_PESOUNI * L_CANTIDAD1;
                  END;
               END;
 
 
               LOGIC-LIB-CNT-001 USING 'CNDO',
                                       L_NDOCOD MODIFY;
               FOR CNTNDO <NDOCOD:L_NDOCOD1> DO
                  CREATE CNTNDO WITH
                     CNTCOD    = L_CNTCODAUX,
                     CNTEXTCOD = L_CNTCODAUX,
                     NDOCOD    = L_NDOCOD,
                     ARTCOD    = CNTNDO.ARTCOD,
                     FECCAD    = CNTNDO.FECCAD,
                     CRIROT    = CNTNDO.CRIROT,
                     FECFAB    = CNTNDO.FECFAB,
                     MOMREC    = $NOW,
                     LOTE      = CNTNDO.LOTE,
                     NDOSIT    = 'OK',
                     UNITIP    = CNTNDO.UNITIP;
 
              DBG2
                 'PI: Contenido origen ' + $STR(L_NDOCOD);
            END; (* IF NOT L_NDOCOD AND L_PICINV AND L_CANTIDAD <> 0 *)
            (***************************************************************)
 
            (* RS 23/03/2004 Incidencia 6414 - Concurrencia *)
            L_CANNDOCOD = 0;
            IF L_NDOCOD THEN BEGIN
               LOGIC-LIB-ART-BOB USING L_ARTCOD
                                     , L_BOBINA MODIFY
               ;
               IF L_BOBINA = 1 THEN
               BEGIN
                  L_NDOCOD1 = 0;
                  EXEC SQL
                     SELECT NDOCOD INTO :L_NDOCOD1
                       FROM CNTNDO,ALMUBI
                      WHERE ALMUBI.ALMUBICOD = :L_UBIORI
                        AND CNTNDO.ARTCOD = :L_ARTCOD
                        AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
                        AND CNTNDO.CANUNI = :L_CANTIDAD1;
                  IF L_NDOCOD1 <> 0 THEN
                     L_NDOCOD = L_NDOCOD1;
                     DBG2
                       '2.L_NDOCOD ' + $STR(L_NDOCOD);
 
                  (* JLM, 26/10/2006 Actualizamos CNTDORMAT *)
 
                  L_CNTCODAUX = 0;
                  EXEC SQL
                     SELECT CNTEXTCOD
                       INTO :L_CNTCODAUX
                       FROM CNTNDO
                      WHERE NDOCOD = :L_NDOCOD;
 
                  DBG2
                    'L_CNTCODAUX = ' + $STR(L_CNTCODAUX);
 
                  L_CNTDORMAT = ' ';
                  EXEC SQL
                     SELECT CNTDORMAT
                       INTO :L_CNTDORMAT
                       FROM CNTDOR
                      WHERE CNTCOD = :L_CNTCODAUX;
 
                  IF $NULL(L_CNTDORMAT) THEN
                     L_CNTDORMAT = ' ';
 
                  DBG2
                    'L_CNTDORMAT ' + $STR(L_CNTDORMAT)
                    + '-' + $STR(L_CNTEXTCOD);
 
                  IF L_CNTDORMAT <> ' ' THEN
                     EXEC SQL
                        UPDATE CNTDOR
                           SET OBS = :L_CNTDORMAT
                         WHERE CNTCOD = :L_CNTEXTCOD;
 
               END;
 
 
DBG2
   'L_GEST-CRIPICK ' + L_GEST-CRIPICK;
 
               IF L_GEST-CRIPICK <> 'S' AND L_BOBINA = 0 THEN
                  EXEC SQL
                     SELECT CANUNI INTO :L_CANNDOCOD
                       FROM CNTNDO
                      WHERE NDOCOD = :L_NDOCOD;
               ELSE BEGIN
                  (* RS 02/08/2004 Incidencia - Se mezclaba el concepto de  *)
                  (* concurrencia con la gestion de criterio de rotacion    *)
                  L_SUMCANUNI = 0;
                  EXEC SQL
                     SELECT SUM(CANUNI) INTO :L_SUMCANUNI
                       FROM CNTNDO, ALMUBI
                      WHERE ALMUBI.ALMUBICOD = :L_UBIORI
                           AND CNTNDO.ARTCOD = :L_ARTCOD
                        AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD;
                  IF $NULL(L_SUMCANUNI) THEN
                     L_CANNDOCOD = 0;
                  ELSE
                     L_CANNDOCOD = L_SUMCANUNI;
DBG2
   'L_CANNDOCOD ' + $STR(L_CANNDOCOD);
               END;
            END;
            DBG2
               'Cantidad1 ' + $STR(L_CANTIDAD1);
            DBG2
               'Cantidad en Picking ' + $STR(L_CANNDOCOD);
 
            IF L_NDOCOD AND L_CANNDOCOD >= L_CANTIDAD1 THEN BEGIN
               (* RS 07/05/2004 Incidencias                         *)
               (* Solo se modifica la accion si se va a realizar el *)
               (* movimiento.                                       *)
               IF L_PICINV AND L_PESVAR <> 'M' THEN
                  L_PES = (-1) * L_PES;
 
               (*
                  Se cambia el acceso directo FOR ACCTRA
                  por el L_CLAUSE
               *)
 
               L_CLAUSE = " WHERE ACCCOD = " + $STR(L_ACCCOD1);
               SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
               FOR ACCTRA SELECTED DO BEGIN
                  (* RS 30/01/03 V2afpi - Si hay dos lecturas se debe llamar *)
                  (* al EXP-ACT-001 con la cantidad total de las dos.        *)
                  (* RS 12/03/03 V2gipd - Hay que considerar el caso de que  *)
                  (* la incidencia se de antes de la segunda lectura destino.*)
                  IF (L_LECTURAS = 2 AND J = 2) OR L_INCIAUX THEN BEGIN
                     CANMOV = CANMOV + L_CANTIDAD1;
                     PESMOV = PESMOV + L_PES;
                  END;
                  ELSE BEGIN
                     MOMINI = L_MOMINI;
                     MOMFIN = L_MOMINI;
                     CANMOV = L_CANTIDAD1;
                     PESMOV = L_PES;
                     (* Modifico si hay accion de pesaje*)
                     L_ACCPESCOD = 0;
                     EXEC SQL
                        SELECT ACCTRA.ACCCOD
                          INTO :L_ACCPESCOD
                          FROM ACCCOL, ACCTRA
                         WHERE ACCCOL.ACCCOLCOD = :L_ACCCOLCOD AND
                               ACCTRA.ACCCOLCOD = ACCCOL.COLPESCOD AND
                                  ACCTRA.ARTCOD = :L_ARTCOD;
                     IF L_ACCPESCOD THEN
                        EXEC SQL
                           UPDATE ACCTRA
                              SET CAN = CAN + :L_CANTIDAD1
                            WHERE ACCCOD = :L_ACCPESCOD;
                  END;
                  DBG2
                     'Cantidad a ejecutar en la accion ' + $STR(L_CANTIDAD1);
                  DBG2
                     'Peso a ejecutar en la accion ' + $STR(L_PES);
 
                  IF L_INCVERCAN = 'P' THEN BEGIN
                     L_CANTIDAD1 = CAN;
                     CANMOV = CAN;
                  END;
                  L_EXPORDCOD= EXPORDCOD; (*EV, PARA EL DBG_ANOTA*)
               END;
 
               DBG2
                  'Orden de Expedicion ' + $STR(L_EXPORDCOD);
               DBG2
                  'Ubicacion origen ' + $STR(L_UBIORI);
               DBG2
                  'Articulo ' + $STR(L_ARTCOD);
 
               L_ORIMOV = 'TRAS'; (* Traspaso de Contenido *)
               (* RS 13/12/2006 - Incidencia 9799 *)
               L_CLAMOV = 'PICK';
 
               DBG2
                  'Accion ' + $STR(L_ACCCOD1);
               DBG2
                  'Llamo a LIB-MOV-002 desde GES-PIC-001' + ' ' +
                  'con L_NDOCOD ' + $STR(L_NDOCOD) + ' ' +
                  'y L_PES ' + $STR(L_PES);
 
               DBG2
                  'Picking Inverso ' + $STR(L_PICINV);
               (* RS 32/01/03 Si la cantidad es 0, no se debe mover *)
               (* mercancia.                                        *)
               IF L_CANTIDAD1 THEN BEGIN
                  IF L_GEST-CRIPICK <> 'S' OR L_PICINV THEN BEGIN
 
                     LOGIC-LIB-MOV-002 USING L_NDOCOD,
                                             L_CNTINTCOD,
                                             L_CNTEXTCOD,
                                             L_CANTIDAD1,
                                             L_ORIMOV,
                                             L_CLAMOV,
                                             ' ',
                                             L_ACCCOD1,
                                             0,
                                             0,
                                             ' ',
                                             ' ',
                                             ' ',
                                             ' ',
                                             ' ',
                                             L_PES,
                                             'PICK';  (* FRAGRP, facturacion *)
 
                  END;
                  ELSE BEGIN
                     L_CANAUX = L_CANTIDAD1;
                     DBG2
                        'CRIROT: L_CANAUX ' + $STR(L_CANAUX);
 
                     (* Modif YMA 17/10/07 Se a·ade el $MATCH *)
 
                     IF $MATCH(L_PESVAR,'P,F') THEN
                        L_PESUNI = L_PES / L_CANAUX;
                     L_CLAUSE = " ";
                     L_CLAUSE = ", ALMUBI WHERE ALMUBI.ALMUBICOD = " +
                                $STR(L_UBIORI) +
                                " AND X0.CNTEXTCOD = ALMUBI.CNTCOD" +
                                " AND X0.ARTCOD = " + $STR(L_ARTCOD);
                     (* JLM, 11/06/2008 - 18550 *)
                     IF GV_CLIENTE = 'tpr' THEN
                        L_CLAUSE = $TRIM(L_CLAUSE, RIGHT) +
                                   " ORDER BY MOMREC ";
                     ELSE
                        L_CLAUSE = $TRIM(L_CLAUSE, RIGHT) +
                                   " ORDER BY CRIROT";
                     SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
                     FOR CNTNDO SELECTED DO BEGIN
                        (* RS 02/03/2006 - Incidencia 8865 *)
                        IF NOT $MATCH(L_PESVAR,'P,F') THEN
                           L_PESUNI = PES/CANUNI;
 
                        IF L_CANAUX = 0 THEN
                           BREAK;
                        IF L_CANAUX <= CANUNI THEN
                           L_CANAUX2 = L_CANAUX;
                        ELSE
                           L_CANAUX2 = CANUNI;
 
                        L_CANAUX = L_CANAUX - L_CANAUX2;
                        DBG2
                           'CRIROT: L_CANAUX ' + $STR(L_CANAUX);
                        DBG2
                           'CRIROT: L_CANAUX2 ' + $STR(L_CANAUX2);
 
                        (* Incidencia 29848, ID, 02/11/2011 *)
                        IF NOT $MATCH(L_PESVAR,'P,F') THEN
                           L_PESAUX2 = L_CANAUX2 * L_PESUNI;
                        ELSE
                           L_PESAUX2 = L_CANAUX2 * L_PES / L_CANTIDAD1;
                        DBG2
                           'L_PESAUX2 ' + $EDIT(L_PESAUX2);
 
                        LOGIC-LIB-MOV-002 USING NDOCOD,
                                                L_CNTINTCOD,
                                                L_CNTEXTCOD,
                                                L_CANAUX2,
                                                L_ORIMOV,
                                                L_CLAMOV,
                                                ' ',
                                                L_ACCCOD1,
                                                0,
                                                0,
                                                ' ',
                                                ' ',
                                                ' ',
                                                ' ',
                                                ' ',
                                                L_PESAUX2,
                                                'PICK';(* FRAGRP,facturacion *)
                     END; (* FOR *)
                  END; (* ELSE *)
                  (* RS 14/11/2011 - Incidencia 30413 *)
                  L_CNTEXISTE = 0;
                  EXEC SQL
                  SELECT CNTCOD
                    INTO :L_CNTEXISTE
                    FROM ALMUBI
                   WHERE ALMUBICOD = :L_UBIORI
                     AND UBITIP <> 'PI'
                     AND CNTCOD NOT IN (SELECT CNTEXTCOD
                           FROM CNTNDO WHERE CNTNDO.CNTCOD =  ALMUBI.CNTCOD);
 
                  IF L_CNTEXISTE THEN
                     LOGIC-LIB-MOV-001 USING L_CNTEXISTE
                                           , 0
                                           , 'SALI'
                                           , 'SALI';
               END; (* IF L_CANTIDAD1 *)
            END; (* IF L_NDOCOD <> 0 *)
            ELSE BEGIN
               IF L_CANTIDAD1 THEN BEGIN
                  (* RS 23/03/2004 Incidencia 6414-Concurrencia de operarios *)
(* SCREEN-RFT-AVI-001-P USING "REVISE CANTIDADES Y", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "REVISE CANTIDADES Y",
                                             "REPITA LECTURAS";
                  L_CONCURRENCIA = 1;
               END;
            END;
 
            IF NOT L_CONCURRENCIA THEN BEGIN
               (* Si hubiese segunda lectura no se podria desrelacionar *)
 
               (* Se crean contenidos si se ha pesado caja a caja *)
 
               (* RS 13/12/2006 - Incidencia 9799 *)
               IF GV_CLIENTE = 'bgrup' THEN BEGIN
                  K = 1;
                  L_PRIMER = 0;
 
                  L_EXPORDTIPAGR = ' ';
                  EXEC SQL
                  SELECT EXPORDTIPAGR
                    INTO :L_EXPORDTIPAGR
                    FROM EXPORDCAB
                   WHERE EXPORDCOD = :L_EXPORDCOD;
 
                  WHILE K < 500 AND L_EXPORDTIPAGR = 'FUS' DO BEGIN
                     DBG2
                        'CONTADOR DE ARRAY K ' + $STR(K);
                     DBG2
                        'ANTES DE COMPARACIONES, ARRAY PESOS ' +
                                                 $EDIT(L_PESOLEIDOS(K));
                     DBG2
                        'ANTES DE COMPARACIONES, ARRAY CAN ' +
                                                 $STR(L_CANLEIDOS(K));
                     IF L_CANLEIDOS(K) = 0 THEN
                        BREAK;
                     ELSE BEGIN
                        IF L_PRIMER = 0 THEN BEGIN
                           L_PRIMER = 1;
                           L_NDOCOD = 0;
 
                           EXEC SQL
                           SELECT NDOCOD INTO :L_NDOCOD
                             FROM CNTNDO
                            WHERE CNTNDO.CNTEXTCOD = :L_CNTINTCOD
                              AND ARTCOD = :L_ARTCOD;
                        END;
                        DBG2
                           'L_NDOCOD = ' + $STR(L_NDOCOD);
 
                        SELECT * FROM CNTNDO WHERE NDOCOD = L_NDOCOD;
                        FOR CNTNDO SELECTED DO BEGIN
                           LOGIC-LIB-CNT-001 USING 'CNDO',L_NDOCODNEW MODIFY;
                           CREATE CNTNDO WITH
                              NDOCOD = L_NDOCODNEW,
                              ARTCOD = L_ARTCOD,
                              CNTCOD = CNTNDO.CNTCOD,
                              CNTEXTCOD = CNTNDO.CNTEXTCOD,
                              FECCAD = CNTNDO.FECCAD,
                              CANUNI = L_CANLEIDOS(K),
                              PES    = L_PESOLEIDOS(K),
                              PESFIN = L_PESOLEIDOS(K),
                              UNITIP = CNTNDO.UNITIP,
                              CRIROT = CNTNDO.CRIROT,
                              FECFAB = CNTNDO.FECFAB,
                              MOMREC = $NOW,
                              LOTE   = CNTNDO.LOTE,
                              NDOSIT = CNTNDO.NDOSIT,
                              VALEST = CNTNDO.VALEST,
                              EXPORDCOD = CNTNDO.EXPORDCOD,
                              EXPORDLIN = CNTNDO.EXPORDLIN,
                              EXPORDCODORI = CNTNDO.EXPORDCODORI,
                              EXPORDLINORI = CNTNDO.EXPORDLINORI,
                              ALTURA    = CNTNDO.ALTURA,
                              BASE      = CNTNDO.BASE;
                           EXEC SQL
                           UPDATE ACCTRA
                             SET NDOCOD = :L_NDOCODNEW
                            WHERE ACCCOD = :L_ACCCOD1;
                        END;
                     END;
                     K = K + 1;
                  END;  (* END WHILE *)
                  IF L_PRIMER = 1 AND L_NDOCOD <> 0 THEN BEGIN
                     EXEC SQL
                     DELETE FROM CNTNDO
                      WHERE NDOCOD = :L_NDOCOD;
                     $INITIALIZE(L_CANLEIDOS);
                     $INITIALIZE(L_PESOLEIDOS);
                  END;
               END;
 
               IF L_LECTURAS <> 2 OR J <> 1 THEN BEGIN
                  (* RS 30/01/03 V2afpi En la doble lectura, solo se debe *)
                  (* llamar una vez al EXP-ACT-001.                       *)
 
                  (* v2gtrm *)
                  IF NOT L_PICINV AND L_GEST-MANIP-CNT[1] = 'S' THEN
                     LOGIC-EXP-ACT-001 USING L_ACCCOD1,
                                             0,
                                             L_CNTCOD;
                  ELSE
                     LOGIC-EXP-ACT-001 USING L_ACCCOD1;
 
                  EXEC SQL
                     UPDATE ACCTRA
                        SET ACCEST ='CO'
                      WHERE ACCCOD = :L_ACCCOD1;
                  (* desrelacionamos la accion, si es que fuera relacionada *)
                  EXEC SQL
                     UPDATE ACCTRA
                        SET ACCRELCOD = 0
                      WHERE ACCRELCOD = :L_ACCCOD1;
                  LOGIC-LIB-INR-001 USING L_UBIORI;
                  L_INCIDESTINO = 0;
                  (**********AQUI YA SE HA HECHO LA ACCION*********)
 
                  (*EST44.1: AVISO DE RETIRADA DE PALLET****************)
                  IF GV_CLIENTE = 'estesa' THEN BEGIN
 
                  (*1-obtener zona de picking*)
                  L_ZONPICREF=' ';
                  EXEC SQL
                  SELECT ZONPICREF
                    INTO :L_ZONPICREF
                    FROM ALMZONPIC
                   WHERE ZONPICCOD = (SELECT ZONPICCOD FROM ALMUBI
                                       WHERE ALMUBICOD = :L_UBIORI);
                  DBG2
                   'EST44.1*********************';
                  DBG2
                   'L_ZONPICREF:' + L_ZONPICREF;
                  (*1-ver si existe en la tabla general AVRP'*)
                  L_EXISTE = 0;
                  EXEC SQL
                  SELECT 1
                    INTO :L_EXISTE
                    FROM GENTAB
                   WHERE GENTABCOD = 'AVRP'
                     AND GENTABREG = :L_ZONPICREF;
                  DBG2
                   'EXISTE EN TABLA AVRP? 0/1 : ' + $STR(L_EXISTE);
                  IF L_EXISTE THEN BEGIN
                     (*ZONA DE AVISOS DE RETIRADA DE PALLET*)
                     (*2-Ver si el stock ha quedado a cero*)
                     L_EXISTE = 0;
                     EXEC SQL
                     SELECT 1
                       INTO :L_EXISTE
                       FROM CNTNDO
                      WHERE CNTEXTCOD = (SELECT CNTCOD
                                           FROM ALMUBI
                                          WHERE ALMUBICOD = :L_UBIORI);
                     IF NOT L_EXISTE THEN BEGIN  (*NO HAY STOCK EN PICKING*)
                        L_TECLA_PULSADA = 0;
                        WHILE L_TECLA_PULSADA = 0 DO BEGIN
                           DBG2
                            'AVISO AL OPERARIO:F1INVENT,F7CONFIRMAR';
(* SCREEN-RFT-AVI-001-P USING "***Ubicacion Vacia***", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "***Ubicacion Vacia***",
                                                      "*** Retire Pallet ***",
                                                      "F1:Inventariar ",
                                                      "F7:Confirmar",
                                                      L_TECLA_PULSADA MODIFY,
                                                      "Elija una opcion";
                           DBG2
                           'L_TECLA_PULSADA:' + $STR(L_TECLA_PULSADA);
                           IF L_TECLA_PULSADA <> 1 AND
                                                   L_TECLA_PULSADA <> 7 THEN
                              L_TECLA_PULSADA = 0;
                           IF L_TECLA_PULSADA = 1 THEN BEGIN (*INVENTARIAR*)
                              DBG2
                              'INVENTARIAR UBICACION ' + $STR(L_UBIORI);
                              DBG2
                              'NO HAY QUE GENERAR REPOSICION';
                              LOGIC-RFL-INV-020 USING L_UBIORI;
                           END; (*F1*)
                           IF L_TECLA_PULSADA = 7 THEN BEGIN (*CONFIRMAR*)
                              (*Generar reposicion*)
                              DBG2
                              'GENERAR REPOSICION A UBICACION ' +
                              $STR(L_UBIORI);
                              LOGIC-UBC-REP-001 USING L_ALMCOD,
                                                      L_ARTCOD,
                                                      L_UBIORI,
                                                      0,
                                                      0,
                                                      0,
                                                      L_ACCCOD1,
                                                      'PD';
                           END; (*F7*)
                        END; (*WHILE*)
                     END; (* IF NOT L_EXISTE, AVISO RETIRADA DE PALLET*)
                  END; (*IF L_EXISTE EN TABLA GENERAL AVRP*)
 
                  END; (*IF GV_CLIENTE = estesa*)
                  (*FIN EST44.1*****************************************)
 
               END;     (*IF L_LECTURAS <> 2 .....*)
 
               L_PES = 0;
 
               (* DMG V2ctrl 04/06/02                            *)
               EXEC SQL
                  SELECT NUMUNI
                    INTO :L_NUMUNI2
                    FROM ART, ARTPRE
                   WHERE ART.ARTCOD = :L_ARTCOD
                     AND ART.ARTCOD = ARTPRE.ARTCOD
                     AND ART.UNIEXP = ARTPRE.UNITIP;
 
               (* Los bultos se cuentan como unidades de expedicion *)
               L_CTA = $TRUNC(L_CANTIDAD1 / L_NUMUNI2);
               L_CUENTA = 0;
 
               EXEC SQL
                  SELECT CUENTA
                    INTO :L_CUENTA
                    FROM CTREVE
                   WHERE EVEREF = 'PIBU'
                     AND ALMCOD = :L_ALMCOD
                     AND EVEFIL = :L_FILTRO;
 
               L_CUENTA = L_CUENTA + L_CTA;
 
               EXEC SQL
                  UPDATE CTREVE
                     SET CUENTA = :L_CUENTA
                   WHERE EVEREF = 'PIBU'
                     AND ALMCOD = :L_ALMCOD
                     AND EVEFIL = :L_FILTRO;
 
               (* La accion es unica aunque haya dos lectura *)
               IF L_LECTURAS <> 2 OR J <> 1 THEN BEGIN
                  (* Control de acciones realizadas *)
                  EXEC SQL
                     UPDATE CTREVE
                        SET CUENTA = CUENTA + 1
                       WHERE EVEREF = 'PIAC'
                         AND ALMCOD = :L_ALMCOD
                         AND EVEFIL = :L_FILTRO;
 
                  (* DMG V2ctrl 04/06/02--------------------------- *)
 
                  (* V2ds *)
                  IF L_ARTCOD THEN BEGIN
                     DBG2
                        'Intentamos desasignar el articulo ' + $STR(L_ARTCOD);
 
                     LOGIC-DSG-SEL-001 USING L_ALMCOD,
                                             L_ARTCOD,
                                             0,
                                             0,
                                             ' ',
                                             0,
                                             L_CLAUSE MODIFY;
 
                     LOGIC-DSG-PIC-002 USING L_CLAUSE;
 
                     (* JLM, 22/12/2006 Si picking caotica mirar si se  *)
                     (* vacia el hueco. *)
 
                     IF L_UBIPICDIN = 'C' AND L_PICK-DINAM[1] = 'S' THEN
                     BEGIN
 
                        LOGIC-VAC-PIC-DIN USING L_UBIORI
                                              , 0
                        ;
 
                     END;
                  END;
                  (* V2ds *)
              END;
 
              (* PROGRAMA EN BLANCO EN ADAIA2 Y QUE ESTARA EN LAS *)
              (* INSTALACIONES CON PRIVADO PARA IMPRIMIR ETIQUETAS DE ENVIO *)
 
              DBG2
                 'Llamo a Etiquetas de Envio LIB-ETI-PIC';
              DBG2
                 'Con accion ' + $STR(L_ACCCOD1) + ' ' +
                 'y Cantidad ' + $STR(L_CANTIDAD1);
 
               LOGIC-LIB-ETI-PIC USING L_ACCCOD1,
                                       L_CANTIDAD1;
(* MODIFICACION DMT: Se ha modificado el programa para que compruebe si el *)
(* articulo tiene gestion de numero de serie. Si la tiene, llama al *)
(* RFL-NSE-001 que lo gestiona, si no tiene, sigue normalmente *)
 
(* AP 26/12/02: Se comprueba primero en la linea de la orden si hay gestion*)
(* del numero de serie. Si en EXPORDLIN esta en blanco,se accede a la tabla*)
(* de articulos para sacar el dato de ahi.                                 *)
               L_GESSER = 'N';
               EXEC SQL
                  SELECT EXPORDLIN.GESSER, UNIEXP
                    INTO :L_GESSER, :L_UNIEXP
                    FROM EXPORDLIN, ACCTRA, ART
                   WHERE ACCCOD = :L_ACCCOD1
                     AND ART.ARTCOD = ACCTRA.ARTCOD
                     AND EXPORDLIN.EXPORDCOD = ACCTRA.EXPORDCOD
                     AND EXPORDLIN.EXPORDLIN = ACCTRA.EXPORDLIN;
 
               IF L_GESSER = ' ' THEN BEGIN
                  EXEC SQL
                     SELECT GESSER,UNIEXP
                       INTO :L_GESSER,:L_UNIEXP
                       FROM ART
                      WHERE ARTCOD = :L_ARTCOD;
               END;
               IF PG_NSER-PREP = 'S' AND
                  $MATCH(L_GESSER,'S,A,B,T') THEN BEGIN
                  EXEC SQL
                     SELECT NUMUNI
                       INTO :L_NUMUNI
                       FROM ARTPRE
                      WHERE ARTCOD = :L_ARTCOD
                        AND UNITIP = :L_UNIEXP;
 
(** Modificado por JLM el 18/02/2003 **)
 
                  L_VECES = 1;
                  L_VAL = 0;
                  EXEC SQL
                     SELECT GENTABVAL
                       INTO :L_VAL
                       FROM GENTAB
                      WHERE GENTABCOD = 'TGNS'
                            AND GENTABREG = :L_GESSER;
                  IF L_VAL = 2 THEN
                     L_VECES = 2;
 
(** Hasta Aqui JLM el 18/02/2003 **)
 
                  (* Para tratar los desgloses, debe hacerse por cada *)
                  (* contenido del contenedor                         *)
(*             SELECT * FROM CNTNDO WHERE CNTCOD = L_CNTEXTCOD AND
                                          ARTCOD = L_ARTCOD;              *)
                  SELECT * FROM CNTNDO WHERE CNTCOD = L_CNTINTCOD AND
                                             ARTCOD = L_ARTCOD;
                  FOR CNTNDO SELECTED DO BEGIN
                     L_NDOCODAUX = NDOCOD;
 
                     (* Por si hay segunda vuelta, debemos tener en      *)
                     (* cuenta los numeros de serie leidos en la primera *)
                     EXEC SQL
                        SELECT COUNT(ARTCOD)
                          INTO :L_NUMSERLEIDOS
                          FROM CNTNDONUMSER
                         WHERE NDOCOD = :L_NDOCODAUX AND
                               ARTCOD = :L_ARTCOD;
 
                     IF $NULL(L_NUMSERLEIDOS) THEN
                        L_NUMSERLEIDOS = 0;
 
                     L_CAJAS = $TRUNC(CANUNI / L_NUMUNI) - L_NUMSERLEIDOS;
                     IF L_CAJAS THEN
                        LOGIC-RFL-NSE-001 USING L_ARTCOD,
                                                L_NDOCODAUX,
                                                L_CAJAS * L_VECES,
                                                0,
                                                'E';
                  END; (* FOR *)
               END; (* Modificacion DMT *)
            END; (* IF NOT L_CONCURRENCIA *)
         END; (* IF NOT L_INCREPPANT *)
EXIT;

LOGIC-TRA-PIC-002:
(* Release Label (12) *)
PARM L_ACCCOD LIKE(NAME=ACCCOD);
PARM L_MOSTRAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_CANTIDAD LIKE(NAME=CAN);
PARM L_SEGUNDA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_ACCCODNEW LIKE(NAME=ACCCOD);
PARM L_PICK_SIMULT FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_AUTOREP FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_ENTRO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET TITLE("Trabajo de Picking: Analiza una Accion");
DCL L_ACCCOD2V LIKE(NAME=ACCCOD);
DCL L_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
DCL L_ACCREP LIKE(NAME=ACCCOD);
DCL L_ACCS_IN FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_ALM-CLI-REP LIKE(NAME=TERREF);
DCL L_ALMCOD LIKE(NAME=ALMCOD);
DCL L_ALMCODREL LIKE(NAME=ALMCODREL);
DCL L_ALMUBICOD_AUX LIKE(NAME=ALMUBICOD);
DCL L_ALMUBINP LIKE(NAME=ALMUBICOD);
DCL L_ALMUBIREF LIKE(NAME=ALMUBIREF);
DCL L_ANCOPEMAQ LIKE(NAME=ANCOPE);
DCL L_ANCOPEMAQCAR FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
DCL L_ARTCOD LIKE(NAME=ARTCOD);
DCL L_ARTCOD2 LIKE(NAME=ARTCOD);
DCL L_ARTCODHAY LIKE(NAME=ARTCOD);
DCL L_ARTCODUD LIKE(NAME=ARTCOD);
DCL L_ARTICULO LIKE(NAME=ARTCOD);
DCL L_ARTPRICOD LIKE(NAME=ARTPRICOD);
DCL L_ARTPROCTR LIKE(NAME=ARTPROCTR);
DCL L_ARTREF LIKE(NAME=ARTREF);
DCL L_ARTREP LIKE(NAME=ARTCOD);
DCL L_BOBINA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAD_ACEPTABLE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAD_MENOR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAMBIAFORMEXP FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_CAMBIARART FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAN LIKE(NAME=CAN);
DCL L_CANASIG FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CANHAY FORMAT(TYPE=PACK,LENGTH=9,BYTES=6,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CANMOV LIKE(NAME=CANMOV);
DCL L_CANPIC LIKE(NAME=CANUNI);
DCL L_CANREPUD LIKE(NAME=CAN);
DCL L_CANTEORICA LIKE(NAME=CANEXPRES);
DCL L_CANTIDAD_AUX LIKE(NAME=CAN);
DCL L_CANUDS FORMAT(TYPE=INT,LENGTH=3,SUBTYPE=NUMERIC);
DCL L_CAN_AUX FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=1500,SUBTYPE=ALPHA);
DCL L_COLA LIKE(NAME=ACCCOLCOD);
DCL L_COLSIGCOD LIKE(NAME=COLSIGCOD);
DCL L_DIAMAXCADEXP LIKE(NAME=DIAMINCADEXP);
DCL L_DIAMINCADEXP LIKE(NAME=DIAMINCADEXP);
DCL L_ESPERA-MER-MUE FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_ESPERA-REP-ALM LIKE(NAME=VALALF);
DCL L_ESPICKUDS FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ESTA_VACIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ESTCOD LIKE(NAME=ESTCOD);
DCL L_ESTREF LIKE(NAME=ESTREF);
DCL L_EXISTE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_EXPORDCOD LIKE(NAME=EXPORDCOD);
DCL L_EXPORDCOD2 LIKE(NAME=EXPORDCOD);
DCL L_EXPORDLIN LIKE(NAME=EXPORDLIN);
DCL L_EXPORDLIN2 LIKE(NAME=EXPORDLIN);
DCL L_FEC FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_FECCAD LIKE(NAME=FECCAD);
DCL L_FECCAD_PICK FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_FILTRA-PICKING LIKE(NAME=VALALF);
DCL L_GENERA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_GESREP FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_HAY FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYACC FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYPIC FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYREPOSICION FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HAYSTOCK FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HOY FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_MENSAJ-OTRO-FO LIKE(NAME=VALALF);
DCL L_MEZCLA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_MOVHORMAQ LIKE(NAME=MOVHOR);
DCL L_MOVVERMAQ LIKE(NAME=MOVVER);
DCL L_MOVVERMAQCAR FORMAT(TYPE=CHAR,LENGTH=8,SUBTYPE=ALPHA);
DCL L_NEWUBIORICOD LIKE(NAME=UBIORICOD);
DCL L_NORESTA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_NUMUNI LIKE(NAME=NUMUNI);
DCL L_PIC-ALTURA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PICK-DINAM FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
DCL L_PICKUDS FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_PREPAR_ESPERA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_REPARTO LIKE(NAME=ACCCOD);
DCL L_REPMASANT LIKE(NAME=REPMASANT);
DCL L_RESER_ALTO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ROTTIP LIKE(NAME=ROTTIP);
DCL L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_SOLO-FIL-PICK LIKE(NAME=VALALF);
DCL L_STOMAX LIKE(NAME=CANPICMAX);
DCL L_STOMED LIKE(NAME=CANPICMIN);
DCL L_STOMIN LIKE(NAME=CANPICMIN);
DCL L_TERCERO LIKE(NAME=TERCOD);
DCL L_TERCOD LIKE(NAME=TERCOD);
DCL L_TERCODUDS LIKE(NAME=TERCOD);
DCL L_TERPROCOD LIKE(NAME=TERPROCOD);
DCL L_TIENESTOCK FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_UBI-NP LIKE(NAME=VALALF);
DCL L_UBICACION LIKE(NAME=UBIORICOD);
DCL L_UBIORICOD LIKE(NAME=UBIORICOD);
DCL L_UBIORICOD_AUX LIKE(NAME=UBIORICOD);
DCL L_UBIPICDIN LIKE(NAME=UBIPICDIN);
DCL L_UBITIPORI LIKE(NAME=UBITIP);
DCL L_UDS-CLI-REP LIKE(NAME=TERREF);
DCL L_UNIEXP LIKE(NAME=UNIEXP);
DCL L_VALALF LIKE(NAME=VALALF);
(* V2EXI : GGOMEZ 06/07/2007  *)
DCLVIEW V_UBI_INUTIL COLUMNS(ALMUBICOD) AS
   ( SELECT ALMUBICOD
       FROM ALMUBI
      WHERE ALMUBI.UBISIT = 'OK'
        AND ALMUBI.UBIEST = 'LL'
        AND ALMUBI.UBITIP = 'PI'
        AND ALMUBICOD = :L_UBIORICOD
        AND ALMUBI.ALMUBICOD NOT IN
                       (SELECT UBIORICOD FROM ACCTRA
                         WHERE ACCTRA.UBIORICOD = ALMUBI.ALMUBICOD
                           AND ACCEST <> 'CO')
        AND ALMUBI.ALMUBICOD NOT IN
                       (SELECT UBIDESCOD FROM ACCTRA
                         WHERE ACCTRA.UBIDESCOD = ALMUBI.ALMUBICOD
                           AND ACCEST <> 'CO')
        AND ALMUBI.CNTCOD NOT IN
                       (SELECT CNTEXTCOD FROM CNTNDO
                         WHERE CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD)
        AND ALMUBI.ALMUBICOD NOT IN
                       (SELECT UBIPIC FROM ARTALM
                         WHERE ARTALM.UBIPIC = ALMUBI.ALMUBICOD))
        USING L_UBIORICOD FORMAT(INT,9,,4);
(*****************************************************************************)
(* EST                                                                       *)
(*                                                                           *)
(* Titulo: Trabajo de Preparacion: Analiza una accion                        *)
(* Parametros                                                                *)
(*    Recibidos:                                                             *)
(*       1. Codigo de la accion a analizar                                   *)
(*       4. Indicador de si se trata de primera o segunda vuelta de picking  *)
(*    Devueltos:                                                             *)
(*       2. Variable de control que indica si hay que mostrar o no la accion *)
(*       3. Cantidad servida                                                 *)
(*       5. Codigo de accion generada en segunda vuelta                      *)
(* Programas llamados:                                                       *)
(*    LIB-PAR-001                                                            *)
(*    UBC-REP-001                                                            *)
(*    TRA-PIC-003                                                            *)
(*    ACC-BOR-001                                                            *)
(*    MOD-PIC-UND                                                            *)
(*    GAC-UDS-001                                                            *)
(* Tablas:                                                                   *)
(*    Lectura:                                                               *)
(*       ACCCOL                                                              *)
(*       ALMUBI                                                              *)
(*       ART                                                                 *)
(*       ARTALM                                                              *)
(*       ARTPRE                                                              *)
(*       CNTNDO                                                              *)
(*    Escritura:                                                             *)
(*       ACCTRA                                                              *)
(* Acciones:                                                                 *)
(*    1: Analisis de una accion de picking                                   *)
(*---------------------------------------------------------------------------*)
(* Descripcion general                                                       *)
(*    Este programa analiza una accion de picking cuyo codigo recibe como    *)
(*    parametro para comprobar si el stock actual de la ubicacion permite    *)
(*    que se realice.                                                        *)
(*    . Comprueba si la ubicacion origen contiene el mismo articulo principal*)
(*      que el que se solicita.                                              *)
(*    . Comprueba si hay stock, y si este es suficiente para completar la    *)
(*      cantidad solicitada.                                                 *)
(*    . Si hay stock aunque sea insuficiente, la accion se muestra para      *)
(*      agotar el stock de la ubicacion.                                     *)
(*    . Si el stock queda por debajo del stock minimo genera una orden de    *)
(*      reposicion para rellenar el hueco de picking.                        *)
(*    . Si no se consigue servir toda la mercancia solicitada se genera una  *)
(*      accion de segunda vuelta.                                            *)
(*---------------------------------------------------------------------------*)
(* Historia:                                                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 18/03/99                                        *)
(*    Programador          : AA                                              *)
(*    Proyecto o incidencia: ADAIA V2 Primera Version                        *)
(*    Descripcion          :                                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/08/00                                        *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: L'OREAL                                         *)
(*    Descripcion          : Analiza accion de picking                       *)
(*       Si se produce cambio de formato y hay gestion de picking de         *)
(*       unidades se realiza el siguiente proceso:                           *)
(*       . Calcular las unidades por unidad de expedicion del nuevo formato. *)
(*       . Calcular para el nuevo formato las cajas y unidades que se        *)
(*         corresponden para la cantidad de la accion.                       *)
(*       . Si hay unidades sueltas, se modifica la cantidad en la accion y se*)
(*         llama al programa LOGIC-MOD-PIC-UND para que actualice la cantidad*)
(*         en las acciones de picking de unidades.                           *)
(*****************************************************************************)
(* Fecha.................: 9/02/2001                                         *)
(* Programador...........: PAM                                               *)
(* Proyecto o incidencia.: V2pd Picking dinÄmico - ReposiciÆn MÇltiple       *)
(* Descripcion...........: Se a·ade MODIFY en la llamada a UBC-REP-001 dado  *)
(*                          que la ubicaciÆn de Picking del artÕculo         *)
(*                          cambiarÄ si el artÕculo es de Picking dinÄmico.  *)
(*                          TambiÅn se le pasa la acciÆn, puesto que en      *)
(*                          en caso de que haya cambio de ubicaciÆn se       *)
(*                          encarga de redireccionar las acciones            *)
(*                          Asimismo se a·ade un parÄmetro mas en la llamada *)
(*                          a TRA-PIC-003, indicando la ubicaciÆn origen con *)
(*                          la que se debe crear la acciÆn de continuaciÆn   *)
(*                          Cuando el artÕculo es de Picking dinÄmico, y     *)
(*                          tenemos activado el parÄmetro PICK-DINAM solo    *)
(*                          generamos reposiciÆn cuando se agota el stock de *)
(*                          la ubicaciÆn de Picking                          *)
(*                          Asimismo, en caso de que cambie la ubicacion     *)
(*                          de Picking, liberamos la original                *)
(*****************************************************************************)
(* Fecha.................: 5/06/2001                                         *)
(* Programador...........: PAM                                               *)
(* Proyecto o incidencia.: V2pd Picking dinÄmico - ReposiciÆn MÇltiple       *)
(* Descripcion...........: Para determinar si un artÕculo es tiene cambio    *)
(*                         dinÄmico de ubicaciÆn de Picking, se comprueba que*)
(*                         el parÄmetro PICK-DINAM esta activado y que el    *)
(*                         campo de ARTALM, UBIPICDIN es 'C'                 *)
(*****************************************************************************)
(* Fecha.................: 27/07/2001                                        *)
(* Programador...........: PAM                                               *)
(* Proyecto o incidencia.: ALICP1 Alicer Porcelanosa                         *)
(* Descripcion...........: Si estamos en situacion de cambio dinamico de     *)
(*                         ubicacion de Picking, al analizar una accion      *)
(*                         estemos en PRIMERA O SEGUNDA vuelta, si no hubo   *)
(*                         reposicion, pero si cambio de ubic,  si se puede  *)
(*                         generar otra accion para a·adir a la cola         *)
(*                         la generaremos; para habilitar esto debe pasarse  *)
(*                         a TRA-PIC-003 el parÄmetro L_NORESTA a 1 y en     *)
(*                         en el parÄmetro L_COLSIGCOD la cola donde queremos*)
(*                         que se a·ada la accion                            *)
(*                         En el parametro L_CANTIDAD de TRA-PIC-002         *)
(*                         devolveremos la cantidad exacta a mostrar en      *)
(*                         terminal, de manera que en la nueva accion se     *)
(*                         ponga todo lo que falta por preparar.             *)
(*****************************************************************************)
(* Fecha.................: 6/08/2001                                         *)
(* Programador...........: AP                                                *)
(* Proyecto o incidencia.: V2pd Picking dinÄmico vs Picking simultaneo       *)
(* Descripcion...........: Recibe un parametro mas, el sexto, L_PICK_SIMULT  *)
(*                         que indica que se ha hecho la llamada desde el    *)
(*                         programa de picking simultaneo. En este caso no se*)
(*                         genera la segunda vuelta.                         *)
(*****************************************************************************)
(* Fecha.................: 21/08/2001                                        *)
(* Programador...........: EV                                                *)
(* Proyecto o incidencia.: V2pd Picking dinÄmico vs Cambio dinamico de ubipic*)
(* Descripcion...........: Cuando es segunda vuelta, y el stock de la ubicac.*)
(*                         de picking es menor que la cant. de la accion y se*)
(*                         trata de cambio dinamico de la ubic. de pick , es *)
(*                         decir, UBIPICDIN=C, entonces en lugar de mostrar  *)
(*                         en la pantalla la cantidad total de la accion,como*)
(*                         hace en segunda vuelta normalmente, muestra la can*)
(*                         tidad igual al stock de picking, ya que se pueden *)
(*                         generar en este caso mas acciones de seg. vuelta .*)
(*****************************************************************************)
(* Fecha.................: 3/09/2001                                         *)
(* Programador...........: PAM                                               *)
(* Proyecto o incidencia.: V2pd Picking dinÄmico vs Picking simultaneo       *)
(* Descripcion...........: En situacion de cambio dinamico ubicacion pick:   *)
(*                         Por incidencia en Alicer haya que mostrar la      *)
(*                         accion en curso o no, si se crea una nueva accion *)
(*                         no hace falta que la accion origen tenga L_MOSTRAR*)
(*                         a 1 para que se active el parametro que habilita  *)
(*                         crear acciones en la misma cola                   *)
(*---------------------------------------------------------------------------*)
(* Fecha.................: 13/09/2001                                        *)
(* Programador...........: AP                                                *)
(* Proyecto o incidencia.: V2ar Autoreposicion                               *)
(* Descripcion...........: Si el perfil es AR mostrar la pantalla de trabajo *)
(*                         automatico para que el mismo preparador haga la   *)
(*                         reposicion.                                       *)
(*---------------------------------------------------------------------------*)
(* Fecha.................: 26/09/2001                                        *)
(* Programador...........: EMA                                               *)
(* Proyecto o incidencia.: V2mr Aviso Mercancia en Muelle                    *)
(* Descripcion...........: Si cuando se ha decidido que no hay stock en todo *)
(*                         el almacen, se busca en los muelles de recepcion  *)
(*                         si hay stock se da un aviso. No se generara repo- *)
(*                         sicion ni nada solo se dara el aviso.             *)
(*---------------------------------------------------------------------------*)
(* Fecha.................: 22/10/2001                                        *)
(* Programador...........: RS                                                *)
(* Proyecto o incidencia.: V2gr                                              *)
(* Descripcion...........: Se han a·adido variables del include TRA-DIR-001  *)
(*---------------------------------------------------------------------------*)
(* Fecha.................: 05/02/2002                                        *)
(* Programador...........: RS                                                *)
(* Proyecto o incidencia.: Incidencia ALCC                                   *)
(* Descripcion...........: Los contenidos del picking debe tener situacion   *)
(*                          OK.                                              *)
(*---------------------------------------------------------------------------*)
(* Fecha.................: 29/05/2002                                        *)
(* Programador...........: AP                                                *)
(* Proyecto o incidencia.: LOR09                                             *)
(* Descripcion...........: Buscar mercancia en otro almacen.                 *)
(*         Si esta activo el parametro MENSAJ-OTRO-FORM y hay stock de otro  *)
(*         formato, se mostrara el mensaje "Merec. en otra ubicacion pick"   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 19/09/2002                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2gcrp Gestion criterio de rotacion             *)
(*    DescripciÆn          : Solicitado por @Carrefour. Hay que controlar    *)
(*       todos los contenidos de una articulo, por si tienen gestion de      *)
(*       criterio de rotacion en picking.                                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/12/2002                                      *)
(*    Programador          : AP                                              *)
(*    Proyecto o incidencia: Incidencia en freiremar- tercero propietario    *)
(*    DescripciÆn          : Si el articulo se gestiona por tercero propieta-*)
(*       rio, al buscar por artpricod tenerlo en cuenta.                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 20/04/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia al analizar si hay stock de un art.  *)
(*    DescripciÆn          : No comprobaba si las ubicaciones estaban llenas *)
(*       por lo que tenÕa en cuenta las ubicaciones reservadas y vacias con  *)
(*       contenedor para contenedores que estan pendientes de ubicar.        *)
(*       Al analizar si hay que mostrar la acciÆn en 2ù vuelta.              *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 20/06/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia LOR09,  muestra acciones cuando no   *)
(*                           hay stock en la ubicacion de picking del for-   *)
(*                           mato de cajas para reposicion a detall.         *)
(*    DescripciÆn          : Cuando los parÄmetros EXP-REP-ALM o MENSAJ-OTRO-*)
(*       FOR,  estÄn activados tambiÅn hay que comprobar si el tercero de la *)
(*       orden es distinto al de los parametros UDS-CLI-REP y ALM-CLI-REP    *)
(*       para que no se ejecuten las comprobaciones de si hay stock en alma- *)
(*       cen o stock de otro formato. Como lo hace el RFL-PIC-001.           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 27/06/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia LOR09.                               *)
(*    Descripcion          : En la busqueda de stock de otros formatos       *)
(*                           entra con el ARTCOD de la accion en vez de con  *)
(*                           el ARTPRICOD de este.                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/09/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia reportada por Logista                *)
(*    Descripcion          : A la hora de calcular el stock, se debe tener   *)
(*       encuenta acciones iniciadas con el mismo origen y el mismo articulo *)
(*       por si hay otro operario en la misma ubicacion y confirman en cntdor*)
(*       destino.                                                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 20/11/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: Incidencia reportada por Logista 5396           *)
(*    Descripcion          : A la hora de calcular si hay stock del articulo *)
(*                           en almacen o no, se debe descartar el stock     *)
(*                           caducado                                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/02/2004                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia GRH                                  *)
(*    Descripcion          : La variable L_PICK-DINAM era siempre blanco en  *)
(*                           el IF de segunda vuelta, ya que estaba puesta   *)
(*                           su inicializacion despues.                      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/08/2004                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia LOG -                                *)
(*    Descripcion          : Se le pasa a TRA-PIC-003 L_CANTIDAD + L_CANMOV  *)
(*                           ya que en el caso de dobles lecturas con inci-  *)
(*                           dencia servir menos, actualizaba mal la accion  *)
(*                           de segunda vuelta en caso de existir esta.      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 24/06/2005                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Mejora de Adaia2                                *)
(*    Descripcion          : Se elimina la tabla ART de la consulta del stock*)
(*       de un articulo en su ubicacion de picking, por ser redundante.      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/08/2006                                      *)
(*    Programador          : DAS                                             *)
(*    Proyecto o incidencia: 9424 (IVN)                                      *)
(*    Descripcion          : Se a·ade una clausula a la consulta donde       *)
(*       selecciona las ubicaciones ya que aunque no ubiese stock del        *)
(*       articulo selecionaba una ubicacion, provocando que bloquease las    *)
(*       segundas vueltas                                                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/08/2006                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia 9311 - PDU                           *)
(*    Descripcion          : Al mirar si hay stock en el hueco de picking,   *)
(*       si no hay stock del articulo que pide la accion, miraba si habÕa de *)
(*       cualquiera de sus formatos, sin tener en cuenta el parÄmetro        *)
(*       CAMBIA-FORM-EXPE de la categorÕa EXPEDICION.                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 31/08/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : Si FILTRA-PICKING = S Y SOLO-FIL-PICK = N -si   *)
(*       esta activado el Control de Caducidad en picking + picking en alto-,*)
(*       si existe un contenido en altura reservado para el tercero de la    *)
(*       orden y no caducado, NO analizar el stock de picking para ver si    *)
(*       se genera reposicion y segunda vuelta; hay que presentar EL         *)
(*       TOTAL de la acciÆn, YA QUE SE VA A SERVIR POR PICKING EN ALTURA DE  *)
(*       MERCANCIA RESERVADA.                                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 06/09/2006                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: V2BOB                                           *)
(*    Descripcion          : Se mirar si el articulo es de bobina para entrar*)
(*       a mirar si hay algo de picking en altura.                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 19/10/2006                                      *)
(*    Programador          : NMN                                             *)
(*    Proyecto o incidencia: Incidencia 9976                                 *)
(*    Descripcion          : Se pasa a la vista V_UBI_INUTIL la ubicaciÆn    *)
(*       prevista para que no haga un FULL SCAN de la tabla ALMUBI.          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/11/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT08                                           *)
(*    Descripcion          : Se contempla como disponible los contenidos     *)
(*       con NDOSIT=NPIC excepto para el caso de la REPOSICION.              *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/10/2006                                      *)
(*    Programador          : ema                                             *)
(*    Proyecto o incidencia: Incidencia 9496                                 *)
(*    Descripcion          :Con el fin de evitar saltos en la preparacion de *)
(*       picking caotico comentamos la linea donde L_COLSIGCOD = L_ACCOLCOD  *)
(*       Por anÄlisis de FM.                                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 28/11/2006                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia 9496                                 *)
(*    Descripcion          : El cambio anterior se deshace, se llama a un    *)
(*       nuevo programa ACCPICCAO-ORD que sumarÄ 1 al campo ACCORD de la     *)
(*       accion que se ha creado nueva, siempre viendo, si esta tiene como   *)
(*       ubicaciÆn origen una que sea anterior a la que estamos preparando,  *)
(*       evitando de esta manera saltos hacia atras durante la preparacion   *)
(*       de picking caÆtico.                                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/11/2006                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia 9976                                 *)
(*    Descripcion          : Cual es la ubicacion prevista, L_UBIORICOD?     *)
(*      Pasarle a la vista V_UBI_INUTIL L_UBIORICOD como ubicacion prevista  *)
(*      no es correcto, ya que esta cambia a lo largo del programa y antes   *)
(*      de ejecutarse la vista. Le pasamos L_UBIORICOD_AUX que es donde se   *)
(*      ha guardado L_UBIORICOD, y no ha cambiado.                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 31/01/2007                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 10558                                *)
(*    Descripcion          : En el caso de segunda vuelta siempre se miraba  *)
(*       el stock por el ARTPRICOD.                                          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 31/01/2007                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 10560                                *)
(*    Descripcion          : En el caso de que haya autoreposicion, no se    *)
(*       controlaba que el operario no decidiera hacerla y por tanto la      *)
(*       reposicion se quedaba GE.                                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 14/02/2007                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: Incidencia 10720                                *)
(*    Descripcion          : Al estar activado el picking en altura, se      *)
(*       pueden quedar acciones de PISU en estado IN,-por caida de la sesion *)
(*       en la que se estaba ejecutando la accion-,  con la ubicacion origen *)
(*       modificada con la ubicacion de altura. Al empezar el programa de    *)
(*       picking y analizar una accion con esta situacion, analiza el stock  *)
(*       de la ubicacion en alto -tipo RE- como si se tratara de una de tipo *)
(*       PI, y si queda por debajo de minimo, genera una reposicion, quedando*)
(*       generada una accion    de reposicion con origen en una ubicacion RE *)
(*       y destino otra ubicacion RE.                                        *)
(*       Para solucionarlo, solo se analizara el stock de la ubicacion para  *)
(*       generar posibles reposiciones, cuando se trata de una ubicacion     *)
(*       de picking -tipo PI-, y si no, no se analizara.                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 15/12/2006                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia IVNi                                 *)
(*    Descripcion          : Se llama a un nuevo porgrama para que no tenga  *)
(*      en cuenta la accion que estamos analizando ya que nunca esta         *)
(*      liberando los huecos si estan vacios.                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 12/03/2007                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia IVNi                                 *)
(*    Descripcion          : Se modifica para que en la segunda llamada al   *)
(*      VAC-PIC-DIN se realice si se ha encontrado una nueva ubicacion.      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 06/07/2007                                      *)
(*    Programador          : GGOMEZ.                                         *)
(*    Proyecto o incidencia: V2EXI.                                          *)
(*    Descripcion          : Se cambian los accesos a B.D. que usan EXISTS   *)
(*    y NOT EXISTS por IN y NOT IN respectivamente.                          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 16/11/2007                                      *)
(*    Programador          : NMN                                             *)
(*    Proyecto o incidencia: Inc. 16210 STY                                  *)
(*    Descripcion          : Se cambia en el L_CLAUSE al UBIST = por         *)
(*    UBISIT || '' =  para mejorar el rendimiento de las querys.             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/12/2007                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Inc. 15401 - gam                                *)
(*    Descripcion          : Si el articulo es de picking caotico, y no hay  *)
(*       stock en picking, pero hay una reposicion generada, se le debe poner*)
(*       a la accion la ubicacion origen igual al destino de la reposicion.  *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/01/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Inc. 15895 - PDU                                *)
(*    Descripcion          : Si el articulo tiene control de caducidad en el *)
(*       picking, no es aceptable la del picking y la cantidad es menor, no  *)
(*       debe generar reposiciÆn. Si no hay stock con caducidad aceptable en *)
(*       todo el almacen, no se debe mostrar la accion.                      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/04/2009                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: DHLS09.13                                       *)
(*    Descripcion          : Se agrega condicion OR                          *)
(*       L_UBIORICOD = UBI-NP-ALTURA                                         *)
(*****************************************************************************)
DBG1
  'INICIO PROGRAMA -------------------';
DBG1
  'L_ACCCOD ' + $STR(L_ACCCOD);
DBG1
  'L_SEGUNDA ' + $STR(L_SEGUNDA);
DBG1
  'L_PICK_SIMULT ' + $STR(L_PICK_SIMULT);
DBG1
  'L_AUTOREP ' + $STR(L_AUTOREP);
(* Por defecto se espera a que lleven un pallet desde el muelle de recepcion *)
(* si fuera el Çnico stock disponible del articulo.                          *)
L_ESPERA-MER-MUE = 'S';
LOGIC-LIB-PAR-001 USING 'INSTALACION', 'ESPERA-MER-MUE',
                        L_ESPERA-MER-MUE MODIFY;
L_ESPERA-REP-ALM = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION', 'ESPERA-REP-ALM',
                        L_ESPERA-REP-ALM MODIFY;
L_MENSAJ-OTRO-FO = 'N';
LOGIC-LIB-PAR-001 USING 'INSTALACION', 'MENSAJ-OTRO-FORM',
                        L_MENSAJ-OTRO-FO MODIFY;
(* Cliente para recibir expediciones del almacen pulmon *)
LOGIC-LIB-PAR-001 USING 'INSTALACION','ALM-CLI-REP', L_ALM-CLI-REP MODIFY;
(* Cliente para que la zona de picking de Uds reciba reposicion *)
LOGIC-LIB-PAR-001 USING 'INSTALACION','UDS-CLI-REP', L_UDS-CLI-REP MODIFY;
L_PICK-DINAM     = ' ';
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'PICK-DINAM', L_PICK-DINAM MODIFY;
L_CAMBIAFORMEXP = 'N';
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'CAMBIA-FORM-EXPE',
                        L_CAMBIAFORMEXP MODIFY;
(*31-08-2006-WAT07-PICKING EN ALTURA + CONTROL DE CADUCIDAD EN PICKING*)
LOGIC-LIB-PAR-001 USING 'EXPEDICION','FILTRA-PICKING',L_FILTRA-PICKING MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION','SOLO-FIL-PICK',L_SOLO-FIL-PICK MODIFY;
(* DHLS09.13 Inicio de modificaciones *)
L_UBI-NP = ' ';
LOGIC-LIB-PAR-001 USING 'EXPEDICION'
                      , 'UBI-NP-ALTURA'
                      , L_UBI-NP MODIFY
;
EXEC SQL
   SELECT ALMUBICOD
     INTO :L_ALMUBINP
     FROM ALMPRV
    WHERE ALMUBIREF = :L_UBI-NP;
(* DHLS09.13 Fin de modificaciones *)
L_FEC = $EDIT($DATE,'DD/MM/YYYY');
L_CANTIDAD_AUX = L_CANTIDAD;
(*14/02/2007 EV inc. 10720 - se obtiene el tipo de la ubicacion origen*)
(*                           en la variable L_UBITIPORI.              *)
EXEC SQL
SELECT ACCTRA.UBIORICOD, ALMUBI.ALMCOD, ACCTRA.ARTCOD,
       ACCTRA.CAN, ACCCOL.COLSIGCOD, ACCCOL.ACCCOLCOD,
       ACCTRA.EXPORDCOD, ACCTRA.CANMOV, ALMUBI.UBITIP, ACCTRA.EXPORDLIN
  INTO :L_UBIORICOD, :L_ALMCOD, :L_ARTCOD, :L_CAN, :L_COLSIGCOD,
       :L_ACCCOLCOD, :L_EXPORDCOD, :L_CANMOV, :L_UBITIPORI, :L_EXPORDLIN
  FROM ACCTRA, ACCCOL, ALMUBI
 WHERE    ACCTRA.ACCCOD = :L_ACCCOD
   AND ACCTRA.UBIORICOD = ALMUBI.ALMUBICOD
   AND ACCTRA.ACCCOLCOD = ACCCOL.ACCCOLCOD;
DBG2
   'L_UBIORICOD ' + $STR(L_UBIORICOD) + ' TIPO ' + L_UBITIPORI;
(* INCIDENCIA LOR09: muestra acciones de ubicaciones sin stock *)
(* para pedidos REPXXXXX                                       *)
EXEC SQL
SELECT TERCOD
  INTO :L_TERCERO
  FROM EXPORDCAB
 WHERE EXPORDCOD = :L_EXPORDCOD;
EXEC SQL
SELECT TERCOD
  INTO :L_TERCOD
  FROM TER
 WHERE TERREF = :L_ALM-CLI-REP;
EXEC SQL
SELECT TERCOD
  INTO :L_TERCODUDS
  FROM TER
 WHERE TERREF = :L_UDS-CLI-REP;
L_ARTPRICOD    = 0;
L_STOMIN       = 0;
L_STOMAX       = 0;
L_DIAMINCADEXP = 0;
EXEC SQL
SELECT ARTPRICOD, CANPICMIN, CANPICMAX, UBIPICDIN, TERPROCOD,
       DIAMINCADEXP, ARTPROCTR, ARTREF, ROTTIP
  INTO :L_ARTPRICOD, :L_STOMIN, :L_STOMAX, :L_UBIPICDIN, :L_TERPROCOD,
       :L_DIAMINCADEXP, :L_ARTPROCTR, :L_ARTREF, :L_ROTTIP
  FROM ART,ARTALM
 WHERE    ART.ARTCOD = :L_ARTCOD
   AND ARTALM.ARTCOD = ART.ARTCOD
   AND ARTALM.ALMCOD = :L_ALMCOD;
(* JLM, 06/09/2006 Se mira si el articulo es de bobina para enviar en altura *)
L_BOBINA = 0;
LOGIC-LIB-ART-BOB USING L_ARTCOD, L_BOBINA MODIFY;
(*--------------------------------------------------------------------*)
(*31-08-2006-WAT07-PICKING EN ALTURA + CONTROL DE CADUCIDAD EN PICKING*)
(*--------------------------------------------------------------------*)
IF (L_FILTRA-PICKING = 'S' AND L_SOLO-FIL-PICK = 'N') OR L_BOBINA = 1 THEN
BEGIN
(*
  WAT07:
  Intentar servir primero por picking en altura, mercancia que este reservada
  para el tercero o para la orden de expedicion y que no estÅ caducada.
  No hay que tener en cuenta los dias minimos de expedicion. Solo la fecha de
  caducidad.
*)
   L_RESER_ALTO = 0; (*Flag que indica Mercancia Reservada en Alto 1/0*)
   L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
   IF L_CAMBIAFORMEXP[1:1] <> 'S' THEN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " WHERE X0.ARTCOD = " + $STR(L_ARTCOD);
   ELSE BEGIN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
      IF L_ARTPROCTR = 'S' THEN
         L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
   END;
   L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
              " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
              " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
              " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
              " AND ALMUBI.UBITIP IN ('RE','CM') " +
              " AND X0.ARTCOD = ART.ARTCOD " +
              " AND " +
              " ( " +
              " (X0.ASGRES = " + $STR(L_TERCERO) +
              " OR X0.ASGRESOEX = " + $STR(L_EXPORDCOD) + ")" +
              " AND ((ART.ROTTIP = 'FC' AND " +
              "  FECCAD > LTR_TO_DATE('" +  L_FEC +
              "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC')" +
              " ) " +
              " AND (NDOSIT = 'OK' OR NDOSIT = 'NPIC') " +
              " AND UBISIT || '' = 'OK' " +
              " AND UBIEST = 'LL' " +
              " AND EXPORDCOD + 0= 0 ";(*Mirar cabecera deUBC-ALM-001*)
   L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
              ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
              "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
   DBG2
      L_CLAUSE;
   SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
   FOR CNTNDO SELECTED ITERATIONS(1) DO
      L_RESER_ALTO = 1;
   DBG2
      '¹Mercancia reservada en alto para OEX o Tercero (0/1)?' +
      $STR(L_RESER_ALTO);
   IF L_RESER_ALTO THEN BEGIN
      DBG2
        'L_ACCCOD ' + $STR(L_ACCCOD);
      DBG2
        'L_ARTCOD ' + $STR(L_ARTCOD);
      DBG2
        'L_TERCERO ' + $STR(L_TERCERO);
      DBG2
        'L_CANTIDAD ' + $STR(L_CAN) + ' --->RETURN';
      L_CANTIDAD = L_CAN;
      L_MOSTRAR = 1;
      RETURN;
   END;
   (*EV: 14/02/2007, INC. 10720. Si esta activado el picking en altura y     *)
   (*en la ubicacion origen de la accion de picking hay grabada una ubicacion*)
   (*de tipo  RE  , es porque anteriormente se cayÆ la sesion una vez        *)
   (*grabada en la accion la ubicacion de altura -tipo RE-. En este caso,    *)
   (*hacer un RETURN en este punto, porque no hay que realizar ningÇn        *)
   (*analisis de los que se hacen a continuaciÆn, ya que se podrÕan generar  *)
   (*reposiciones de ubicaciones tipo RE a la ubicacion de la accion, que    *)
   (*en este caso tambien es tipo RE.                                        *)
   IF L_UBITIPORI <> 'PI' THEN BEGIN
      DBG2
        'Ubicacion origen no es tipo PI, ----> RETURN';
      RETURN;
   END;
END; (*IF L_FILTRA-PICKING*)
(*--------------------------------------------------------------------*)
(*31-08-2006-WAT07- FIN PICKING EN ALTURA + CONTROL DE CADUCIDAD EN PICKING*)
(*--------------------------------------------------------------------*)
(* RS 02/01/2008 - Incidencia 15895 *)
(* INICIO MODIFICACION DHS09.13 *)
IF (L_ROTTIP = 'FC' OR L_UBIORICOD = L_ALMUBINP)
   AND L_FILTRA-PICKING = 'S' THEN BEGIN
(* FIN MODIFICACION DHS09.13 *)
   CALLSUB "OEX-DIA-EXP" USING L_ARTCOD,
                               L_TERCERO,
                               L_EXPORDCOD,
                               L_EXPORDLIN,
                               L_DIAMINCADEXP MODIFY,
                               L_DIAMAXCADEXP MODIFY;
   (* Se obtiene la menor fecha de caducidad de la ubicacion de picking.  *)
   (* Se busca en altura un contenido disponible con fecha de caducidad   *)
   (* aceptable, menor que la de la ubicacion de picking.                 *)
   (* Si se encuentra, se sirve por picking en altura.                    *)
   DBG2
      'Control caducidad en picking + pciking en altura';
   L_CAD_MENOR = 0; (* flag que indica Caducidad Menor en Altura 1/0 *)
   L_HOY = $EDIT($DATE,'DD/MM/YYYY');
   DBG2
      'L_UBIORICOD ' + $STR(L_UBIORICOD);
   DBG2
      'L_ARTCOD ' + $STR(L_ARTCOD);
   IF L_CAMBIAFORMEXP[1] <> 'S' THEN BEGIN
      EXEC SQL
      SELECT MIN(FECCAD)
        INTO :L_FECCAD
        FROM CNTNDO, ALMUBI
       WHERE ALMUBICOD = :L_UBIORICOD
         AND CNTEXTCOD = ALMUBI.CNTCOD
         AND ARTCOD    = :L_ARTCOD;
   END;
   ELSE BEGIN
      EXEC SQL
      SELECT MIN(FECCAD)
        INTO :L_FECCAD
        FROM CNTNDO, ALMUBI
       WHERE ALMUBICOD = :L_UBIORICOD
         AND CNTEXTCOD = ALMUBI.CNTCOD
         AND ARTCOD IN (SELECT ARTCOD FROM ART WHERE ARTPRICOD = :L_ARTPRICOD);
   END;
   IF $NULL(L_FECCAD) THEN BEGIN
      DBG2
         'No hay contenido con FECCAD en picking';
      L_CAD_MENOR = 0;
   END;
   ELSE IF GV_CLIENTE <> 'watt' THEN BEGIN
      L_FECCAD_PICK = $EDIT(L_FECCAD,'DD/MM/YYYY');
      DBG2 'FECCAD en picking ' + L_FECCAD_PICK;
      L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
      IF L_CAMBIAFORMEXP[1] <> 'S' THEN
         L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " WHERE X0.ARTCOD = " + $STR(L_ARTCOD);
      ELSE BEGIN
         L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
         IF L_ARTPROCTR = 'S' THEN
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
      END;
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                 " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                 " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                 " AND ALMUBI.UBITIP IN ('RE','CM') " +
                 " AND X0.ARTCOD = ART.ARTCOD " +
                 " AND ART.ROTTIP = 'FC' AND " +
                 " FECCAD - " + $STR(L_DIAMINCADEXP) +
                 " > LTR_TO_DATE('" +  L_HOY +
                 "','DD/MM/YYYY') AND FECCAD " +
                 " < LTR_TO_DATE('" +  L_FECCAD_PICK +
                 "','DD/MM/YYYY') " +
                 " AND ((FECCAD - " + $STR(L_DIAMAXCADEXP) +
                 " <= LTR_TO_DATE('" +  L_HOY +
                 "','DD/MM/YYYY') AND " + $STR(L_DIAMAXCADEXP) + " <> 0) " +
                 " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " +
                 " AND X0.ASGRES = 0 " +
                 " AND (NDOSIT = 'OK' OR NDOSIT = 'NPIC') " +
                 " AND UBISIT || '' = 'OK' " +
                 " AND UBIEST = 'LL' " +
                 " AND EXPORDCOD + 0 = 0 ";
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                 ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
            "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
      DBG2
         L_CLAUSE[1:600];
      DBG2
         L_CLAUSE[601:1200];
      SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
      FOR CNTNDO SELECTED ITERATIONS(1) DO
         L_CAD_MENOR = 1;
   END; (* ELSE DE IF $NULL L_FECCAD_PICK *)
   DBG2 '¹Mercancia en alto con caducidad menor a la del picking (0/1)?' +
        $STR(L_CAD_MENOR);
   IF L_CAD_MENOR AND L_SOLO-FIL-PICK = 'N' THEN BEGIN
      L_CANTIDAD = L_CAN;
      L_MOSTRAR = 1;
      RETURN;
   END;
   ELSE
      L_CAD_MENOR = 0;
   IF NOT L_CAD_MENOR THEN BEGIN
      DBG2
         'Control de caducidad aceptable en picking';
      L_CAD_ACEPTABLE = 0;
      L_CLAUSE = ", ALMUBI " +
                 " WHERE ALMUBICOD = " + $STR(L_UBIORICOD) +
                 " AND CNTEXTCOD = ALMUBI.CNTCOD "       +
                 " AND ARTCOD    = " + $STR(L_ARTCOD)   +
                 " AND (FECCAD - " + $STR(L_DIAMINCADEXP)+ ")" +
                 " > LTR_TO_DATE('" +  L_HOY + "','DD/MM/YYYY')" +
                 " AND ((" + $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                 "  FECCAD - " + $STR(L_DIAMAXCADEXP) +
                 " <= LTR_TO_DATE('" +  L_HOY +
                 "','DD/MM/YYYY')) OR " + $STR(L_DIAMAXCADEXP) + " = 0)";
      DBG2 L_CLAUSE;
      SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
      FOR CNTNDO SELECTED DO
         L_CAD_ACEPTABLE = 1;
      DBG2
         '¹Cad. aceptable en picking? 1/0 :' + $STR(L_CAD_ACEPTABLE);
      (* Si cliente es WATT, y L_CAD_ACEPTABLE = 0, hay que mirar si es   *)
      (* poque no hay stock en picking. Si no hay stock en picking y hay  *)
      (* reposicion generada, no se debe enviar a altura.                 *)
      IF GV_CLIENTE = 'watt' AND NOT L_CAD_ACEPTABLE THEN BEGIN
         L_CANTEORICA = 0; (* stock en picking del articulo *)
         EXEC SQL
         SELECT SUM(CNTNDO.CANUNI)
           INTO :L_CANTEORICA
           FROM ALMUBI, CNTNDO
          WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
            AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
            AND CNTNDO.ARTCOD    = :L_ARTCOD;
         L_CANTEORICA = $NVL(L_CANTEORICA,0);
(* INICIO MODIFICACION DHS09.13 *)
         IF NOT L_CANTEORICA AND L_UBIORICOD <> L_ALMUBINP THEN BEGIN
(* FIN MODIFICACION DHS09.13 *)
            DBG2
               'No hay stock en picking';
            (* Si hay mercancia para reponer con caducidad aceptable se *)
            (* debe mostrar                                             *)
            L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
            IF L_CAMBIAFORMEXP[1] <> 'S' THEN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE X0.ARTCOD = " + $STR(L_ARTCOD);
            ELSE BEGIN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
               IF L_ARTPROCTR = 'S' THEN
                  L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                             " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
            END;
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                       " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                       " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                       " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                       " AND ALMUBI.UBITIP IN ('RE','CM') " +
                       " AND X0.ARTCOD = ART.ARTCOD " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                       " FECCAD - " + $STR(L_DIAMINCADEXP) +
                       " > LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC') " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                         $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                       " FECCAD - " + $STR(L_DIAMAXCADEXP) +
                       " <= LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC'" +
                       " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " +
                       " AND X0.ASGRES = 0 " +
                       " AND NDOSIT = 'ASPI' " +
                       " AND UBISIT || '' = 'OK' " +
                       " AND UBIEST = 'LL' " +
                       " AND EXPORDCOD + 0= 0 ";
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                      ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
           "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
            DBG2
               L_CLAUSE;
            SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
            FOR CNTNDO SELECTED ITERATIONS(1) DO
               L_CAD_ACEPTABLE = 1;
            DBG2 'L_CAD_ACEPTABLE pasa a valer 1 al haber reposicion';
            IF L_CAD_ACEPTABLE THEN BEGIN
               L_MOSTRAR = 1;
               L_CANTIDAD = L_CAN;
               RETURN;
            END;
         END; (* IF NOT L_CANTEORICA *)
      END; (* IF CLIENTE = WATT *)
      IF NOT L_CAD_ACEPTABLE THEN BEGIN
         (* Si el picking no tiene caducidad aceptable:                   *)
         (* - Si SOLO-FIL-PICK = N, se intenta servir por altura.         *)
         (* - Si SOLO-FIL-PICK = S o si SOLO-FIL-PIC=N y no hay en altura,*)
         (*   se mira si hay una reposicion pendiente con caducidad acept.*)
         (*   Si hay repo pendiente se da como caducidad aceptable.       *)
         L_PIC-ALTURA = 0;
         IF L_SOLO-FIL-PICK = 'N' THEN BEGIN
            L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
            IF L_CAMBIAFORMEXP[1] <> 'S' THEN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE X0.ARTCOD = " + $STR(L_ARTCOD);
            ELSE BEGIN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
               IF L_ARTPROCTR = 'S' THEN
                  L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
            END;
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                       " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                       " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                       " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                       " AND ALMUBI.UBITIP IN ('RE','CM') " +
                       " AND X0.ARTCOD = ART.ARTCOD " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                       " FECCAD - " + $STR(L_DIAMINCADEXP) +
                       " > LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC') " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                         $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                       " FECCAD - " + $STR(L_DIAMAXCADEXP) +
                       " <= LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC'" +
                       " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " +
                       " AND X0.ASGRES = 0 " +
                       " AND NDOSIT = 'OK' " +
                       " AND UBISIT || '' = 'OK' " +
                       " AND UBIEST = 'LL' " +
                       " AND EXPORDCOD + 0 = 0 ";
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                       ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
              "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
            DBG2
               L_CLAUSE[1:600];
            DBG2
               L_CLAUSE[601:1200];
            SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
            FOR CNTNDO SELECTED ITERATIONS(1) DO
               L_PIC-ALTURA = 1;
         END; (* IF L_SOLO-FIL-PICK *)
         DBG2 '¹Hacer picking en altura ? L_PIC-ALTURA 1/0:'
              + $STR(L_PIC-ALTURA);
         IF L_PIC-ALTURA THEN BEGIN
            L_MOSTRAR = 1;
            L_CANTIDAD = L_CAN;
            RETURN;
         END;
         ELSE BEGIN
            (* Si hay mercancia para reponer con caducidad aceptable, se *)
            (* debe mostrar la accion. Si no, no se debe mostrar.        *)
            L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
            IF L_CAMBIAFORMEXP[1] <> 'S' THEN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE X0.ARTCOD = " + $STR(L_ARTCOD);
            ELSE BEGIN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
               IF L_ARTPROCTR = 'S' THEN
                  L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                             " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
            END;
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                       " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                       " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                       " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                       " AND ALMUBI.UBITIP IN ('RE','CM') " +
                       " AND X0.ARTCOD = ART.ARTCOD " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                       " FECCAD - " + $STR(L_DIAMINCADEXP) +
                       " > LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC') " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                         $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                       " FECCAD - " + $STR(L_DIAMAXCADEXP) +
                       " <= LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC'" +
                       " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " +
                       " AND X0.ASGRES = 0 " +
                       " AND NDOSIT = 'ASPI' " +
                       " AND UBISIT || '' = 'OK' " +
                       " AND UBIEST = 'LL' " +
                       " AND EXPORDCOD + 0= 0 ";
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                      ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
           "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
           DBG2
              L_CLAUSE;
            SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
            FOR CNTNDO SELECTED ITERATIONS(1) DO
               L_CAD_ACEPTABLE = 1;
            DBG2
               'Hay reposicion? 1/0 : ' + $STR(L_CAD_ACEPTABLE);
            IF L_CAD_ACEPTABLE THEN BEGIN
               L_MOSTRAR = 1;
               L_CANTIDAD = L_CAN;
               RETURN;
            END;
            ELSE BEGIN
               L_ESTCOD = 0;
               IF L_ESPERA-MER-MUE = 'S' THEN BEGIN
                  L_MEZCLA = 0;
                  IF L_CAMBIAFORMEXP[1] = 'S' THEN
                     L_MEZCLA = 1;
                  DBG2
                     'Analisis mercancia en muelle';
                  LOGIC-UBC-MUE-001 USING L_MEZCLA,
                                          L_ALMCOD,
                                          L_ARTCOD,
                                          L_ESTCOD MODIFY,
                                          L_TERCERO,
                                          L_EXPORDCOD,
                                          L_DIAMINCADEXP,
                                          L_DIAMAXCADEXP;
               END; (*IF L_ESPERA-MER-MUE*)
               DBG2
                  'L_ESTCOD ' +$STR(L_ESTCOD);
               IF L_ESTCOD THEN BEGIN
                  L_CANTIDAD = L_CAN;
                  L_MOSTRAR = 1;
                  RETURN;
               END;
               ELSE BEGIN
                  L_MOSTRAR = 0;
                  RETURN;
               END;
            END; (*ELSE IF L_CAD_ACEPTABLE *)
         END; (* ELSE IF L_PIC-ALTURA*)
      END; (* IF NOT L_CAD_ACEPTABLE *)
   END; (*IF NOT L_CAD_MENOR*)
END; (* IF L_ROTTIP = 'FC' AND L_FILTRA-PICKING = 'S' *)
IF L_PICK_SIMULT = 0 THEN BEGIN
   L_MOSTRAR = 0;
   L_ARTCODHAY = 0;
   L_CANHAY = 0;
   (* RS 19/09/02 Por si hay gestion de criterio de rotacion en picking, se  *)
   (* debe calcular la suma de los contenidos del contenedor para un articulo*)
   (* RS 24/06/2005 Se elimina la tabla ART de la select *)
   EXEC SQL
   SELECT CNTNDO.ARTCOD, SUM(CNTNDO.CANUNI)
     INTO :L_ARTCODHAY, :L_CANHAY
     FROM ALMUBI, CNTNDO
    WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
      AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
      AND CNTNDO.NDOSIT    = 'OK'
      AND CNTNDO.ARTCOD    = :L_ARTCOD   (* buscamos 1 con el articulo *)
    GROUP BY CNTNDO.ARTCOD;
   IF $NULL(L_CANHAY) THEN
      L_CANHAY = 0;
   IF NOT L_CANHAY AND L_CAMBIAFORMEXP = 'S' THEN BEGIN
      EXEC SQL
      SELECT CNTNDO.ARTCOD, SUM(CNTNDO.CANUNI)
        INTO :L_ARTCODHAY, :L_CANHAY
        FROM ALMUBI, CNTNDO, ART
       WHERE ALMUBI.ALMUBICOD = :L_UBIORICOD
         AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
         AND CNTNDO.NDOSIT    = 'OK'
         AND ART.ARTCOD       = CNTNDO.ARTCOD
         AND ART.ARTPRICOD    = :L_ARTPRICOD  (* busc 2 con el principal*)
         AND ((ART.ARTPROCTR = 'S' AND ART.TERPROCOD = :L_TERPROCOD)
                  OR ART.ARTPROCTR <> 'S')
       GROUP BY CNTNDO.ARTCOD;
      L_CANHAY = $NVL(L_CANHAY,0);
   END;
   (* RS 23/09/03 Hay que tener en cuenta las acciones iniciadas por si hay *)
   (* concurrencia de operarios                                             *)
   IF L_CANHAY > 0 THEN BEGIN
      EXEC SQL
      SELECT SUM(CAN)
        INTO :L_ACCS_IN
        FROM ACCTRA
       WHERE UBIORICOD = :L_UBIORICOD
         AND    ACCEST = 'IN'
         AND    ARTCOD = :L_ARTCOD
         AND ACCTIPTAR = 'PISU'
         AND    ACCCOD <> :L_ACCCOD;
      L_ACCS_IN = $NVL(L_ACCS_IN,0);
      DBG2
        'Hay en ubicacion ' + $STR(L_CANHAY);
      DBG2
        'Hay en en acciones iniciadas ' + $STR(L_ACCS_IN);
      (* Las cantidad de las acciones iniciadas debe ser la que muestra en *)
      (* pantalla al operario, no la que lleva en la accion, por eso si la *)
      (* suma supera a lo que hay en la ubicacion, se considera esta como  *)
      (* la mostrada.                                                      *)
      IF L_CANHAY <= L_ACCS_IN THEN
         L_ACCS_IN = L_CANHAY;
      L_CANHAY = L_CANHAY - L_ACCS_IN;
   END;
   IF L_CANHAY > 0 THEN
      L_MOSTRAR = 1;
   ELSE BEGIN
      IF L_SEGUNDA THEN BEGIN
         DBG2
           'Hay stock en almancen?';
         (* Si estamos en segunda vuelta y hay stock en el almacen se muestra *)
         (* la accion para que el operario espere la reposicion.              *)
         L_HAYSTOCK = 0;
         (* RS 31/01/2007 - Incidencia 10558 *)
         L_CLAUSE = ", ALMUBI, ART";
         IF L_CAMBIAFORMEXP = 'S' THEN
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                     " WHERE ART.ARTPRICOD = " + $STR(L_ARTPRICOD) +
                     " AND X0.ARTCOD = ART.ARTCOD" +
                     " AND ((ART.ARTPROCTR = 'S'" +
                     " AND ART.TERPROCOD = " + $STR(L_TERPROCOD) + ")" +
                     " OR ART.ARTPROCTR <> 'S')";
         ELSE
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                     " WHERE ART.ARTCOD = " + $STR(L_ARTCOD) +
                     " AND   X0.ARTCOD = ART.ARTCOD";
         L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " AND X0.CNTEXTCOD = ALMUBI.CNTCOD"         +
                    " AND X0.CANUNI > 0"                        +
                    " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD)    +
                    " AND (( ART.ROTTIP = 'FC' "                +
                    " AND FECCAD - " + $STR(L_DIAMINCADEXP)     +
                    " > LTR_TO_DATE('" +  L_FEC                 +
                    "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC') "  +
                    " AND ((ALMUBI.UBITIP IN ('RE','CM')"       +
                    " AND UBIEST = 'LL'"                        +
                    " AND UBISIT || '' = 'OK'"                       +
                    " AND (X0.NDOSIT = 'OK' OR X0.NDOSIT = 'ASPI'))" +
                    " OR (ALMUBI.UBITIP = 'PR' AND NDOSIT = 'ASPI'))" +
                    " AND EXPORDCOD + 0 = 0                   ";
         DBG2
           'L_CLAUSE ' + $STR(L_CLAUSE);
         SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
         FOR CNTNDO SELECTED DO BEGIN
            (* RS 05/12/2007 - Incidencia 15401 *)
            IF NDOSIT = 'ASPI' AND L_UBIPICDIN = 'C' THEN BEGIN
               (* Obtengo la ubicacion destino de la reposicion para *)
               (* ponersela a la accion                              *)
               L_NEWUBIORICOD = 0;
               EXEC SQL
               SELECT UBIDESCOD
                 INTO :L_NEWUBIORICOD
                 FROM ACCTRA
                WHERE ARTCOD = :ARTCOD
                  AND ACCTIPTAR = 'RE'
                  AND ACCEST <> 'CO';
               DBG4
                  'L_NEWUBIORICOD ' + $STR(L_NEWUBIORICOD);
               IF L_NEWUBIORICOD THEN
                  EXEC SQL
                  UPDATE ACCTRA SET UBIORICOD = :L_NEWUBIORICOD
                   WHERE ACCCOD = :L_ACCCOD;
            END; (* IF NDOSIT = 'ASPI' *)
            L_HAYSTOCK = 1;
            BREAK;
         END;
         IF L_HAYSTOCK THEN
            L_MOSTRAR = 1;
         ELSE BEGIN
            IF L_ESPERA-MER-MUE = 'S' THEN BEGIN
               (* modificacion EMA: 04/09/01 se busca si hay stock en *)
               (* ubicaciones tipo proceso con contenido OK para poder*)
               (* servir el resto del ped.                            *)
               DBG2
                 'Entra por la busqueda de contenedores en muelle';
               DBG2
                 'L_CANTIDAD ' + $STR(L_CANTIDAD);
               DBG2
                 'L_HAYSTOCK ' + $STR(L_HAYSTOCK);
               L_ESTREF = '';
               L_ESTCOD = 0;
               L_MEZCLA = 1;
               LOGIC-UBC-MUE-001 USING L_MEZCLA,
                                       L_ALMCOD,
                                       L_ARTCOD,
                                       L_ESTCOD MODIFY;
               IF L_ESTCOD <> 0 THEN
                  L_MOSTRAR = 1;
            END;
            (* incidencia LOR09, se compara el tercero de la expedicion   *)
            (* con el tercero de los parametros UDS-CLI-REP y ALM-CLI-REP *)
            (* antes no se hacia.                                         *)
            IF L_ESPERA-REP-ALM = 'S' AND L_TERCERO <> L_TERCOD  AND
               L_TERCERO <> L_TERCODUDS AND L_MOSTRAR = 0 THEN BEGIN
               DBG2
                 'Entra por la busqueda de contenedores en otro almacen';
               L_ALMCODREL = 0;
               EXEC SQL
                  SELECT ALMCODREL
                    INTO :L_ALMCODREL
                    FROM ALMREL
                   WHERE ALMCOD = :L_ALMCOD
                     AND TIPREL = 'EXRE';
               L_HAY = 0;
               IF L_ALMCODREL <> 0 THEN
                  LOGIC-UBC-ARL-001 USING L_ALMCODREL, L_ARTCOD, L_HAY MODIFY;
               IF L_HAY THEN
                  L_MOSTRAR = 1;
            END;
            (* incidencia LOR09, se compara el tercero de la expedicion   *)
            (* con el tercero de los parametros UDS-CLI-REP y ALM-CLI-REP *)
            (* antes no se hacia.                                         *)
            IF L_MENSAJ-OTRO-FO = 'S' AND L_TERCERO <> L_TERCOD  AND
               L_TERCERO <> L_TERCODUDS AND L_MOSTRAR = 0 THEN BEGIN
               DBG2
                 'Entra por la busqueda de contenedores de otro formato';
               L_HAYPIC = 0;
               LOGIC-UBC-PIC-001 USING L_ALMCOD, L_ARTPRICOD, L_HAYPIC MODIFY;
               IF L_HAYPIC THEN
                  L_MOSTRAR = 1;
            END;
         END;
      END;
   END;
   DBG2
     'L_HAYSTOCK ' + $STR(L_HAYSTOCK) + ' MOSTRAR ' + $STR(L_MOSTRAR);
   DBG2
     'La accion pide   ' + $STR(L_CAN);
   DBG2
     'Hay en ubicacion ' + $STR(L_CANHAY);
   IF L_MOSTRAR THEN BEGIN
      IF L_CANHAY < L_CAN AND NOT L_SEGUNDA THEN BEGIN
         DBG2
           'Primera vuelta y no hay suficiente en la ubic.';
         DBG2
           'Se pide lo que hay en la ubicacion';
         L_CANTIDAD = L_CANHAY;
      END;
      ELSE BEGIN
         IF L_SEGUNDA THEN
            DBG2
              'Segunda Vuelta';
         IF L_SEGUNDA AND L_PICK-DINAM[1]='S' AND L_UBIPICDIN='C' AND
            L_CANHAY < L_CAN AND L_CANHAY > 0 THEN BEGIN     (*EV*)
            (* En vista de que Så se generan segundas vueltas para el    *)
            (* caotico, hay que considerar la posibilidad de que no haya *)
            (* llegado la reposiciÆn, por lo que el operario tendra que  *)
            (* esperar  EMA 16/06/2005                                   *)
            (*En este caso se muestra lo que hay en la ubicacion, ya que *)
            (*se va a intentar generar otra accion de picking en otra    *)
            (*ubicaciÆn por ser UBIPICDIN=C -Cambio dinamico de la ubicac*)
            (*de picking ................................................*)
            DBG2
              'PICK-DINAM=S Y UBIPICDIN=C --cambio dinamico--';
            DBG2
              'Se pide lo que hay en la ubicacion';
            L_CANTIDAD = L_CANHAY;
         END;
         ELSE BEGIN
            DBG2
              'Se pide el total de la accion';
            L_CANTIDAD = L_CAN;
         END;
      END;
      IF L_ARTCODHAY <> 0 AND L_ARTCODHAY <> L_ARTCOD THEN BEGIN
         L_CAMBIARART = 1;
      END;
   END;
END;
L_ESPICKUDS = 0;  (* SI PICKING UDS, NO GENERAR REPO *)
LOGIC-LIB-PAR-001 USING 'INSTALACION',
                        'PICKING-UDS',
                        L_PICKUDS MODIFY;
EXEC SQL
   SELECT UNIEXP
     INTO :L_UNIEXP
     FROM ART
    WHERE ARTCOD = :L_ARTCOD;
IF L_PICKUDS = 'S' AND L_UNIEXP = 'UD' THEN
   L_ESPICKUDS = 1;
DBG2
  'Stock Minimo ' + $STR(L_STOMIN);
L_CAN_AUX = L_CANHAY - L_CAN;
DBG2
  'Hay en ubicacion - dara la accion ' + $STR(L_CAN_AUX);
EXEC SQL
   SELECT ARTREF
     INTO :L_ARTREF
     FROM ART
    WHERE ARTCOD = :L_ARTCOD;
DBG2
  'L_PICK-DINAM ' + L_PICK-DINAM[1] + ' L_UBIPICDIN ' + L_UBIPICDIN;
(* Si el stock queda por debajo del minimo, generamos una orden de reposicion *)
IF L_CAN_AUX <= L_STOMIN AND NOT L_ESPICKUDS THEN BEGIN
   L_ARTREP = L_ARTCOD;
   DBG2
     'Stock queda debajo del minimo para ARTREF ' + L_ARTREF;
   IF (L_PICK-DINAM[1] =  'S' AND L_UBIPICDIN = 'C' AND L_CAN >= L_CANHAY) OR
       L_PICK-DINAM[1] <> 'S' OR  L_UBIPICDIN <> 'C'
      THEN BEGIN
      (* Si estamos en Picking dinÄmico solo generaremos reposicion cuando *)
      (* se agote el Stock totalmente                                      *)
      DBG2
        'Ordenamos reposiciÆn para ' + L_ARTREF;
      DBG2
        'Pasamos a UBC-REP-001 UBIC ' +$STR(L_UBIORICOD);
      L_UBIORICOD_AUX = L_UBIORICOD;
      LOGIC-UBC-REP-001 USING L_ALMCOD,
                              L_ARTREP MODIFY,
                              L_UBIORICOD MODIFY,
                              L_GENERA MODIFY,
                              L_HAYREPOSICION MODIFY,
                              L_PREPAR_ESPERA,
                              L_ACCCOD,
                              'GE';
      DBG2
        'Devuelve UBC-REP-001 UBIC ' +$STR(L_UBIORICOD);
      (* V2ar *)
      L_ACCREP = 0;
      EXEC SQL
         SELECT ACCCOD
           INTO :L_ACCREP
           FROM CNTNDO,ACCTRA
          WHERE UBIDESCOD = :L_UBIORICOD
            AND ACCTIPTAR = 'RE'
            AND CNTNDO.CNTEXTCOD = ACCTRA.CNTCOD
            AND CNTNDO.ARTCOD = :L_ARTREP;
      IF L_ACCREP <> 0 AND L_AUTOREP = 1 THEN BEGIN
         DBG2
           'Hay reposicion y el Rec. es autoreponedor';
         SELECT * FROM RECMAQ WHERE RECMAQCOD = GV_RECMAQCOD;
         FOR RECMAQ SELECTED DO BEGIN
            IF MOVHOR <> ' ' THEN
               L_MOVHORMAQ = '%-' + MOVHOR + '%';
            L_MOVVERMAQ = MOVVER;
            L_ANCOPEMAQ = ANCOPE;
         END;
         L_MOVVERMAQCAR = $EDIT(L_MOVVERMAQ,'ZZ9.99');
         L_ANCOPEMAQCAR = $EDIT(L_ANCOPEMAQ,'ZZ9.99');
         L_MOVVERMAQCAR[4] = ".";
         L_ANCOPEMAQCAR[4] = ".";
         L_ENTRO = 0;
         L_CLAUSE = " WHERE RECMAQCOD = 0 " +
                    " AND ZONAOK = 1 " +
                    " AND MOVVER <= " + L_MOVVERMAQCAR +
                    " AND ANCOPE >= " + L_ANCOPEMAQCAR +
                    " AND ACCRELCOD = 0 " +
                    " AND ACCCOD = " + $STR(L_ACCREP) +
                    " AND ACTRECMAQ = " + $STR(GV_RECMAQCOD) ;
         DBG2
           L_CLAUSE;
         SELECT * FROM W_ACCTRAPRI SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
         FOR W_ACCTRAPRI SELECTED DO BEGIN
            L_ENTRO = 1;
            (* RS 31/01/2007 - Incidencia 10560 *)
            L_SALIR = 0;
            LOGIC-RFL-TRA-002 USING L_ACCREP, L_SALIR MODIFY;
            DBG2
              'Controlo la autoreposicion L_SALIR ' + $STR(L_SALIR);
            IF NOT L_SALIR THEN
               L_CANTIDAD = L_CANTIDAD_AUX;
            ELSE
               L_ENTRO = 0;
         END;
         DBG2
           'Puede hacer la Rep. ' + $STR(L_ENTRO);
         IF L_ENTRO = 1 THEN
            RETURN;
      END;
      SELECT * FROM ACCTRA WHERE ACCEST = 'GE'
                          AND ACCTIPTAR = 'RE'
                             AND ARTCOD = L_ARTREP;
      FOR ACCTRA SELECTED DO BEGIN
         DBG2
           'Cambio estado a PD a la accion ' + $STR(ACCCOD);
         ACCEST = 'PD';
      END;
      (* V2ar *)
      IF L_UBIORICOD <> L_UBIORICOD_AUX THEN BEGIN
         L_TIENESTOCK = 0;
         EXEC SQL
            SELECT 1
              INTO :L_TIENESTOCK
              FROM CNTNDO, ALMUBI
             WHERE CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
               AND ALMUBI.ALMUBICOD = :L_UBIORICOD
               AND CNTNDO.CANUNI    > 0
               AND ALMUBI.ALMCOD    = :L_ALMCOD
               AND ALMUBI.UBITIP    = 'PI'
               AND CNTNDO.NDOSIT    = 'OK';
         IF L_TIENESTOCK = 1 THEN BEGIN
            DBG2
              'La nueva ubicaciÆn de Picking tiene Stock';
         END;
         (* Si estamos en situaciÆn de Cambio dinÄmico de ubicaciÆn de    *)
         (* Picking, aunque estemos en segunda vuelta, si la nueva        *)
         (* ubicaciÆn de Picking tiene stock generamos acciÆn para evitar *)
         (* faltas. En la accion en curso se mostrara que coja lo que hay *)
         (* en la ubicaciÆn y el resto se deja a la nueva accion          *)
         (* Antes IF L_MOSTRAR AND NOT L_GENERA AND L_TIENESTOCK AND      *)
         (* Pongo dos nuevos dbg's ya que creo que despuÅs de actualizar  *)
         (* la ubicaciÆn de picking al artÕculo de picking caotico, no se *)
         (* estÄ actualizando esta cantidad, lo que supone que siempre    *)
         (* tengamos L_CANHAY DE LA PRIMERA UBICACION DE DONDE SE INTENTO *)
         (* PREPARAR. EMA 17/03/2005                                      *)
         DBG2
           'L_GENERA ' + $STR(L_GENERA);
         DBG2
           'L_TIENESTOCK ' + $STR(L_TIENESTOCK);
         DBG2
           'L_CANHAY ' + $STR(L_CANHAY);
         DBG2
           'L_UBIORICOD ' + $STR(L_UBIORICOD);
         IF NOT L_GENERA AND L_TIENESTOCK AND L_PICK-DINAM[1] = 'S' AND
            L_UBIPICDIN = 'C' AND NOT L_ESPICKUDS THEN BEGIN
            L_NORESTA = 0;
            IF L_CANHAY < L_CAN THEN BEGIN
               DBG2
                 'P_NORESTA a 1';
               L_NORESTA   = 1;
               L_CANTIDAD  = L_CANHAY;
               L_COLSIGCOD = L_ACCCOLCOD;  (* Para que cree accion en la cola *)
            END;                           (* en curso                        *)
         END;
      END; (* IF L_UBIORICOD <> L_UBIORICOD_AUX *)
      IF L_SEGUNDA AND L_MOSTRAR AND L_CANHAY = 0 THEN BEGIN
         L_CAMBIARART = 1;
         L_ARTCODHAY = L_ARTREP;
      END;
   END; (* L_PICK-DINAM[1] =  'S' AND L_UBIPICDIN = 'C' AND.....*)
END; (* IF L_CAN_AUX <= L_STOMIN *)
IF L_ESPICKUDS THEN BEGIN
   (* Se llama a la rutina que analiza si hay que generar reposiciones *)
   (* al picking de unidades                                           *)
    LOGIC-GAC-UDS-001 USING 0, L_ALMCOD, L_ARTCOD,
                            L_CANHAY, L_CAN, L_STOMIN, L_STOMAX;
END; (* IF L_ESPICKUDS *)
IF L_PICK-DINAM[1] = 'S' AND L_UBIPICDIN = 'C' AND NOT L_ESPICKUDS THEN BEGIN
   (* Si hay alguna ubicacion de Picking, que aparezca llena pero no tenga    *)
   (* contenido asociado, no sea Picking de ningun artÕculo, ni tenga acciones*)
   (* pendientes sobre ella, la ponemos 'VA' (vacia) porque es la ubicaciÆn   *)
   (* original de Picking de algÇn artÕculo de camb dinam de Pic y debe quedar*)
   (* libre para su uso                                                       *)
   DBG2
     'Evaluamos si hay ubicaciones que liberar';
   LOGIC-VAC-PIC-DIN USING L_UBIORICOD_AUX
                         , L_ACCCOD
   ;
   (* JLM, 21/12/2006 Se mira tambien la ubicacion nueva por si no genera *)
   (* Reposicion ni tiene stock *)
   (* JLM, 12/03/2007 *)
   IF L_UBIORICOD_AUX <> L_UBIORICOD THEN
      LOGIC-VAC-PIC-DIN USING L_UBIORICOD
                            , 0
      ;
#NOTE
   TRANSACTION "UBI_INUTIL" DO BEGIN
      SELECT * FROM V_UBI_INUTIL WITH L_UBIORICOD = L_UBIORICOD_AUX;
      FOR V_UBI_INUTIL SELECTED DO BEGIN
         L_ALMUBICOD_AUX = V_UBI_INUTIL.ALMUBICOD;
         EXEC SQL
            UPDATE ALMUBI SET ALMUBI.UBIEST = 'VA',
                              ALMUBI.CNTCOD = 0
             WHERE ALMUBICOD = :L_ALMUBICOD_AUX;
         EXEC SQL
            SELECT ALMUBIREF
              INTO :L_ALMUBIREF
              FROM ALMPRV
             WHERE ALMPRV.ALMUBICOD = :L_ALMUBICOD_AUX;
         DBG2
           'UbicaciÆn ' + L_ALMUBIREF  + ' esta LL y no es de nadie';
         DBG2
           'Liberada para su uso.';
      END; (* FOR V_UBI_INUTIL *)
   END; (*TRANSACTION*)
#ENDNOTE
END; (* IF L_PICK-DINAM[1] = 'S' AND L_UBIPICDIN = 'C' *)
(* Si es necesario generar una accion en la cola de segunda vuelta *)
(* Si estamos en situaciÆn de Cambio dinÄmico de ubicaciÆn de Picking, aunque *)
(* estemos en segunda vuelta, si la nueva ubicaciÆn de Picking tiene stock    *)
(* generamos acciÆn para evitar faltas                                        *)
DBG2
  'L_SEGUNDA en TRAPIC002 ' + $STR(L_SEGUNDA);
DBG2
  'Le pasamos L_CANTIDAD a TRAPIC003 ' + $STR(L_CANTIDAD);
IF (NOT L_SEGUNDA OR
    (L_PICK-DINAM[1] = 'S' AND L_UBIPICDIN = 'C' AND NOT L_ESPICKUDS
     AND L_TIENESTOCK))  AND
   (L_CANHAY < L_CAN) AND L_PICK_SIMULT = 0 THEN BEGIN
   LOGIC-TRA-PIC-003 USING L_ACCCOLCOD,
                           L_COLSIGCOD,
                           L_ACCCOD,
                           L_CANTIDAD + L_CANMOV,
                           L_ACCCODNEW MODIFY,
                           L_UBIORICOD,
                           L_NORESTA;
   IF L_ACCCODNEW AND L_UBIPICDIN = 'C' AND NOT L_SEGUNDA THEN
      LOGIC-ACCPICCAO-ORD USING L_ACCCOD, L_ACCCODNEW, L_ACCCOLCOD;
END;
ELSE BEGIN
   (* si se habia generado la segunda vuelta al analizar la accion la *)
   (* primera vez y al analizarla por segunda vez ya hay stock, borra *)
   (* la acc. de 2. vuelta                                            *)
   IF L_CANHAY >= L_CAN AND NOT L_SEGUNDA THEN BEGIN
      EXEC SQL
         SELECT ARTCOD, EXPORDCOD, EXPORDLIN
           INTO :L_ARTCOD2, :L_EXPORDCOD2, :L_EXPORDLIN2
           FROM ACCTRA
          WHERE ACCCOD = :L_ACCCOD;
      L_CLAUSE = " WHERE ACCCOLCOD = "+$STR(L_COLSIGCOD)+
                 " AND ARTCOD = "+$STR(L_ARTCOD2)+
                 " AND EXPORDCOD ="+$STR(L_EXPORDCOD2)+
                 " AND EXPORDLIN ="+$STR(L_EXPORDLIN2);
      L_EXISTE = 0;
      SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
      FOR ACCTRA SELECTED DO BEGIN
         L_EXISTE = 1;
         L_ACCCOD2V = ACCCOD;
      END;
      IF L_EXISTE = 1 THEN
         LOGIC-ACC-BOR-001 USING L_ACCCOD2V;
   END;
END;
IF L_MOSTRAR AND L_PICK_SIMULT = 0 THEN BEGIN
   IF L_CAMBIARART AND L_ARTCODHAY <> 0 THEN BEGIN
      EXEC SQL
         UPDATE ACCTRA SET ARTCOD = :L_ARTCODHAY
          WHERE ACCCOD = :L_ACCCOD;
   END;
END;
DBG1
  'L_MOSTRAR ' + $STR(L_MOSTRAR);
DBG1
  'L_CANTIDAD ' + $STR(L_CANTIDAD);
DBG1
  'L_ACCCODNEW '+ $STR(L_ACCCODNEW);
DBG1
  'L_ENTRO ' + $STR(L_ENTRO);
DBG1
  'FIN PROGRAMA -----------------------';
EXIT;
SCREEN-RFT-PIC-001-P:NOWARN;
(* Release Label (39) *)
PARM L_ACCCOLCOD LIKE(NAME=ACCCOLCOD);
PARM L_CNTCOD LIKE(NAME=CNTCOD);
PARM L_ACCCOD1 LIKE(NAME=ACCCOD);
PARM L_ACCCOD2 LIKE(NAME=ACCCOD);
PARM L_CAN1 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_CAN2 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
PARM L_SALIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_FINVIAJE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_UBIORI1 LIKE(NAME=ALMUBICOD);
PARM L_INCIDENCIA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_TEXTO FORMAT(TYPE=CHAR,LENGTH=40,SUBTYPE=ALPHA);
PARM L_INCIDEN FORMAT(TYPE=CHAR,LENGTH=5,SUBTYPE=ALPHA);
PARM L_TEXTO_CNT FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
PARM L_DESASIGNAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_PICINV FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM L_CNT FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
PARM P_NO_HACER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_LEIDO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
PARM P_ACT_PARTIR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
SET TITLE("Trabajo de Preparacion (Portatil): Presenta Acciones");
SET SCREEN-ENTRY(CONFIRM=NO,MANUAL=NO);
SET WINDOW(ROW=1,COL=0,HEIGHT=15,WIDTH=80,LINE=SINGLE,FORE=BLUE,BACK=WHITE,
           COORDROW=UP,COORDCOL=LEFT);
SET WINDOW(ROW=1,COL=0,HEIGHT=15,WIDTH=22,LINE=SINGLE,FORE=BLACK,BACK=MAGENTA,
           COORDROW=UP,COORDCOL=LEFT);
DCL L_ACCPES FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_AGRTARART LIKE(NAME=AGRTARART);
DCL L_AGRTARTER LIKE(NAME=AGRTARTER);
DCL L_ALIAS FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_ALMCOD LIKE(NAME=ALMCOD);
DCL L_ALMUBINP LIKE(NAME=ALMUBICOD);
DCL L_ANID-DOBLE FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_ARTCOD1 FORMAT(TYPE=INT,LENGTH=9,SUBTYPE=NUMERIC);
DCL L_ARTCOD2 LIKE(NAME=ARTCOD);
DCL L_ARTCOD_ANT LIKE(NAME=ARTCOD);
DCL L_ARTDES1 LIKE(NAME=ARTDES);
DCL L_ARTDES2 LIKE(NAME=ARTDES);
DCL L_ARTLEIDO LIKE(NAME=ARTCOD);
DCL L_ARTPRICOD LIKE(NAME=ARTPRICOD);
DCL L_ARTPRICOD1 LIKE(NAME=ARTPRICOD);
DCL L_ARTPROCTR LIKE(NAME=ARTPROCTR);
DCL L_ARTREF1 LIKE(NAME=ARTREF);
DCL L_ARTREF2 FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_AVISO FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_BARRAS FORMAT(TYPE=CHAR,LENGTH=80,SUBTYPE=ALPHA);
DCL L_BOBINA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAD_ACEPTABLE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAD_MENOR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_CAJCNT FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_CAMBIA-FORM LIKE(NAME=VALALF);
DCL L_CAMPO1 FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_CAMPO2 FORMAT(TYPE=CHAR,LENGTH=22,SUBTYPE=ALPHA);
DCL L_CANCAJ1 FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_CANCAJ2 FORMAT(TYPE=INT,LENGTH=5,SUBTYPE=NUMERIC);
DCL L_CANTEORICA LIKE(NAME=CANEXPRES);
DCL L_CANUNI1 LIKE(NAME=CAN);
DCL L_CANUNI2 LIKE(NAME=CAN);
DCL L_CANUNIANI LIKE(NAME=CANUNI);
DCL L_CAN_ACEPTABLE LIKE(NAME=CANUNI);
DCL L_CARRETILLA LIKE(NAME=RECMAQCOD);
DCL L_CLAMOV FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_CLAUSE FORMAT(TYPE=CHAR,LENGTH=1500,SUBTYPE=ALPHA);
DCL L_CNTDORES FORMAT(TYPE=CHAR,LENGTH=2,SUBTYPE=ALPHA);
DCL L_CNTDORREF LIKE(NAME=CNTDORREF);
DCL L_CNTDORREFNEW LIKE(NAME=CNTCOD);
DCL L_CNTEXPTIP LIKE(NAME=CNTEXPTIP);
DCL L_CNTEXTCOD LIKE(NAME=CNTCOD);
DCL L_CNTINTCOD LIKE(NAME=CNTCOD);
DCL L_CNTSAUX FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC);
DCL L_COLEST LIKE(NAME=COLEST);
DCL L_COLPESCOD LIKE(NAME=COLPESCOD);
DCL L_COLSIGCOD LIKE(NAME=COLSIGCOD);
DCL L_COLTIPPAR LIKE(NAME=COLTIPPAR);
DCL L_CONACCS FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CONCNTS FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CONCOLAS FORMAT(TYPE=INT,LENGTH=2,SUBTYPE=NUMERIC,NULL=YES);
DCL L_CONTINUAR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_DIAMAXCADEXP LIKE(NAME=DIAMINCADEXP);
DCL L_DIAMINCADEXP LIKE(NAME=DIAMINCADEXP);
DCL L_ERROR FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ESPERA-MER-MUE LIKE(NAME=VALALF);
DCL L_ESTCOD LIKE(NAME=ESTCOD);
DCL L_ESTMUE LIKE(NAME=ESTCOD);
DCL L_ESTREF LIKE(NAME=ESTREF);
DCL L_EXPORDCOD LIKE(NAME=EXPORDCOD);
DCL L_EXPORDLIN LIKE(NAME=EXPORDLIN);
DCL L_EXPORDREF LIKE(NAME=EXPORDREF);
DCL L_FECCAD LIKE(NAME=FECCAD);
DCL L_FECCAD_PICK FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_FILTRA-PICKING FORMAT(TYPE=CHAR,LENGTH=20,BYTES=20,SUBTYPE=ALPHA);
DCL L_FIN-VIAJE LIKE(NAME=VALALF);
DCL L_HAY_CNTNDO_ACE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_HOY FORMAT(TYPE=CHAR,LENGTH=10,SUBTYPE=ALPHA);
DCL L_HUECOS FORMAT(TYPE=INT,LENGTH=3,SUBTYPE=NUMERIC,NULL=YES);
DCL L_INCVERCAN FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_INFORMA-BULT FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_LEE-EAN-UBI LIKE(NAME=VALALF);
DCL L_LEER FORMAT(TYPE=CHAR,LENGTH=6,SUBTYPE=ALPHA);
DCL L_LEIDO FORMAT(TYPE=CHAR,LENGTH=20,SUBTYPE=ALPHA);
DCL L_MEZCLA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_MOMINI FORMAT(TYPE=CHAR,SUBTYPE=DATETIME);
DCL L_MOVER FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_MUESTRA-PRES LIKE(NAME=VALALF);
DCL L_MULTIPEDIDO FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_NDOCOD LIKE(NAME=NDOCOD);
DCL L_NO-DESASIGNA FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_NUEVO-CNTDOR LIKE(NAME=VALALF);
DCL L_NUMCNT LIKE(NAME=NUMCNT);
DCL L_NUMUNI1 LIKE(NAME=NUMUNI);
DCL L_NUMUNI2 LIKE(NAME=NUMUNI);
DCL L_NUMUNI2_ANT LIKE(NAME=NUMUNI);
DCL L_OK FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ORIMOV FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_PIC-ALTURA FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_PREPVARIOS FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_REJECT FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_REPOSICION FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_RESER_ALTO FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_ROTTIP LIKE(NAME=ROTTIP);
DCL L_SALE FORMAT(TYPE=INT,LENGTH=1,SUBTYPE=NUMERIC);
DCL L_SEG-VUELTA LIKE(NAME=VALALF);
DCL L_SEPARADOR FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_SOLO-FIL-PICK LIKE(NAME=VALALF);
DCL L_TERCOD LIKE(NAME=TERCOD);
DCL L_TERMINAL5F LIKE(NAME=VALALF);
DCL L_TERPROCOD LIKE(NAME=TERPROCOD);
DCL L_TIPO FORMAT(TYPE=CHAR,LENGTH=4,SUBTYPE=ALPHA);
DCL L_UBI-NP LIKE(NAME=VALALF);
DCL L_UBIORI2 LIKE(NAME=ALMUBICOD);
DCL L_UBIORICOD LIKE(NAME=UBIORICOD);
DCL L_UBIPIC LIKE(NAME=UBIPIC);
DCL L_UBIPICDIN LIKE(NAME=UBIPICDIN);
DCL L_UBIREF1 LIKE(NAME=ALMUBIREF);
DCL L_UBIREF2 LIKE(NAME=ALMUBIREF);
DCL L_UNIEXP1 LIKE(NAME=UNIEXP);
DCL L_UNIEXP11 LIKE(NAME=UNIEXP);
DCL L_UNIEXP2 LIKE(NAME=UNIEXP);
DCL L_UNIEXP21 LIKE(NAME=UNIEXP);
DCL L_UNIEXPANI LIKE(NAME=UNIEXPANI);
DCL L_UNIMIN LIKE(NAME=UNIMIN);
DCL L_UNIREP1 FORMAT(TYPE=CHAR,LENGTH=4,BYTES=4,SUBTYPE=ALPHA);
DCL L_UNIREP2 LIKE(NAME=UNIREP);
DCL L_VARIOSCNT FORMAT(TYPE=CHAR,LENGTH=1,SUBTYPE=ALPHA);
DCL L_VER-DESASIGNAR LIKE(NAME=VALALF);
DCL L_VER_ALIAS LIKE(NAME=VALALF);
FNCKEY "Incidencia" KEY(NUM=1) DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY = 1;
#INCLUDE-RFT-PIC-001-P
IF L_BOBINA = 1 THEN
BEGIN
   L_AVISO = "Opcion no disponible";
BEGIN
#INCLUDE-GV_RFTPITIDO
   ERR L_AVISO;
END;
END;
ELSE BEGIN
   L_INCIDENCIA = 1;
DBG2 'PULSADO F1 INCIDENCIA';
DBG2 'L_INCIDENCIA = 1 Y RETURN';
L_UBIORI1 = L_UBIORICOD;
DBG2 'L_UBIORI1 ' + $STR(L_UBIORI1);
RETURN;
END;
   END;
FNCKEY "Fin Viaje" KEY(NUM=2) DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY = 2;
#INCLUDE-RFT-PIC-001-P
DBG2 'PULSADO F2 FINAL DE VIAJE';
LOGIC-LIB-PAR-001 USING 'EXPEDICION','NUEVO-CNTDOR',L_NUEVO-CNTDOR MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION','NO-DESASIGNA',L_NO-DESASIGNA MODIFY;
IF L_COLTIPPAR = 'A' AND L_FIN-VIAJE = 'S' THEN BEGIN
   DBG2 'L_COLTIPTAR = A Y L_FIN-VIAJE = S';
   DBG2 'ERR Opcion no disponible';
BEGIN
#INCLUDE-GV_RFTPITIDO
   ERR "Opcion no disponible";
END;
END;
ELSE BEGIN
   L_FINVIAJE = 1;
   DBG2 'L_FINVIAJE = 1';
   (* RS 11/02/03 Informacion Bultos Fin Picking *)
   IF L_INFORMA-BULT = 'S' THEN BEGIN
(*    SCREEN-RFT-IBP-001-P USING L_ACCCOLCOD, *)
SECTION "SCREEN-RFT-IBP-001-" + GVPF_TTR
 USING L_ACCCOLCOD,
                                 L_CONTINUAR MODIFY;
      IF L_CONTINUAR THEN BEGIN
         L_FINVIAJE = 0;
         DBG2 'IF L_CONTINUAR THEN L_FINVIAJE = 0';
      END;
   END;
DBG2
   'FIN VIAJE ' + $STR(L_FINVIAJE);
   IF L_FINVIAJE THEN BEGIN
      DBG2 'ENTRA POR IF L_FINVIAJE';
      IF L_MULTIPEDIDO = 'S' THEN BEGIN
         DBG2 'ENTRA POR IF L_MULTIPEDIDO=S';
         (* Si quedan colas por preparar en la carretilla, entonces no *)
         (* descargo la cola que ha pulsado Fin Viaje.                 *)
         L_CONCOLAS = 0;
         IF L_NUEVO-CNTDOR = 'N' THEN BEGIN
            DBG2 'L_NUEVO-CNTDOR VALE N';
            EXEC SQL
               SELECT COUNT(DISTINCT CNTDOR.ACCCOLCOD) INTO :L_CONCOLAS
                 FROM ACCCOL, CNTDOR, ALMUBI, RECMAQ
                WHERE RECMAQ.RECMAQCOD = :GV_RECMAQCOD
                  AND ALMUBI.ESTCOD = RECMAQ.ESTCOD
                  AND CNTDOR.CNTCOD = ALMUBI.CNTCOD
                  AND ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD
                  AND ACCCOL.ACCCOLCOD <> :L_ACCCOLCOD
                  AND ACCCOL.COLEST = 'IN';
         END;
         ELSE BEGIN
            DBG2 'L_NUEVO-CNTDOR VALE <> N';
            EXEC SQL
               SELECT COUNT(DISTINCT CNTDOR.ACCCOLCOD) INTO :L_CONCOLAS
                 FROM ACCCOL, ACCTRA, CNTDOR, ALMUBI, RECMAQ
                WHERE RECMAQ.RECMAQCOD = :GV_RECMAQCOD
                  AND ALMUBI.ESTCOD = RECMAQ.ESTCOD
                  AND CNTDOR.CNTCOD = ALMUBI.CNTCOD
                  AND ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD
                  AND ACCTRA.ACCCOLCOD = ACCCOL.ACCCOLCOD
                  AND ACCTRA.ACCEST <> 'CO'
                  AND ACCCOL.COLEST = 'IN';
         END;
         IF $NULL(L_CONCOLAS) THEN
            L_CONCOLAS = 0;
DBG2
   'COLAS EN CARRETILLA ' + $STR(L_CONCOLAS);
         IF L_CONCOLAS = 1 AND L_NUEVO-CNTDOR = 'S' THEN BEGIN
            DBG2 'L_CONCOLAS = 1 AND L_NUEVO-CNTDOR=S';
            (* Cuento el numero de huecos libres.*)
            L_HUECOS = 0;
            EXEC SQL
               SELECT COUNT(ALMUBICOD) INTO :L_HUECOS
                 FROM RECMAQ, ALMUBI
                WHERE RECMAQCOD = :GV_RECMAQCOD AND
                  ALMUBI.ESTCOD = RECMAQ.ESTCOD AND
                         UBISIT = 'OK' AND
                         UBIEST = 'VA' AND
                         CNTCOD = 0
               GROUP BY RECMAQ.ESTCOD;
            IF $NULL(L_HUECOS) THEN
               L_HUECOS = 0;
DBG2
   'HUECOS ' + $STR(L_HUECOS);
            IF NOT L_HUECOS THEN BEGIN
              L_CONCOLAS = 0;
              DBG2 'IF NOT L_HUECOS THEN L_CONCOLAS=0';
            END;
         END;
         IF L_CONCOLAS THEN BEGIN
            L_FINVIAJE = 3;
            DBG2 'IF L_CONCOLAS THEN L_FINVIAJE=3';
DBG2
   'Continuo preparando el resto de colas';
         END; (* IF L_CONCOLAS *)
         (* RS 30/07/03 Cortefiel, si el nuevo parametro, NO-DESASIGNA *)
         (* esta activo, no se desasigna la cola.                      *)
         IF L_NO-DESASIGNA <> 'S' THEN BEGIN
            DBG2 'L_NO-DESASIGNA <> S';
            (*EV 01-06-2004 ANTES DE DESASIGNAR COLA, GESTION COLA SEGUNDA *)
            (*VUELTA. x INC. EN LOGISTA.                                   *)
            L_SEG-VUELTA = 'N';
            LOGIC-LIB-PAR-001 USING 'EXPEDICION',
                                    'GEST-SEG-VUELTA', L_SEG-VUELTA MODIFY;
            IF L_SEG-VUELTA = 'S' THEN
               LOGIC-RFL-PIC-GSV USING L_ACCCOLCOD;
            (* RS 22/04/03 Incidencia - No se desasignaba la cola de segunda *)
            (* vuelta, ni la de pesaje.                                      *)
            L_COLSIGCOD = 0;
            L_COLPESCOD = 0;
            SELECT * FROM ACCCOL WHERE ACCCOLCOD = L_ACCCOLCOD AND
                                          COLEST = 'IN';
            FOR ACCCOL SELECTED DO BEGIN
               COLEST = 'PD';
DBG2
   'Cambio el estado de la cola ' + $STR(L_ACCCOLCOD) + ' a PD';
               RECMAQCOD = 0;
               RECOPECOD = 0;
               L_COLSIGCOD = COLSIGCOD;
               L_COLPESCOD = COLPESCOD;
            END;
            (* RS 13/06/03 - Incidencia - Desasigno la accion de la cola *)
            EXEC SQL
               UPDATE ACCTRA SET ACCEST = 'PD'
                 WHERE ACCCOLCOD = :L_ACCCOLCOD AND
                          ACCEST = 'AS';
            (* Desasigno la cola de segunda vuelta *)
            EXEC SQL
               UPDATE ACCCOL SET RECMAQCOD = 0,
                                 RECOPECOD = 0
                WHERE ACCCOLCOD = :L_COLSIGCOD;
            (* Desasigna la cola de pesaje si tiene acciones pendientes *)
            IF L_COLPESCOD THEN BEGIN
               L_ACCPES = 0;
               EXEC SQL
                  SELECT 1 INTO :L_ACCPES
                    FROM ACCTRA
                   WHERE ACCCOLCOD = :L_COLPESCOD AND
                            ACCEST <> 'CO';
               IF L_ACCPES THEN BEGIN
                  EXEC SQL
                     UPDATE ACCCOL SET RECMAQCOD = 0,
                                       RECOPECOD = 0,
                                          COLEST = 'PD'
                      WHERE ACCCOLCOD = :L_COLPESCOD;
               END;
            END;
         END; (* IF L_NO-DESASIGNA <> 'S' *)
         ELSE BEGIN
            DBG2 'L_NO-DESASIGNA = S';
            EXEC SQL
               UPDATE ACCCOL SET COLEST = 'AS'
                 WHERE ACCCOLCOD = :L_ACCCOLCOD AND
                          COLEST = 'IN';
         END;
         IF L_FINVIAJE THEN BEGIN
            DBG2 'ENTRA POR IF L_FINVIAJE';
            (* Descuento el contenedor o contenedores de lo estimado pora la *)
            (* cola.                                                         *)
            (* Primero calculo el numero de contenedores cargados de la cola *)
            L_CONCNTS = 0;
            EXEC SQL
               SELECT COUNT(CNTDOR.ACCCOLCOD) INTO :L_CONCNTS
                 FROM ACCCOL, CNTDOR, ALMUBI, RECMAQ
                WHERE RECMAQ.RECMAQCOD = :GV_RECMAQCOD AND
                          ALMUBI.ESTCOD = RECMAQ.ESTCOD AND
                          CNTDOR.CNTCOD = ALMUBI.CNTCOD AND
                       ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD AND
                       ACCCOL.ACCCOLCOD = :L_ACCCOLCOD;
            IF $NULL(L_CONCNTS) THEN
               L_CONCNTS = 0;
            DBG2 'L_CONCNTS=' + $STR(L_CONCNTS);
            L_CNTSAUX = L_CONCNTS;
            (* Obtengo el numero de contenedores estimados para la cola *)
            L_NUMCNT = 0;
            EXEC SQL
               SELECT NUMCNT INTO :L_NUMCNT
                 FROM ACCCOL
                WHERE ACCCOLCOD = :L_ACCCOLCOD;
            DBG2 'L_NUMCNT='+$STR(L_NUMCNT);
            (* Obtengo el numero de acciones pendientes de la cola *)
            L_CONACCS = 0;
            EXEC SQL
               SELECT COUNT(ACCCOD) INTO :L_CONACCS
                 FROM ACCTRA
                WHERE ACCCOLCOD = :L_ACCCOLCOD AND
                         ACCEST <> 'CO';
            IF $NULL(L_CONACCS) THEN
               L_CONACCS = 0;
            DBG2 'L_CONACCS='+$STR(L_CONACCS);
            (* Si quedan acciones pendientes no puedo dejar el campo a 0 *)
            IF L_CONACCS THEN BEGIN
               IF L_NUMCNT = 1 THEN
                  L_CNTSAUX = 0;
               ELSE IF L_NUMCNT <= L_CNTSAUX THEN
                  L_CNTSAUX = L_NUMCNT - 1;
            END;
            ELSE
               L_CNTSAUX = L_NUMCNT;
            DBG2 'L_CNTSAUX='+$STR(L_CNTSAUX);
            EXEC SQL
               UPDATE ACCCOL SET NUMCNT = NUMCNT - :L_CNTSAUX
                 WHERE ACCCOLCOD = :L_ACCCOLCOD;
DBG2
   'MODIFICO NUMCNT';
         END; (* IF L_FINVIAJE *)
      END; (* IF L_MULTIPEDIDO *)
      (** Modif. JLM el 05/02/2004 Incidencia GRH **)
      L_CLAUSE = " WHERE ACCCOLCOD = " + $STR(L_ACCCOLCOD) +
                 " AND ACCEST <> 'CO' " +
                 " AND UBIORICOD <> 0 " +
                 " ORDER BY ACCORD, ACCORDREC";
      SELECT * FROM ACCTRA SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
      FOR ACCTRA SELECTED ITERATIONS(2) DO
      BEGIN
         IF ARTCOD = L_ARTCOD_ANT THEN
            CONTINUE;
         L_UBIPIC = 0;
         L_UBIPICDIN = '';
         EXEC SQL
            SELECT UBIPIC, UBIPICDIN INTO :L_UBIPIC, :L_UBIPICDIN
              FROM ARTALM
             WHERE ARTCOD = :ARTCOD AND
                   ALMCOD = :GV_ALMCOD;
         IF L_UBIPICDIN = 'C' AND L_UBIPIC <> UBIORICOD THEN
         BEGIN
            LOGIC-DSG-PIC-001 USING L_UBIPIC, ARTCOD;
            EXEC SQL UPDATE ARTALM SET UBIPIC = :UBIORICOD
               WHERE ARTCOD = :ARTCOD AND ALMCOD = :GV_ALMCOD;
DBG2
   'Llama a ASG-PIC-001 almubicod= ' + $STR(UBIORICOD);
            LOGIC-ASG-PIC-001 USING UBIORICOD, ARTCOD;
            L_ARTCOD_ANT = ARTCOD;
         END;
      END;
   END; (* IF L_INFORMA-BULT *)
END; (* ELSE *)
IF L_FINVIAJE THEN BEGIN
   DBG2 'IF L_FINVIAJE THEN RETURN';
   RETURN;
END;
   END;
FNCKEY "Desasignar" KEY(NUM=3) DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY = 3;
#INCLUDE-RFT-PIC-001-P
IF L_PREPVARIOS = 0 THEN BEGIN
   DBG2
      'IF L_PREPVARIOS=0 THEN ERR DESASIGNAR NO DISP';
BEGIN
#INCLUDE-GV_RFTPITIDO
   ERR "Tecla no disponible";
END;
END;
DBG2 'L_DESASIGNAR=3 Y RETURN';
L_DESASIGNAR = 3;
RETURN;
   END;
FNCKEY "Partir" KEY(NUM=4) DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY = 4;
#INCLUDE-RFT-PIC-001-P
IF P_ACT_PARTIR = 1 THEN
BEGIN
   P_PARTIR = 1;
DBG2
  'HA PULSADO F4: PARTIR';
   RETURN;
END;
ELSE BEGIN
(* SCREEN-RFT-AVI-001-P USING "Tecla de funcion","No disponible"; *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "Tecla de funcion","No disponible";
END;
   END;
FNCKEY "Salir" KEY(NUM=8) DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY = 8;
#INCLUDE-RFT-PIC-001-P
(* Desactivo la tecla F8: Salir *)
NOTHING;
   END;
PRINT "**********  **********" CURSOR(ROW=7,COL=1),
      "F1:Inc  F2:Fin Viaje" CURSOR(ROW=13,COL=1),
      "F3:Desa F4:Partir" CURSOR(ROW=14,COL=1);
(****************************************************************************)
(* Titulo: Trabajo de Preparacion: Presenta acciones                        *)
(* Asunto: ADAIA V2 Primera Version                                         *)
(* Creado: Ana Armijo 10/03/1999                                            *)
(* Modif :                                                                  *)
(* Descripcion                                                              *)
(*    Este proceso presenta en pantalla las dos acciones cuyos codigos re-  *)
(*    cibe como parametros.                                                 *)
(*    . El opeario puede confrmar la accion leyendo la etiqueta de la ubi-  *)
(*      cacion o del EAN13 del articulo (segun parametro).                  *)
(*    . El sistema pedira confirmacion del contenedor en el que se deposita *)
(*      la mercancÕa en funcion de algo ????                                *)
(*    . Si el movimiento es correcto, llama a LIB-MOV para registrarlo.     *)
(*    . Permite dar la tecla de Incidencias.                                *)
(*    . Permite dar la tecla de Fin Viaje.                                  *)
(*---------------------------------------------------------------------------*)
(* Historia:                                                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 19/12/2000                                      *)
(*    Programador          : DMG                                             *)
(*    Proyecto o incidencia:                                                 *)
(*    Descripcion          : CorrecciÆn incidencia.                          *)
(*       Se ajusta la pantalla a 20 caracteres, ya que en los trakkers       *)
(*       solo se pueden ver 20 y no 22 caracteres.                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 19/10/2000                                      *)
(*    Programador          : EVL                                             *)
(*    Proyecto o incidencia: AIX                                             *)
(*    Descripcion          : CorrecciÆn incidencia.                          *)
(*       Se pone sentencia select * from artpre en lugar de exec sql         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 20/12/2001                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: ALDEASA                                         *)
(*    Descripcion          : Si se trata de un picking inverso, la unidad que*)
(*       se muestra en pantalla debe ser la de recepcion.                    *)
(*       Aumentamos el tama·o de la cantidad en uno para que en caso del     *)
(*       picking inverso, al tener el signo negativo, puedan ubicar cantida- *)
(*       des de 3 digitos.                                                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 25/01/2002                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: ALDEASA                                         *)
(*    Descripcion          : Se amplia en campo cajas a mostrara N5          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/02/2002                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Mejora Adaia2                                   *)
(*    Descripcion          : Se desactiva la tecla F8:Salir.                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/06/2002                                      *)
(*    Programador          : AP                                              *)
(*    Proyecto o incidencia: LOR10 -pto 5                                    *)
(*    Descripcion          : No se deja pulsar fin viaje si la cola se ha    *)
(*            partido automaticamente (COLTIPPAR = 'A') y el parametro       *)
(*            FIN-VIAJE de EXPEDICION estÄ activado. Ver PKL.                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/07/2002                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: ALD11 - Preparacion para no servir unidades     *)
(*    Descripcion          : Se aumenta el parametro L_INCIDEN a 5 caracteres*)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/08/2002                                      *)
(*    Programador          : AP                                              *)
(*    Proyecto o incidencia: @CAR - quitar la opcion desasignar segun param. *)
(*    Descripcion          : Se consulta el valor del parametro de categoria *)
(*            EXPEDICION: VER-DESASIGNAR, y si vale S se muestra la tecla F3 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/11/2002                                      *)
(*    Programador          : YMA                                             *)
(*    Proyecto o incidencia: @CAR.                                           *)
(*    Descripcion          : Se comenta el print de la tecla F3: Desasignar  *)
(*            ya que en la logiaca de la tecla se controla que la opcion este*)
(*            disponible o no, en el caso de no muestra mensaje.             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 15/01/2003                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: @CAR.  V2p5                                     *)
(*    Descripcion          : Si parametro TERMINAL5FILAS vale S entonces     *)
(*    En la pantalla 5F no cabe la variable L_AVISO, asi que se oculta y     *)
(*    el valor de L_AVISO se muestra en L_BARRAS.      -- V2p5 --            *)
(*    Los mensajes que se muestran tiene que ser como maximo de 14 caract.   *)
(*    para que se machaquen con el codigo de barras leido.                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 24/01/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : En el caso de incidencia 4 (Error Pedido) y     *)
(*       estar confirmada la cantidad en oficina, no mostraba correctamente  *)
(*       la cantidad en pantalla y obligaba a leer 2 veces el ean del arti-  *)
(*       culo.                                                               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/02/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Las pantallas Grandes no se generan bien si     *)
(*       tienen un campo duplicado en pantalla, como ocurria en este caso    *)
(*       con las UNIDADES DE EXPEDICION.                                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/02/03                                        *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2dp31 - Informacion Bultos Ptes Fin Viaje Pic. *)
(*    Descripcion          : Al pulsar final de Viaje, se mostrara una pan-  *)
(*       talla informativa del numero de bultos pendientes de preparar de    *)
(*       la cola. Si pulsa F8, el preparador continuara preparando. Si pulsa *)
(*       F7, se pasa a la lectura del contenedor y el muelle destino.        *)
(*       Esta nueva operativa va asociada al valor del nuevo parametro de    *)
(*       expedicion INF-BULTOS-PICK.                                         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 24/02/03                                        *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2pmp - Picking multipedido                     *)
(*    Descripcion          : Al pulsar final de Viaje, si no se desea conti- *)
(*       nuar preparando una cola y el picking es multipedido, se continua-  *)
(*       ra con el resto de colas asignadas.                                 *)
(*       Se actualiza el campo NUMCNT de las colas.                          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 13/03/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: V2cdpk- Control de caducidad en picking         *)
(*    Descripcion          : Cuando el parametro FILTRA-PICKING esta activo: *)
(*                           Si el tercero y el articulo de la accion        *)
(*                           tienen fijada una caducidad maxima en AGRTARREL *)
(*                           y el articulo rota por fecha de caducidad,      *)
(*                           se comprueba que la caducidad sea aceptable.    *)
(*                           Si no lo es se da la posibilidad de leer otras  *)
(*                           ubicaciones que cumplan esta caducidad, aunque  *)
(*                           sean de  altura                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 27/03/03                                        *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: V2pmp - Picking multipedido                     *)
(*    Descripcion          : Se muestra en pantalla las posiciones de los    *)
(*       contenedores asociados a la cola.                                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/04/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: V2cdpk Control de caducidad en picking          *)
(*    Descripcion          : No se debe llegar a mostrar la accion cuando no *)
(*                           hay stock valido  y si el articulo es de peso   *)
(*                           variable no debe generarse cola de pesaje       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/04/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: CORTEFIEL                                       *)
(*    Descripcion          : Se llama a programa privado de cada instalacion *)
(*                           CTR-PAI-001. Comprobara que los paises de la    *)
(*                           expedicion y el articulo, sea el mimso, y en    *)
(*                           caso de que no lo sean informa al operario para *)
(*                           que reetiquete la prenda                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 22/04/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: INCIDENCIA                                      *)
(*    Descripcion          : Al pulsar fin viaje de un pedido, desasignaba   *)
(*       la cola, pero no la de segunda vuelta, ni la de pesaje.             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 22/04/2003                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: CRF13 Doble lectura en Picking Inverso          *)
(*    Descripcion          : Si el parametro de COTROL LEE-EAN-UBI esta a S  *)
(*                           se obliga a la lectura de la ubicacion, si se   *)
(*                           ha realizado la lectura del EAN de articulo     *)
(*                           anteriormente. En otro caso se muestra un       *)
(*                           mensaje de error EAN NO LEIDO, no permitiendose *)
(*                           seguir con el picking inverso                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/04/2003                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: CRF13 incidencia Doble lectura Picking Inverso  *)
(*    Descripcion          : No se estaba controlando si se estaba en picking*)
(*                           inverso y no funcionaba correctamente para el   *)
(*                           picking normal.                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 12/06/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Desasigno la accion de la cola de la que se ha  *)
(*       pulsado fin de viaje.                                               *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 14/07/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Solo resto del campo NUMCNT si este tiene un    *)
(*       valor superior a 1.                                                 *)
(*       Con valor 0 bucla el RFL-PIC-001.                                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 30/07/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Cortefiel                                       *)
(*    Descripcion          : Al pulsar Fin Viaje, si el nuevo parametro de   *)
(*       Expedicion, NO-DESASIGNA esta activo, no desasignara la cola de la  *)
(*       maquina.                                                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 31/07/2003                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Al pulsar Fin Viaje, si queda una cola y el     *)
(*       parametro NUEVO-CNTDOR esta activo, hay que comprobar que haya      *)
(*       huecos libres en la carretilla.                                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/08/2003                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: Depuracion                                      *)
(*    Descripcion          : Lleno el programa de DBG2 para saber por   *)
(*       donde pasa en cada caso. Tambien pongo en las teclas los includes   *)
(*       del RFLOG al principio de la logica de cada una.                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 03/09/2003                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: COR10                                           *)
(*    Descripcion          : Se incluye una nueva tecla de funcion,          *)
(*       F4: Partir.                                                         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 21/10/2003                                      *)
(*    Programador          : FGG                                             *)
(*    Proyecto o incidencia: ALD19                                           *)
(*    Descripcion          : Si la fecha de caducidad de la mercancÕa en     *)
(*                           picking no cumple con los requisitos de caduci- *)
(*                           dad definidos en la relaciÆn TERCERO-ARTICULO,  *)
(*                           la acciÆn no debe aparecer en el terminal de ra-*)
(*                           diofrecuencia                                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/10/2003                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia COR10                                *)
(*    Descripcion          : Se podra pulsar esta tecla solo cuando el       *)
(*       valor de P_PARTIR = 2, que con este valor viene desde el programa   *)
(*       RFL-PIC-001.                                                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/11/2003                                      *)
(*    Programador          : AP                                              *)
(*    Proyecto o incidencia: LOG15 - AZO05                                   *)
(*    Descripcion          : Si el articulo tiene unidad de expedicion ani-  *)
(*       dada, no se muestra la segunda accion, sino que se muestran los     *)
(*       datos relativos a la unidad de expedicion y a la anidada.           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 25/11/2003                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: CIRLEC                                          *)
(*    Descripcion          : Si el parametro P_PARTIR llega a 2, se trata de *)
(*                           picking normal, permitimos partir acciones.     *)
(*                           Si no ponemos P_PARTIR a 0.                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/11/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: AZOR                                            *)
(*    Descripcion          : No se por que, estaba UNIEXPANI bien declarado  *)
(*                           pero en el adaiax estaba como LIKE UNIREPANI    *)
(*                           He borrado la varibale y vuelto a declarar      *)
(*                            Tambien voy a dejar el copazo de las ma·anas   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 26/11/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: AZOR                                            *)
(*    Descripcion          : Cuando hay uniadad de expedicion anidada, se    *)
(*                           muestran las unidades sueltas con 6 digitos     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 28/11/2003                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia                                      *)
(*    Descripcion          : Se modifica por incidencia al partir accion.    *)
(*       Le llega un nuevo parametro al programa que activa o no lo tecla    *)
(*       de funcion de partir accion.                                        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 18/12/2003                                      *)
(*    Programador          : PAM                                             *)
(*    Proyecto o incidencia: Incidencia AZOR                                 *)
(*    Descripcion          : Antes de calcular las cantidades de la unidad   *)
(*                           de expedicion anidada, comprobamos que tenga    *)
(*                           datos en ARTPRE                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/01/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: LOG15                                           *)
(*    Descripcion          : Si el parametro de expedicion ANID-INF-DOBLE es-*)
(*       ta activo, aparecera tambien la cantidad a preparar en el campo 1.  *)
(*       Esto pasa si utilizan la unidad de expedicion anidada.              *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/02/2004                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: GRH Incidencia 5946                             *)
(*    Descripcion          : Se modifica para que si dan viaje se compruebe  *)
(*       si esta bien asignado a las dos primeras acciones de la cola de     *)
(*       trabajo siendo los articulos de picking C.                          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/02/2004                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia sin numero                           *)
(*    Descripcion          : Si no hay segunda accion y no tiene unidad de   *)
(*       expedicion anidada estaba mostrando basurilla en pantalla.          *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 31/05/2004                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: Incidencia logista                              *)
(*    Descripcion          : Al pulsar fin viaje en multipedido hay que lla- *)
(*       mar a la rutina que une la cola de segunda vuelta con la primera.   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/05/2004                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: Incidencia marvimundo                           *)
(*    Descripcion          : En caso de que el EAN leido no sea correcto     *)
(*       se blanquea la variable L_BARRAS porque sino puede dar problemas    *)
(*       entre EAN13 y DUN14.                                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/11/2004                                      *)
(*    Programador          : NMN                                             *)
(*    Proyecto o incidencia: AHMV01.1MP                                      *)
(*    Descripcion          : Si el parÄmetro de EXPEDICION PIC-MUESTRA-PRES  *)
(*       vale N no se muestran las unidades por caja del artÕculo a preparar.*)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 13/01/2005                                      *)
(*    Programador          : EMA                                             *)
(*    Proyecto o incidencia: Incidencia Campomos - 7952                      *)
(*    Descripcion          : Cuando se mezclan formatos en la expedicion, se *)
(*       muestras ubicaciones de altura donde hay stock del artÕculo pedido  *)
(*       o cualquiera de sus formatos, al seleccionar una ubicacion no devol-*)
(*       vÕa el artÕculo de la ubicacion, aparenciendo siempre stock ins.    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 02/03/2005                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia Nestle - 7679                        *)
(*    Descripcion          : No mostraba la cantidad correcta cuando se habia*)
(*       pulsado la incidencia de Cantidad Pedida, ya que no se actualizaba  *)
(*       la variable L_CAMPO1, solo se actualizaban CANCAJ1 y CANUNI1.       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 10/10/2005                                      *)
(*    Programador          : MAD                                             *)
(*    Proyecto o incidencia: DRI01.3                                         *)
(*    Descripcion          : Se modifica para que cuando el cliente sea dri  *)
(*       muestre la descripcion del articulo en vez de la referencia.        *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 12/06/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : En la llamada al programa de picking en altura  *)
(*       -RFT-PIC-010-P, anadir dos nuevos parametros, L_EXPORDCOD y L_TERCOD*)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 28/06/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : Si el parametro FILTRA-PICKING='S' Y            *)
(*    SOLO-FIL-PICK = N, hay que intentar servir primero por picking en      *)
(*    altura  la mercancia que este reservada para el tercero o para la OEX. *)
(*    Si el articulo rota por caducidad y hubiese en altura algun contenedor *)
(*    con la fecha de caducidad mas antigua que la del picking y aceptable   *)
(*    para el tercero, tambien habria que servir por picking en altura antes *)
(*    que por picking normal.                                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/07/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : Al analizar si hay algun contenedor en altura   *)
(*    reservado para el tercero o la OEX, hay que tener en cuenta que no     *)
(*    esten caducados.                                                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 28/07/2006                                      *)
(*    Programador          : EV - FM                                         *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : Se obtiene DIAMINCADEXP del articulo primero y  *)
(*    luego de la relacion tercero-articulo.                                 *)
(*    Si parametro FILTRA-PICKING = S, se hace control de la caducidad en    *)
(*    el picking, aunque DIAMINCADEXP valga cero.                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 11/10/2006                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: NESS30                                          *)
(*    Descripcion          : No se tiene en cuenta el codigo de L_UNIEXPANI  *)
(*       para el cliente nes.                                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/09/2006                                      *)
(*    Programador          : DAS                                             *)
(*    Proyecto o incidencia: KAM07                                           *)
(*    Descripcion          : Se modifica para que en vez de coger el campo   *)
(*        AGRTARREL.DIAMINCADEXP se calcule con la subrutina OEX-DIA-EXP     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 04/09/2006                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: V2BOB                                           *)
(*    Descripcion          : Se modifica para que si el articulo es bobina   *)
(*       se envie por picking en altura.                                     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/09/2006                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: V2BOB                                           *)
(*    Descripcion          : Se modifica para que si el articulo es bobina   *)
(*       no permita pulsar la tecla de funcion F1: Incidencia.               *)
(*       Y si es bobina no mostrara el mensaje de antes del RFT-PIC-010-P    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/11/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: KAM07                                           *)
(*    Descripcion          : Cuando no hay stock con caducidad correcta,     *)
(*    antes de mostrar el mensaje de no hay stock con caducidad aceptable    *)
(*    del articulo xxx, si parametro ESPERA-MER-MUE vale S, bucar mercancia  *)
(*    en muelle de recepcion.                                                *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/11/2006                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: PDU - Se cambia el mensaje de espere reposicion *)
(*       porque a PDU no le gusta.                                           *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 23/11/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT08                                           *)
(*    Descripcion          : Se contempla como disponible los contenidos     *)
(*       con NDOSIT=NPIC excepto para el caso de la REPOSICION.              *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 22/12/2006                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: KAM17                                           *)
(*    Descripcion          : Se recibe de OEX-DIA-EXP el nuevo parametro     *)
(*        DIAMAXCADEXP. Se modifican los L_CLAUSE de busqueda de mercancia   *)
(*        para que se tenga en cuenta este valor cuando es <> 0              *)
(*        Se pasa DIAMAXCADEXP como nuevo parametro al RFT-PIC-010-P y al    *)
(*        UBC-MUE-001.                                                       *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 18/01/2007                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : Si CLIENTE es watt, ya NO hay que analizar si   *)
(*    hay en altura algun contenedor con caducidad menor a la de picking para*)
(*    que haga picking en altura.                                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 25/01/2007                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : Si CLIENTE es watt, si estamos en segunda vuelta*)
(*    y no hay stock en picking, y hay una reposicion generada, en lugar de  *)
(*    enviarlo a hacer picking en altura, se indicara ESPERE REPOSICION.     *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 25/01/2007                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: WAT07                                           *)
(*    Descripcion          : Se a·ade el control de caducidad correcta       *)
(*    despues de haber hecho la lectura de confirmacion -ubic. destino o EAN-*)
(*    Hasta ahora solo se comprobaba que hubiera                             *)
(*    stock suficiente, sin tener en cuenta la caducidad.                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 01/02/2007                                      *)
(*    Programador          : EV                                              *)
(*    Proyecto o incidencia: KAM17                                           *)
(*    Descripcion          : Se sustituyen todos los DBG_ANOTA por DBG2 y    *)
(*    las comillas dobles de los dbg por comillas simples.                   *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 07/02/2007                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: KAM18                                           *)
(*    Descripcion          : Se permite leer ean128 para saber el ean del    *)
(*      articulo.                                                            *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 29/82/2007                                      *)
(*    Programador          : MLUZ                                            *)
(*    Proyecto o incidencia: AZTV03                                          *)
(*    Descripcion          : Pitido picking en unidades sueltas.             *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 16/11/2007                                      *)
(*    Programador          : NMN                                             *)
(*    Proyecto o incidencia: Inc. 16210 STY                                  *)
(*    Descripcion          : Se cambia en L_CLAUSE UBISIT = por              *)
(*      UBISIT || '' = para mejorar el rendimiento de las consultas.         *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 27/02/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 17129 - TPR                          *)
(*    Descripcion          : Si estamos en segunda vuelta, no hay stock en   *)
(*       picking, pero si hay reposicion generada, solo se le indica al      *)
(*       operario, ESPERE REPOSICION, si el cliente es watt. Restriccion     *)
(*       hecha el 25/01/2007.                                                *)
(*       Ahora se a·ade el cliente tpr.                                      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 05/03/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 17129 - TPR                          *)
(*    Descripcion          : TPR tiene definidas las ubicaciones de una es-  *)
(*       tanteria INDR como PR en lugar de CM. Se modifica para que al mirar *)
(*       una reposicion busque en este tipo de ubicaciones, asi controlamos  *)
(*       si tambien va sobre una carretilla.                                 *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 17/04/2008                                      *)
(*    Programador          : RS                                              *)
(*    Proyecto o incidencia: Incidencia 18048                                *)
(*    Descripcion          : El picking en altura solo se realiza sobre ubi- *)
(*       caciones de tipo RE. Se elimina la consulta de ubicaciones CM.      *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/05/2008                                      *)
(*    Programador          : NMN                                             *)
(*    Proyecto o incidencia: Inc. 18222 TPR                                  *)
(*    Descripcion          : El picking inverso no hay que calcular el stock *)
(*       teniendo en cuenta la caducidad.                                    *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 06/04/2009                                      *)
(*    Programador          : FM                                              *)
(*    Proyecto o incidencia: HLL23                                           *)
(*    Descripcion          : Lectura de EAN128 en picking para comprobar EAN *)
(*---------------------------------------------------------------------------*)
(*    Fecha                : 08/04/2009                                      *)
(*    Programador          : JLM                                             *)
(*    Proyecto o incidencia: DHLS09.13                                       *)
(*    Descripcion          : Se controla que el origen de la accion pueda    *)
(*       ser la ubicaciÆn ficticia de NP para buscar en altura.              *)
(*****************************************************************************)
L_FIN-VIAJE      = 'N';
L_VER-DESASIGNAR = 'S';
L_TERMINAL5F     = 'N';
L_INFORMA-BULT   = 'N';
L_MULTIPEDIDO    = 'N';
L_CAMBIA-FORM    = 'N';
L_FILTRA-PICKING = 'N';
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'VER-ALIAS',       L_VER_ALIAS     MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'FIN-VIAJE',       L_FIN-VIAJE     MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'VER-DESASIGNAR', L_VER-DESASIGNAR MODIFY;
LOGIC-LIB-PAR-001 USING 'INSTALACION','TERMINAL5FILAS',  L_TERMINAL5F    MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'INF-BULTOS-PICK', L_INFORMA-BULT  MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'PICK-MULTIPEDIDO',L_MULTIPEDIDO   MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'FILTRA-PICKING', L_FILTRA-PICKING MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'CAMBIA-FORM-EXPE',L_CAMBIA-FORM   MODIFY;
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'ANID-INF-DOBLE',  L_ANID-DOBLE    MODIFY;
LOGIC-LIB-PAR-001 USING 'INSTALACION','ESPERA-MER-MUE',L_ESPERA-MER-MUE  MODIFY;
(* Modif NMN 02/11/2004 Saco el valor de PIC-MUESTRA-PRES. Si es N no se mues-*)
(* tran las unidades por caja del artÕculo a preparar                         *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION','PIC-MUESTRA-PRES',L_MUESTRA-PRES MODIFY;
(* Modif. FGG 21/04/2003 V2?? Carrefour *)
(* Doble lectura en procesos de picking inverso *)
IF L_PICINV THEN BEGIN
   DBG2 'ENTRA POR IF L_PICINV';
   L_LEE-EAN-UBI = 'N';
   LOGIC-LIB-PAR-001 USING 'CONTROL','LEE-EAN-UBI', L_LEE-EAN-UBI MODIFY;
END;
(* Modif. FGG 21/10/2003 ALD19 *)
L_SOLO-FIL-PICK = 'N';
LOGIC-LIB-PAR-001 USING 'EXPEDICION',
                        'SOLO-FIL-PICK',
                        L_SOLO-FIL-PICK MODIFY;
L_REJECT     = 0;
L_FINVIAJE   = 0;
L_DESASIGNAR = 0;
L_PREPVARIOS = 0;
P_NO_HACER   = 0;
P_PARTIR = 0;
EXEC SQL
SELECT EXPORDCOD, COLTIPPAR
  INTO :L_EXPORDCOD, :L_COLTIPPAR
  FROM ACCCOL
 WHERE ACCCOLCOD = :L_ACCCOLCOD;
(* Datos de la Orden de Expedicion y el Destinatario *)
EXEC SQL
SELECT EXPORDREF, TERALI, CNTEXPTIP, EXPORDCAB.TERCOD, AGRTARTER, ALMCOD
  INTO :L_EXPORDREF, :L_ALIAS,:L_CNTEXPTIP,:L_TERCOD,:L_AGRTARTER, :L_ALMCOD
  FROM EXPORDCAB, TER
 WHERE EXPORDCAB.EXPORDCOD = :L_EXPORDCOD
   AND          TER.TERCOD = EXPORDCAB.TERCOD;
IF L_VER_ALIAS = 'N' THEN
   L_ALIAS = ' ';
IF L_TEXTO_CNT <> ' ' THEN BEGIN
   L_ALIAS    = L_TEXTO_CNT;
   L_CNTDORES = L_ALIAS[9:10];
   IF L_VER-DESASIGNAR = 'S' THEN BEGIN
      L_PREPVARIOS = 1;
      DBG2 'IF L_VER-DESASIGNAR=S THEN L_PREPVARIOS=1';
   END;
END;
IF L_MULTIPEDIDO = 'S' THEN BEGIN
   DBG2 'ENTRA POR IF L_MULTIPEDIDO=S';
   L_ESTCOD = 0;
   EXEC SQL
   SELECT ESTCOD
     INTO :L_ESTCOD
     FROM RECMAQ
    WHERE RECMAQCOD = :GV_RECMAQCOD;
   L_ALIAS = 'Pos';
   L_SEPARADOR = ':';
   L_CLAUSE = ', ACCCOL, CNTDOR, ALMUBI ' +
              ' WHERE ALMUBI.ESTCOD = ' + $STR(L_ESTCOD) +
              ' AND CNTDOR.CNTCOD = ALMUBI.CNTCOD' +
              ' AND ACCCOL.ACCCOLCOD = CNTDOR.ACCCOLCOD' +
              ' AND ACCCOL.ACCCOLCOD = ' + $STR(L_ACCCOLCOD) +
              ' AND X0.ALMUBICOD = ALMUBI.ALMUBICOD' +
              ' ORDER BY HUEREF';
   DBG2 L_CLAUSE;
   SELECT * FROM ALMPRV SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
   FOR ALMPRV SELECTED DO BEGIN
      L_ALIAS = $TRIM(L_ALIAS) + L_SEPARADOR + $STR($NUM(HUEREF));
      L_SEPARADOR = ',';
   END;
END;
EXEC SQL
SELECT ART.ARTCOD, ARTDES, ARTREF, ART.UNIEXP, ART.ARTPRICOD,
       UBIORICOD, ALMUBIALI, EXPORDLIN, UNIREP, ROTTIP,ARTPROCTR,
       TERPROCOD, ARTPRICOD, UNIEXPANI, UNIMIN
  INTO :L_ARTCOD1,:L_ARTDES1,:L_ARTREF1, :L_UNIEXP1, :L_ARTPRICOD1,
       :L_UBIORI1,:L_UBIREF1,:L_EXPORDLIN,:L_UNIREP1,:L_ROTTIP,
       :L_ARTPROCTR, :L_TERPROCOD, :L_ARTPRICOD, :L_UNIEXPANI, :L_UNIMIN
  FROM ACCTRA, ART, ALMPRV
 WHERE ACCTRA.ACCCOD    = :L_ACCCOD1
   AND ART.ARTCOD       = ACCTRA.ARTCOD
   AND ALMPRV.ALMUBICOD = ACCTRA.UBIORICOD;
DBG2
   'PINCINV: ' + $STR(L_PICINV);
(*-------------------------------------------------------------------*)
(* INICIO BLOQUE PICKING EN ALTURA + CONTROL DE CADUCIDAD EN PICKING *)
(*-------------------------------------------------------------------*)
(* WAT07 *)
DBG2
   'ART.DIAMINCADEXP:' + $STR(L_DIAMINCADEXP);
CALLSUB "OEX-DIA-EXP" USING L_ARTCOD1,
                            L_TERCOD,
                            L_EXPORDCOD,
                            L_EXPORDLIN,
                            L_DIAMINCADEXP MODIFY,
                            L_DIAMAXCADEXP MODIFY;
DBG2
   'DESPUES DE RELACION ART-TER: DIAMINCADEXP:' + $STR(L_DIAMINCADEXP);
DBG2
   'L_DIAMAXCADEXP:' + $STR(L_DIAMAXCADEXP);
(* JLM, 04/09/2006 Se mira si el articulo es de bobina para enviar en altura *)
L_BOBINA = 0;
LOGIC-LIB-ART-BOB USING L_ARTCOD1
                      , L_BOBINA MODIFY
;
L_RESER_ALTO = 0; (*Flag que indica Mercancia Reservada en Alto 1/0*)
IF (L_FILTRA-PICKING = 'S' AND L_SOLO-FIL-PICK = 'N') OR L_BOBINA THEN
BEGIN
(*
  WAT07:
  Intentar servir primero por picking en altura, mercancia que este reservada
  para el tercero o para la orden de expedicion y que no estÅ caducada.
  No hay que tener en cuenta los dias minimos de expedicion. Solo la fecha de
  caducidad.
*)
   L_HOY    = $EDIT($DATE,'DD/MM/YYYY');
   L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
   IF L_CAMBIA-FORM[1] <> 'S' THEN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " WHERE X0.ARTCOD = " + $STR(L_ARTCOD1);
   ELSE BEGIN
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
      IF L_ARTPROCTR = 'S' THEN
         L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
   END;
   L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
              " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
              " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
              " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
              " AND ALMUBI.UBITIP = 'RE'" +
              " AND X0.ARTCOD = ART.ARTCOD " +
              " AND " +
              " ( " +
              " (X0.ASGRES = " + $STR(L_TERCOD) +
              " OR X0.ASGRESOEX = " + $STR(L_EXPORDCOD) + ")" +
              " AND ((ART.ROTTIP = 'FC' AND " +
              "  FECCAD > LTR_TO_DATE('" +  L_HOY +
              "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC')" +
              " ) " +
              " AND (NDOSIT = 'OK' OR NDOSIT = 'NPIC') " +    (*WAT08*)
              " AND UBISIT || '' = 'OK' " +
              " AND UBIEST = 'LL' " +
              " AND EXPORDCOD + 0= 0 ";(*Mirar cabecera deUBC-ALM-001*)
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
          ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
          "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
   DBG2
      L_CLAUSE[1:600];
   DBG2
      L_CLAUSE[601:1200];
   SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
   FOR CNTNDO SELECTED ITERATIONS(1) DO
      L_RESER_ALTO = 1;
   DBG2 '¹MERCANCIA RESERVADA EN ALTO PARA OEX O TERCERO (0/1)?' +
        $STR(L_RESER_ALTO);
   IF L_RESER_ALTO THEN BEGIN
      (*
        Si hay mercancia reservada para tercero u oex, mostramos
        las ubicaciones posibles, y cambiamos el origen de la accion.
        En la pantalla de picking en Altura aparecera un asterisco al lado
        de las ubicaciones reservadas.
      *)
      L_SALIR     = 0;
      L_UBIORICOD = 0;
      IF L_BOBINA = 0 THEN
      BEGIN
(*       SCREEN-RFT-AVI-001-P USING L_ARTREF1, *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING L_ARTREF1,
                                    "mercancia en altura  ",
                                    "RESERVADA para",
                                    "el tercero o la orden";
      END;
      WHILE NOT L_UBIORICOD DO BEGIN
         DBG2
         'WHILE NOT L_UBIORICOD RFT-PIC-010-P x mercancia reservada';
         (*PICKING EN ALTURA*)
(*       SCREEN-RFT-PIC-010-P USING L_ARTCOD1 MODIFY, *)
SECTION "SCREEN-RFT-PIC-010-" + GVPF_TTR
 USING L_ARTCOD1 MODIFY,
                                    L_DIAMINCADEXP,
                                    L_ALMCOD,
                                    L_UBIORICOD MODIFY,
                                    L_CAMBIA-FORM,
                                    L_SALIR MODIFY,
                                    L_EXPORDCOD,    (*WAT07*)
                                    L_TERCOD,       (*WAT07*)
                                    L_BOBINA,
                                    L_CAN1,
                                    L_DIAMAXCADEXP; (*KAM17*)
      END;
      IF L_UBIORICOD THEN BEGIN
         EXEC SQL
         SELECT ALMUBIALI
           INTO :L_UBIREF1
           FROM ALMPRV
          WHERE ALMUBICOD = :L_UBIORICOD;
      END;
      DBG2
      'L_UBIORICOD x MERCANCIA RESERVADA:' + $STR(L_UBIORICOD);
   END; (*IF L_RESER_ALTO*)
   (*
     Fin WAT07 - Picking en Altura de mercancia reservada para la oex o el ter.
   *)
END; (*IF L_FILTRA-PICKING = S AND L_SOLO-FIL-PICK = N*)
(* DHLS09.13 Inicio de modificaciones *)
L_UBI-NP = ' ';
LOGIC-LIB-PAR-001 USING 'EXPEDICION'
                      , 'UBI-NP-ALTURA'
                      , L_UBI-NP MODIFY
;
EXEC SQL
   SELECT ALMUBICOD
     INTO :L_ALMUBINP
     FROM ALMPRV
    WHERE ALMUBIREF = :L_UBI-NP;
IF NOT L_PICINV AND (L_ROTTIP = 'FC' OR L_UBIORI1 = L_ALMUBINP)
   AND L_FILTRA-PICKING = 'S' AND
   NOT L_RESER_ALTO                                            THEN BEGIN
(* DHLS09.13 Fin de modificaciones *)
   (*
     WAT07:
     Se obtiene la menor fecha de caducidad de la ubicacion de picking.
     Se busca en altura un contenido disponible con fecha de caducidad
     aceptable, menor que la de la ubicacion de picking.
     Si se encuentra, se sirve por picking en altura.
   *)
   DBG2 'ENTRA POR CONTROL CADUCIDAD EN PICKING + PICKING EN ALTURA';
   L_CAD_MENOR = 0; (*flag que indica Caducidad Menor en Altura 1/0*)
   L_HOY          = $EDIT($DATE,'DD/MM/YYYY');
   DBG2 'UBIORI1:' + $STR(L_UBIORI1);
   DBG2 'ARTCOD1:' + $STR(L_ARTCOD1);
   IF L_CAMBIA-FORM[1] <> 'S' THEN BEGIN
      EXEC SQL
      SELECT MIN(FECCAD)
        INTO :L_FECCAD
        FROM CNTNDO, ALMUBI
       WHERE ALMUBICOD = :L_UBIORI1
         AND CNTEXTCOD = ALMUBI.CNTCOD
         AND ARTCOD    = :L_ARTCOD1;
   END;
   ELSE BEGIN
      EXEC SQL
      SELECT MIN(FECCAD)
        INTO :L_FECCAD
        FROM CNTNDO, ALMUBI
       WHERE ALMUBICOD = :L_UBIORI1
         AND CNTEXTCOD = ALMUBI.CNTCOD
         AND ARTCOD IN(SELECT ARTCOD FROM ART WHERE ARTPRICOD=:L_ARTPRICOD);
   END;
   IF $NULL(L_FECCAD) THEN BEGIN
      DBG2 'NO HAY CONTENIDO CON FECCAD EN PICKING';
      L_CAD_MENOR = 0;
   END;
   ELSE BEGIN
      L_FECCAD_PICK = $EDIT(L_FECCAD,'DD/MM/YYYY');
      DBG2 'FECCAD EN PICKING:' + L_FECCAD_PICK;
      L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
      IF L_CAMBIA-FORM[1] <> 'S' THEN
         L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " WHERE X0.ARTCOD = " + $STR(L_ARTCOD1);
      ELSE BEGIN
         L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
         IF L_ARTPROCTR = 'S' THEN
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                    " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
      END;
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                 " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                 " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                 " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                 " AND ALMUBI.UBITIP = 'RE'" +
                 " AND X0.ARTCOD = ART.ARTCOD " +
                 " AND ART.ROTTIP = 'FC' AND " +
                 " FECCAD - " + $STR(L_DIAMINCADEXP) +
                 " > LTR_TO_DATE('" +  L_HOY +        (*QUE SEA CAD. ACEPTABLE*)
                 "','DD/MM/YYYY') AND FECCAD " +
                 " < LTR_TO_DATE('" +  L_FECCAD_PICK +(*QUE SEA CAD < CAD_PICK*)
                 "','DD/MM/YYYY') " +
                 " AND ((FECCAD - " + $STR(L_DIAMAXCADEXP) +   (*KAM17*)
                 " <= LTR_TO_DATE('" +  L_HOY +
                 "','DD/MM/YYYY') AND " + $STR(L_DIAMAXCADEXP) + " <> 0) " +
                 " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " +    (*FIN KAM17*)
                 " AND X0.ASGRES = 0 " +
                 " AND (NDOSIT = 'OK' OR NDOSIT = 'NPIC') " +  (*WAT08*)
                 " AND UBISIT || '' = 'OK' " +
                 " AND UBIEST = 'LL' " +
                 " AND EXPORDCOD + 0= 0 ";(*Mirar cabecera deUBC-ALM-001*)
      L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                 ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
      "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
      DBG2 L_CLAUSE[1:600];
      DBG2 L_CLAUSE[601:1200];
      SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
      FOR CNTNDO SELECTED ITERATIONS(1) DO
         L_CAD_MENOR = 1;
   END; (* ELSE DE IF $NULL L_FECCAD_PICK *)
   DBG2 '¹MERCANCIA EN ALTO CON CADUCIDAD MENOR A LA DEL PICKING (0/1)?' +
        $STR(L_CAD_MENOR);
   (*WAT07: 18/01/2007, Si CLIENTE = watt, NO servir por picking en altura *)
   (*en este caso. Por peticion de FM y MS.                                *)
   IF GV_CLIENTE = 'watt' THEN BEGIN
      IF L_CAD_MENOR THEN BEGIN
         DBG2 'Cliente=watt: no servir por picking en altura en este caso.';
         DBG2 'Pasar a analizar la ubicacion de picking, y si no se puede,';
         DBG2 'intentar servir entonces por picking en altura.';
         DBG2 'L_CAD_MENOR = 0';
         L_CAD_MENOR = 0;
      END;
   END; (*FIN WAT07: 18/01/2007*)
   IF L_CAD_MENOR AND L_SOLO-FIL-PICK = 'N' THEN BEGIN
      (*
        Si hay mercancia en alto con cad menor al picking, mostramos
        las ubicaciones posibles, y cambiamos el origen de la accion
      *)
      L_SALIR     = 0;
      L_UBIORICOD = 0;
(*    SCREEN-RFT-AVI-001-P USING L_ARTREF1, *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING L_ARTREF1,
                                 "mercancia en altura ",
                                 "con CADUCIDAD MENOR.",
                                 "Elija ubicacion alto";
      WHILE NOT L_UBIORICOD DO BEGIN
         DBG2
         'WHILE NOT L_UBIORICOD RFT-PIC-010-P x caducidad menor';
         (*PICKING EN ALTURA*)
(*       SCREEN-RFT-PIC-010-P USING L_ARTCOD1 MODIFY, *)
SECTION "SCREEN-RFT-PIC-010-" + GVPF_TTR
 USING L_ARTCOD1 MODIFY,
                                    L_DIAMINCADEXP,
                                    L_ALMCOD,
                                    L_UBIORICOD MODIFY,
                                    L_CAMBIA-FORM,
                                    L_SALIR MODIFY,
                                    L_EXPORDCOD,    (*WAT07*)
                                    L_TERCOD,       (*WAT07*)
                                    0,
                                    0,
                                    L_DIAMAXCADEXP; (*KAM17*)
      END;
      IF L_UBIORICOD THEN BEGIN
         EXEC SQL
            SELECT ALMUBIALI
              INTO :L_UBIREF1
              FROM ALMPRV
             WHERE ALMUBICOD = :L_UBIORICOD;
      END;
      DBG2
         'L_UBIORICOD x CADUCIDAD MENOR:' + $STR(L_UBIORICOD);
   END; (*IF L_CAD_MENOR AND L_SOLO-FIL-PICK = N*)
   (*
     Fin WAT07 - Mercancia en altura con caducidad menor a la del picking
   *)
   IF NOT L_CAD_MENOR THEN BEGIN
      DBG2 'Control de caducidad aceptable en picking';
      L_CAD_ACEPTABLE = 0; (*Control de caducidad aceptable en picking*)
      L_CLAUSE = ", ALMUBI " +
                 " WHERE ALMUBICOD = " + $STR(L_UBIORI1) +
                 " AND CNTEXTCOD = ALMUBI.CNTCOD "       +
                 " AND ARTCOD    = " + $STR(L_ARTCOD1)   +
                 " AND (FECCAD - " + $STR(L_DIAMINCADEXP)+ ")" +
                 " > LTR_TO_DATE('" +  L_HOY + "','DD/MM/YYYY')" +
                 " AND ((" + $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                 "  FECCAD - " + $STR(L_DIAMAXCADEXP) +
                 " <= LTR_TO_DATE('" +  L_HOY +
                 "','DD/MM/YYYY')) OR " + $STR(L_DIAMAXCADEXP) + " = 0)";
      DBG2 L_CLAUSE;
      SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
      FOR CNTNDO SELECTED DO BEGIN
         L_CAD_ACEPTABLE = 1;
      END;
      DBG2 '¹Cad. aceptable en picking? 1/0 :' + $STR(L_CAD_ACEPTABLE);
      (*WAT07: Si cliente es WATT, y L_CAD_ACEPTABLE = 0, hay que mirar  *)
      (*en este punto si esto es poque no hay stock en picking. Si no hay*)
      (*stock en picking y hay reposicion generada, hay que indicar al   *)
      (*operario que espere reposicion, antes de enviarlo a hacer un     *)
      (*posible picking en altura.                                       *)
      (* RS 27/02/2008 - Incidencia 17129 *)
      DBG3
         'GV_CLIENTE ' + GV_CLIENTE;
      IF (GV_CLIENTE = 'watt' OR GV_CLIENTE = 'tpr') AND
         NOT L_CAD_ACEPTABLE THEN BEGIN
         L_CANTEORICA = 0; (*STOCK EN PICKING DEL ARTICULO*)
         EXEC SQL
         SELECT SUM(CNTNDO.CANUNI)
           INTO :L_CANTEORICA
           FROM ALMUBI, CNTNDO
          WHERE ALMUBI.ALMUBICOD = :L_UBIORI1
            AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
            AND CNTNDO.ARTCOD    = :L_ARTCOD1;
         L_CANTEORICA = $NVL(L_CANTEORICA,0);
         DBG3
            'L_CANTEORICA ' + $STR(L_CANTEORICA);
         IF L_CANTEORICA = 0 THEN BEGIN
            DBG2 'NO HAY STOCK EN PICKING';
            (*
              Si hay mercancia para reponer con caducidad aceptable, se le
              indica al operario que espere reposicion.
            *)
            L_REPOSICION = 0; (*Flag que indica si hay merc. para reponer*)
            L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
            IF L_CAMBIA-FORM[1] <> 'S' THEN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE X0.ARTCOD = " + $STR(L_ARTCOD1);
            ELSE BEGIN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
               IF L_ARTPROCTR = 'S' THEN
                  L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                             " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
            END;
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                       " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                       " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                       " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                       " AND ALMUBI.UBITIP IN ('RE','CM','PR') " +
                       " AND X0.ARTCOD = ART.ARTCOD " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                       " FECCAD - " + $STR(L_DIAMINCADEXP) +
                       " > LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC') " +
                       " AND (( ART.ROTTIP = 'FC' AND " +          (*KAM17*)
                         $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                       " FECCAD - " + $STR(L_DIAMAXCADEXP) +
                       " <= LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC'" +
                       " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " + (*FIN KAM17*)
                       " AND X0.ASGRES = 0 " +
                       " AND NDOSIT = 'ASPI' " +
                       " AND UBISIT || '' = 'OK' " +
                       " AND UBIEST = 'LL' " +
                       " AND EXPORDCOD + 0= 0 ";
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                      ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
           "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
DBG2 L_CLAUSE;
            SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
            FOR CNTNDO SELECTED ITERATIONS(1) DO BEGIN
               L_REPOSICION = 1;
            END;
            DBG2 '¹Hay reposicion generada? (0/1)' + $STR(L_REPOSICION);
            IF L_REPOSICION = 1 THEN BEGIN
               DBG2 'Aviso espere reposicion Cad. Aceptable' +
                    'de articulo ' + L_ARTREF1;
               (* RS 17/11/2006 - a PDU no le gusta el mensaje y se cambia*)
               IF GV_CLIENTE <> 'pdu' THEN
(*                SCREEN-RFT-AVI-001-P USING "Espere reposicion  ", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "Espere reposicion  ",
                                             "con caducidad      ",
                                             "aceptable de       ",
                                             L_ARTREF1;
               ELSE
(*                SCREEN-RFT-AVI-001-P USING "Espere reposicion  "; *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "Espere reposicion  ";
               DBG2 'L_CAD_ACEPTABLE PASA A VALER 1 AL HABER REPOSICION';
               L_CAD_ACEPTABLE = 1;
            END; (*IF L_REPOSICION = 1*)
         END; (*IF L_CANTEORICA = 0, NO HAY STOCK EN PICKING*)
      END; (*IF CLIENTE = WATT- CONTROL ESPERE REPOSICION*)
      IF NOT L_CAD_ACEPTABLE THEN BEGIN
         (* EV: 31-07-2006                                                *)
         (* Si el picking no tiene caducidad aceptable:                   *)
         (* - Si SOLO-FIL-PICK = N, se intenta servir por altura.         *)
         (* - Si SOLO-FIL-PICK = S o si SOLO-FIL-PIC=N y no hay en altura,*)
         (*   se mira si hay una reposicion pendiente con caducidad acept.*)
         (*   Si hay repo pendiente, se indica al operario que espere, y  *)
         (*   si no, no se hace la accion por no haber mercancia con      *)
         (*   caducidad aceptable.                                        *)
         L_PIC-ALTURA = 0; (*flag que indica si se hace picking en altura 1/0*)
         IF L_SOLO-FIL-PICK = 'N' THEN BEGIN
            DBG2 'SOLO-FIL-PICK = N';
            L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
            IF L_CAMBIA-FORM[1] <> 'S' THEN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE X0.ARTCOD = " + $STR(L_ARTCOD1);
            ELSE BEGIN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
               IF L_ARTPROCTR = 'S' THEN
                  L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
            END;
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                       " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                       " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                       " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                       " AND ALMUBI.UBITIP = 'RE'" +
                       " AND X0.ARTCOD = ART.ARTCOD " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                       " FECCAD - " + $STR(L_DIAMINCADEXP) +
                       " > LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC') " +
                       " AND (( ART.ROTTIP = 'FC' AND " +         (*KAM17*)
                         $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                       " FECCAD - " + $STR(L_DIAMAXCADEXP) +
                       " <= LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC'" +
                       " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " + (*FIN KAM17*)
                       " AND X0.ASGRES = 0 " +
                       " AND NDOSIT = 'OK' " +
                       " AND UBISIT || '' = 'OK' " +
                       " AND UBIEST = 'LL' " +
                       " AND EXPORDCOD + 0= 0 ";(*Mirar cabecera deUBC-ALM-001*)
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                       ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
              "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
            DBG2 L_CLAUSE[1:600];
            DBG2 L_CLAUSE[601:1200];
            SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
            FOR CNTNDO SELECTED ITERATIONS(1) DO
               L_PIC-ALTURA = 1;
         END;   (*L_SOLO-FIL-PICK = N*)
         DBG2 '¹Hacer picking en altura ? L_PIC-ALTURA 1/0:'
              + $STR(L_PIC-ALTURA);
         IF L_PIC-ALTURA THEN BEGIN
           (* Si hay mercancia en almacen para hacer la accion, mostramos  *)
           (* las ubicaciones posibles, y cambiamos el origen de la accion *)
            L_SALIR     = 0;
            L_UBIORICOD = 0;
            DBG2 'AVISO DE ' + L_ARTREF1 + ' NO TIENE CAD.' +
                 'ACEPTABLE EN PICKING, ELIJA ALTURA';
(*          SCREEN-RFT-AVI-001-P USING L_ARTREF1, *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING L_ARTREF1,
                                       "no tiene caducidad ",
                                       "aceptable en picking",
                                       "elija de altura";
            WHILE NOT L_UBIORICOD DO BEGIN
              DBG2 'WHILE NOT L_UBIORICOD RFT-PIC-010-P';
              (*PICKING EN ALTURA*)
(*            SCREEN-RFT-PIC-010-P USING L_ARTCOD1 MODIFY, *)
SECTION "SCREEN-RFT-PIC-010-" + GVPF_TTR
 USING L_ARTCOD1 MODIFY,
                                         L_DIAMINCADEXP,
                                         L_ALMCOD,
                                         L_UBIORICOD MODIFY,
                                         L_CAMBIA-FORM,
                                         L_SALIR MODIFY,
                                         L_EXPORDCOD,    (*WAT07*)
                                         L_TERCOD,       (*WAT07*)
                                         0,
                                         0,
                                         L_DIAMAXCADEXP; (*KAM17*)
            END;
            DBG_ANOTA 'L_UBIORICOD ' + $STR(L_UBIORICOD);
	    IF L_UBIORICOD THEN BEGIN
               EXEC SQL
               SELECT ALMUBIALI
                 INTO :L_UBIREF1
                 FROM ALMPRV
                WHERE ALMUBICOD = :L_UBIORICOD;
            END;
            ELSE BEGIN
               (*
                 En principio tiene que elegir una ubicacion de altura
                 obligatoriamente. Pero por si en un futuro se decidiera
                 que no es obligatorio, se deja preparado el programa
                 para que funcione y continue con el siguiente paso.
               *)
               L_PIC-ALTURA = 0;
               DBG2 'No se ha hecho picking en altura, L_PIC-ALTURA = 0';
            END;
         END; (*IF L_PIC-ALTURA*)
         IF NOT L_PIC-ALTURA THEN BEGIN
            (*
              Si hay mercancia para reponer con caducidad aceptable, se le
              indica al operario que espere reposicion.
              Si no hay mercancia para reponer, no se hace la accion por no
              haber mercancia con caducidad aceptable.
            *)
            L_REPOSICION = 0; (*Flag que indica si hay merc. para reponer*)
            L_CLAUSE = " , CNTDOR, ALMUBI, ART " ;
            IF L_CAMBIA-FORM[1] <> 'S' THEN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE X0.ARTCOD = " + $STR(L_ARTCOD1);
            ELSE BEGIN
               L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                          " WHERE ARTPRICOD = " + $STR(L_ARTPRICOD);
               IF L_ARTPROCTR = 'S' THEN
                  L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                             " AND ART.TERPROCOD = " + $STR(L_TERPROCOD);
            END;
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) +
                       " AND X0.CNTEXTCOD = CNTDOR.CNTCOD " +
                       " AND CNTDOR.CNTCOD = ALMUBI.CNTCOD " +
                       " AND ALMUBI.ALMCOD = " + $STR(L_ALMCOD) +
                       " AND ALMUBI.UBITIP IN ('RE','CM') " +
                       " AND X0.ARTCOD = ART.ARTCOD " +
                       " AND (( ART.ROTTIP = 'FC' AND " +
                       " FECCAD - " + $STR(L_DIAMINCADEXP) +
                       " > LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC') " +
                       " AND (( ART.ROTTIP = 'FC' AND " +          (*KAM17*)
                         $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
                       " FECCAD - " + $STR(L_DIAMAXCADEXP) +
                       " <= LTR_TO_DATE('" +  L_HOY +
                       "','DD/MM/YYYY')) OR ART.ROTTIP <> 'FC'" +
                       " OR " + $STR(L_DIAMAXCADEXP) + " = 0) " + (*FIN KAM17*)
                       " AND X0.ASGRES = 0 " +
                       " AND NDOSIT = 'ASPI' " +
                       " AND UBISIT || '' = 'OK' " +
                       " AND UBIEST = 'LL' " +
                       " AND EXPORDCOD + 0= 0 ";
            L_CLAUSE = $TRIM(L_CLAUSE,RIGHT) + " ORDER BY CRIROT" +
                      ", LLENOS(ALMUBI.ESTCOD), CNTCOM DESC, " +
           "DISTANCIA_PICREF(ALMUBI.ALMCOD,ALMUBI.ALMUBICOD,X0.ARTCOD) DESC";
           DBG2
              L_CLAUSE;
            SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO, L_CLAUSE);
            FOR CNTNDO SELECTED ITERATIONS(1) DO BEGIN
               L_REPOSICION = 1;
            END;
            IF L_REPOSICION = 1 THEN BEGIN
               DBG2 'Aviso espere reposicion Cad. Aceptable' +
                    'de articulo ' + L_ARTREF1;
               (* RS 17/11/2006 - a PDU no le gusta el mensaje y se cambia*)
               IF GV_CLIENTE <> 'pdu' THEN
(*                SCREEN-RFT-AVI-001-P USING "Espere reposicion  ", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "Espere reposicion  ",
                                             "con caducidad      ",
                                             "aceptable de       ",
                                             L_ARTREF1;
               ELSE
(*                SCREEN-RFT-AVI-001-P USING "Espere reposicion  "; *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "Espere reposicion  ";
            END; (*IF L_REPOSICION = 1*)
            ELSE BEGIN
               (*EV: 17/11/2006: SE A¶ADE AVISO DE MERCANCIA EN MUELLE*)
               L_ESTMUE = 0;
               IF L_ESPERA-MER-MUE = 'S' THEN BEGIN
                  L_MEZCLA = 0;
                  IF L_CAMBIA-FORM[1] = 'S' THEN
                     L_MEZCLA = 1;
                  DBG2
                  'Analisis mercancia en muelle';
                  LOGIC-UBC-MUE-001 USING L_MEZCLA,
                                          L_ALMCOD,
                                          L_ARTCOD1,
                                          L_ESTMUE MODIFY,
                                          L_TERCOD,      (*EV: NUEVO PAR.*)
                                          L_EXPORDCOD,   (*EV: NUEVO PAR.*)
                                          L_DIAMINCADEXP,(*EV: NUEVO PAR.*)
                                          L_DIAMAXCADEXP;(*KAM17*)
                  DBG2
                  'L_ESTMUE: ' +$STR(L_ESTMUE);
               END; (*IF L_ESPERA-MER-MUE*)
               IF L_ESTMUE <> 0 THEN BEGIN (*HAY EN MUELLE*)
                  EXEC SQL
                  SELECT ESTREF INTO :L_ESTREF
                    FROM ALMEST
                   WHERE ESTCOD = :L_ESTMUE;
                   DBG2
                   'Merc. en mue L_ESTREF: '+L_ESTREF;
(*                 SCREEN-RFT-AVI-001-P USING "Mercancia en  ", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "Mercancia en  ",
                                              "Muelle: " + L_ESTREF;
               END; (*IF L_ESPERA-MER-MUE*)
               (*EV: FIN 17/11/2006: AVISO DE MERCANCIA EN MUELLE*)
               ELSE BEGIN
                  DBG2 'AVISO: NO HAY MERCANCIA CON CADUCIDAD ' +
                       'ACEPTABLE DE ' + L_ARTREF1;
(*                SCREEN-RFT-AVI-001-P USING "No hay mercancia con", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "No hay mercancia con",
                                             "caducidad aceptable",
                                             "para articulo",
                                             L_ARTREF1;
                  DBG2
                  'NO HACER LA ACCION ' + $STR(L_ACCCOD1) + ', RETURN';
                  P_NO_HACER = 1; (*No hacer la accion*)
                  RETURN;
               END; (*ELSE DE IF L_ESTMUE <> 0*)
            END; (*ELSE DE IF L_REPOSICION*)
         END; (*IF NOT L_PIC-ALTURA*)
      END; (* IF NOT L_CAD_ACEPTABLE *)
   END; (*IF NOT L_CAD_MENOR*)
END; (*IF NOT L_PICINV AND L_ROTTIP='FC' AND L_FILTRA-PICKING='S' AND NOT L_RE*)
(*-------------------------------------------------------------------*)
(* FIN BLOQUE PICKING EN ALTURA + CONTROL DE CADUCIDAD EN PICKING    *)
(*-------------------------------------------------------------------*)
IF NOT L_PICINV THEN
   LOGIC-CTR-PAI-001 USING L_EXPORDCOD, L_ARTCOD1;
IF L_PICINV THEN
   L_UNIEXP1 = L_UNIREP1;
L_UNIEXP11 = L_UNIEXP1;
EXEC SQL
SELECT NUMUNI
  INTO :L_NUMUNI1
  FROM ARTPRE
 WHERE ARTCOD = :L_ARTCOD1
   AND UNITIP = :L_UNIEXP1;
IF L_UNIEXP1 <> ' ' THEN BEGIN
   L_CANCAJ1 = $TRUNC(L_CAN1 / L_NUMUNI1);
   L_CANUNI1 = $MOD(L_CAN1, L_NUMUNI1);
END;
IF L_ACCCOD2 <> 0 THEN BEGIN
   DBG2 'IF L_ACCCOD2 <> 0';
   EXEC SQL
   SELECT ART.ARTCOD,ART.ARTDES, ART.ARTREF, ART.UNIEXP,
          ACCTRA.UBIORICOD, ALMPRV.ALMUBIALI, ART.UNIREP
     INTO :L_ARTCOD2, :L_ARTDES2, :L_ARTREF2, :L_UNIEXP2,
          :L_UBIORI2, :L_UBIREF2, :L_UNIREP2
     FROM ACCTRA, ART, ALMPRV
    WHERE ACCTRA.ACCCOD    = :L_ACCCOD2
      AND ART.ARTCOD       = ACCTRA.ARTCOD
      AND ALMPRV.ALMUBICOD = ACCTRA.UBIORICOD;
   IF L_PICINV THEN
      L_UNIEXP2 = L_UNIREP2;
   L_UNIEXP21 = L_UNIEXP2;
   EXEC SQL
   SELECT NUMUNI
     INTO :L_NUMUNI2
     FROM ARTPRE
    WHERE ARTCOD = :L_ARTCOD2
      AND UNITIP = :L_UNIEXP2;
   IF L_UNIEXP2 <> ' ' THEN BEGIN
      L_CANCAJ2 = $TRUNC(L_CAN2 / L_NUMUNI2);
      L_CANUNI2 = $MOD(L_CAN2, L_NUMUNI2);
   END;
END;
L_LEER = 'UBI'; (* Por defecto hay que leer la etiqueta de la ubicacion *)
LOGIC-LIB-PAR-001 USING 'EXPEDICION', 'CONFIRMA-PICK', L_LEER MODIFY;
(* Modif. FGG 21/04/2003 V2?? Carrefour *)
IF L_PICINV AND L_LEE-EAN-UBI = 'S' THEN
   L_LEER = 'UBI';
DBG2 'L_LEER:'+L_LEER;
CASE L_LEER OF
   'UBI'     : L_AVISO = "Lea etiq. ubicacion";
   'EAN'     : L_AVISO = "Lea EAN13 articulo";
   'AMBOS'   : L_AVISO = "Lea EAN13 o Ubicacion";
   OTHERWISE : L_AVISO = "Lea etiq. Ubicacion", L_LEER = 'UBI';
ENDCASE;
DBG2 'L_AVISO=' + L_AVISO;
(*EV:V2p5 terminales de 5 filas. El aviso se muestra en L_BARRAS, pq no cabe*)
IF L_TERMINAL5F = 'S' THEN BEGIN
   DBG2 'IF L_TERMINAL5F THEN L_BARRAS = L_AVISO';
   L_BARRAS = L_AVISO[1:14];
END;
IF L_TEXTO <> ' ' THEN BEGIN
   L_AVISO = L_TEXTO;
   (*EV:V25f terminales de 5 filas.El aviso se muestra en L_BARRAS, pq no cabe*)
   IF L_TERMINAL5F = 'S' THEN
      L_BARRAS = L_AVISO[1:14];
   ON TERMINAL PRINT "<7><7>" CURSOR(1,1);
   ON TERMINAL PRINT "<7><7>" CURSOR(1,1);
   ON TERMINAL PRINT "<7><7>" CURSOR(1,1);
END;
(* Si L_MUESTRA-PRES = 'N' entonces no se muestran las UD por caja *)
IF L_MUESTRA-PRES <> 'N' THEN BEGIN
   L_CAMPO1 = "(" + L_UNIEXP1[1:2] + "=" +
                    $EDIT(L_NUMUNI1,'ZZ9') + "U)" +
                    $EDIT(L_CANCAJ1,'ZZZZ9')+
                    L_UNIEXP11[1:2] + "+" +
                    $EDIT(L_CANUNI1,'ZZ9');
   L_CAMPO2 = "(" + L_UNIEXP2[1:2] + "=" +
                    $EDIT(L_NUMUNI2,'ZZ9') + "U)" +
                    $EDIT(L_CANCAJ2,'ZZZZ9')+
                    L_UNIEXP21[1:2] + "+" +
                    $EDIT(L_CANUNI2,'ZZ9');
END;
ELSE BEGIN
   L_CAMPO1 = $EDIT(L_CANCAJ1,'ZZZZ9')+
              L_UNIEXP11[1:2] + "+" +
              $EDIT(L_CANUNI1,'ZZ9');
   L_CAMPO2 = $EDIT(L_CANCAJ2,'ZZZZ9')+
              L_UNIEXP21[1:2] + "+" +
              $EDIT(L_CANUNI2,'ZZ9');
END;
(* Fin Modif NMN 02/11/2004 *)
IF L_UNIEXPANI <> ' ' AND GV_CLIENTE <> 'nes' THEN BEGIN
   L_NUMUNI2_ANT = 0;
   EXEC SQL
   SELECT NUMUNI
     INTO :L_NUMUNI2_ANT
     FROM ARTPRE
    WHERE ARTCOD = :L_ARTCOD1
      AND UNITIP = :L_UNIEXPANI;
   IF L_NUMUNI2_ANT THEN BEGIN
      L_NUMUNI2 = L_NUMUNI2_ANT;
      L_CAMPO1  = ' ';
      L_CAMPO2  = ' ';
      L_ARTDES2 = ' ';
      L_ARTREF2 = ' ';
      L_UBIREF2 = ' ';
      L_CANUNIANI = $TRUNC(L_CANUNI1 / L_NUMUNI2);
      L_CANUNI1 = $MOD(L_CANUNI1, L_NUMUNI2);
      L_ARTDES2 = $EDIT(L_CANCAJ1,'ZZZ9') + " " + (L_UNIEXP1) +
                  " (" + $TRIM(L_UNIEXP1) + "=" + $STR(L_NUMUNI1) +
                  $TRIM(L_UNIMIN) + ")";
      L_ARTREF2 = $TRIM($EDIT(L_CANUNIANI,'ZZZ9')) + " " + (L_UNIEXPANI) +
                  " (" + $TRIM(L_UNIEXPANI) + "=" + $STR(L_NUMUNI2) +
                  $TRIM(L_UNIMIN) + ")";
      L_UBIREF2 = $TRIM($EDIT(L_CANUNI1,'ZZZZZ9')) + " " +
                  $TRIM(L_UNIMIN);
      (* RS 29/01/2004 LOG15. Muestra la cantidad a retirar tambien en *)
      (* la mitad superior de la pantalla                              *)
      IF L_ANID-DOBLE = 'S' THEN
         L_CAMPO1 = $TRIM($EDIT(L_CANCAJ1,'ZZZ9')) + " " + $TRIM(L_UNIEXP1) +
                    "+" + $TRIM($EDIT(L_CANUNIANI, 'ZZZ9')) + " " +
                    $TRIM(L_UNIEXPANI) + "+" +
                    $TRIM($EDIT(L_CANUNI1,'ZZZZZ9')) + " " + $TRIM(L_UNIMIN);
   END;
END;
ELSE BEGIN
   IF NOT L_ACCCOD2 THEN BEGIN
      L_ARTDES2 = ' ';
      L_ARTREF2 = ' ';
      L_UBIREF2 = ' ';
      L_CAMPO2  = ' ';
   END;
END;
(*
   Modificado por MAD. El 10/10/2005. Para que cuando el cliente sea dri
   muestre la descripcion del articulo en vez de la referencia
*)
IF GV_CLIENTE = 'dri' THEN BEGIN
   L_ARTREF1 = L_ARTDES1;
   L_ARTREF2 = L_ARTDES2;
END;
(* 29/08/2007 MLUZ pitido unidades sueltas *)
IF GV_CLIENTE = 'azv' AND NOT L_PICINV AND L_CANUNI1 THEN BEGIN
#INCLUDE-GV_RFTPITIDO
END;
GV_RFSENTIDO = '>';
GV_RFKEY     = -1;
#INCLUDE-RFT-PIC-001-P
FIELD L_ALIAS PROMPT("Alias") CURSOR(ROW=1,COL=1) NOLABEL NOSEQ
   EDIT(LENGTH=22) DISPLAY;
FIELD L_EXPORDREF PROMPT("Orden") LEFT(1) NOLABEL NOSEQ
   EDIT(LENGTH=22) DISPLAY;
FIELD L_ARTDES1 PROMPT("L_ARTDES1       :")
   LEFT(1) NOLABEL NOSEQ EDIT(LENGTH=22) DISPLAY;
FIELD L_ARTREF1 PROMPT("Referencia") LEFT(1) NOLABEL NOSEQ
   EDIT(LENGTH=16) DISPLAY;
FIELD L_UBIREF1 PROMPT("Ubicacion") LEFT(1) NOLABEL NOSEQ
   EDIT(LENGTH=16) DISPLAY;
FIELD L_CAMPO1 PROMPT("") LEFT(1) NOLABEL NOSEQ
   EDIT(LENGTH=22) DISPLAY;
FIELD L_ARTDES2 PROMPT("L_ARTDES2       :")
   CURSOR(ROW=8,COL=1) NOLABEL NOSEQ EDIT(LENGTH=22) DISPLAY;
FIELD L_ARTREF2 PROMPT("Referencia") LEFT(1) NOLABEL NOSEQ
   EDIT(LENGTH=22) DISPLAY;
FIELD L_UBIREF2 PROMPT("Ubicacion") LEFT(1) NOLABEL NOSEQ
   EDIT(LENGTH=22) DISPLAY;
FIELD L_CAMPO2 PROMPT("") LEFT(1) NOLABEL NOSEQ
   EDIT(LENGTH=22) DISPLAY;
FIELD L_AVISO PROMPT("L_AVISO         :")
   LEFT(1) NOLABEL NOSEQ EDIT(LENGTH=22) DISPLAY;
FIELD L_CNTDORES PROMPT("") CURSOR(ROW=0,COL=0) NOLABEL NOSEQ
   EDIT(LENGTH=2) DISPLAY;
FIELD L_BARRAS PROMPT("EAN:") CURSOR(ROW=15,COL=1) NOLABEL NOSEQ
   EDIT(LENGTH=80);
FIELD L_CANCAJ1 PROMPT("L_CAN") CURSOR(ROW=0,COL=0) NOLABEL NOSEQ
   EDIT(MASK='----9') DISPLAY;
FIELD L_CANUNI1 PROMPT("L_CAN") CURSOR(ROW=0,COL=0) NOLABEL NOSEQ
   EDIT(MASK='--9') DISPLAY;
AT ACCEPT DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY     = 0;
L_OK         = 0;
#INCLUDE-RFT-PIC-001-P
(* Modif. FGG 21/04/2003 V2?? Carrefour *)
IF L_LEE-EAN-UBI = 'S' AND NOT P_LEIDO AND L_PICINV THEN
BEGIN
#INCLUDE-GV_RFTPITIDO
   ERR "ERROR:EAN13 no leido";
END;
IF L_UBIORICOD THEN
   L_UBIORI1 = L_UBIORICOD;
(* JLM, KAM18 *)
IF L_BARRAS[2:4] <> ']C1' AND L_BARRAS[1:1] <> 'J' THEN
   LOGIC-LIB-TRD-001 USING L_BARRAS, L_LEIDO MODIFY, L_TIPO MODIFY;
ELSE BEGIN
   L_ERROR = 0;
   LOGIC-LEE-128-001 USING L_BARRAS
                         , ' '
                         , ' '
                         , ' '
                         , ' '
                         , L_LEIDO MODIFY
                         , 0
                         , 0
                         , L_ERROR MODIFY
   ;
   IF L_ERROR THEN BEGIN
      L_AVISO = "Error Lectura EAN128";
BEGIN
#INCLUDE-GV_RFTPITIDO
      ERR L_AVISO;
END;
   END;
END;
IF L_LEER = 'EAN' OR L_LEER = 'AMBOS' THEN BEGIN
   L_ARTLEIDO = 0;
   EXEC SQL
   SELECT ARTPRICOD
     INTO :L_ARTLEIDO
     FROM ARTEAN
    WHERE EANCOD = :L_LEIDO;
   IF L_ARTLEIDO = L_ARTPRICOD1 THEN
      L_OK = 1;
END;
IF NOT L_OK THEN BEGIN
   IF L_LEER = 'UBI' OR L_LEER = 'AMBOS' THEN BEGIN
      IF $NUM(L_LEIDO[3:12]) = L_UBIORI1 THEN
         L_OK = 1;
   END;
END;
IF L_INCIDEN[4] = '1' THEN BEGIN
   DBG2 'L_INCIDEN4 = 1, ENTONCES L_OK=0';
   L_OK = 0;
END;
IF NOT L_OK THEN BEGIN
   DBG2 'ENTRA POR IF NOT L_OK';
   CASE L_LEER OF
      'UBI'     : L_AVISO = "ERROR:Lea etiqueta ubicacion";
      'EAN'     : L_AVISO = "ERROR:Lea EAN13 articulo";
      'AMBOS'   : L_AVISO = "ERROR:Lea EAN13 o Ubicacion";
   ENDCASE;
   (*EV:V25f terminales de 5 filas.El aviso se muestra en L_BARRAS, pq no cabe*)
   IF L_TERMINAL5F = 'S' THEN BEGIN
      CASE L_LEER OF
         'UBI'     : L_AVISO = "ERR:Etiq. ubicacion";
         'EAN'     : L_AVISO = "ERR:EAN13 articulo";
         'AMBOS'   : L_AVISO = "ERR:EAN13 o Ubicacion";
      ENDCASE;
      L_BARRAS = L_AVISO[1:14];
   END;
   IF L_INCIDEN[4] = '1' THEN
      EXEC SQL
      SELECT INCVERCAN,CAN
        INTO :L_INCVERCAN,:L_CAN1
        FROM ACCTRA,EXPORDLIN
       WHERE       ACCTRA.ACCCOD = :L_ACCCOD1
         AND EXPORDLIN.EXPORDCOD = ACCTRA.EXPORDCOD
         AND EXPORDLIN.EXPORDLIN = ACCTRA.EXPORDLIN;
   IF L_INCVERCAN = 'P' THEN BEGIN
      DBG2 'L_INCVERCAN VALE P';
      DBG2 'AVISO ERR:CONF.CANT.EN OFICINA';
      L_AVISO = "ERR:CONF.CANT.EN OFICINA";
      (*EV:V2p5 terminales de 5 filas.
        El aviso se muestra en L_BARRAS, pq no cabe*)
      IF L_TERMINAL5F = 'S' THEN BEGIN
         L_AVISO = "CONF.CANT.OFICINA";
         L_BARRAS = L_AVISO[1:14];
      END;
   END; ELSE BEGIN
      DBG2 'ELSE DE IF L_INCVERCAN=P';
      (* RS 24/01/03 Pongo esta parte comun a ambos casos para que *)
      (* muestre la cantidad correcta tambien en el caso de haber  *)
      (* confirmado en oficina.                                    *)
      (*  En el caso de incidencia 4 (Error Pedido) y estar confir-*)
      (* mada la cantidad en oficina, no mostraba correctamente la *)
      (* cantidad en pantalla y obligaba a leer 2 veces el ean del *)
      (* articulo.                                                 *)
      L_INCIDEN[4] = '0';
      IF L_UNIEXP1 <> ' ' THEN BEGIN
         L_CANCAJ1 = $TRUNC(L_CAN1 / L_NUMUNI1);
         L_CANUNI1 = $MOD(L_CAN1, L_NUMUNI1);
         (* RS 02/03/2005 - Incidencia 7679 *)
         L_CAMPO1 = "(" + L_UNIEXP1[1:2] + "=" +
                    $EDIT(L_NUMUNI1,'ZZ9') + "U)" +
                    $EDIT(L_CANCAJ1,'ZZZZ9')+
                    L_UNIEXP11[1:2] + "+" +
                    $EDIT(L_CANUNI1,'ZZ9');
      END;
      IF L_INCVERCAN = 'C' THEN BEGIN
         DBG2 'L_INCVERCAN VALE C';
(*       SCREEN-RFT-AVI-001-P USING "Cantidad confirmada", *)
SECTION "SCREEN-RFT-AVI-001-" + GVPF_TTR
 USING "Cantidad confirmada",
                                    "   Pulse <Enter>";
         EXEC SQL
         UPDATE EXPORDLIN SET INCVERCAN = 'S'
          WHERE EXPORDCOD = :L_EXPORDCOD
            AND EXPORDLIN = :L_EXPORDLIN;
         CASE L_LEER OF
            'UBI'     : L_AVISO = "Lea etiq. ubicacion";
            'EAN'     : L_AVISO = "Lea EAN13 articulo";
            'AMBOS'   : L_AVISO = "Lea EAN13 o Ubicacion";
            OTHERWISE : L_AVISO = "Lea etiq. Ubicacion", L_LEER = 'UBI';
         ENDCASE;
         (*EV:V2p5 terminales de 5 filas. El aviso se muestra en L_BARRAS*)
         IF L_TERMINAL5F = 'S' THEN
            L_BARRAS = L_AVISO[1:14];
      END; ELSE BEGIN
         DBG2 'ELSE DE IF L_INCVERCAN=C';
         (* Modif. FGG 22/04/2003 V2?? Carrefour *)
         IF L_LEE-EAN-UBI = 'S' AND L_PICINV THEN
            L_AVISO = "ERROR:Lea Ubicacion";
         ELSE BEGIN
            DBG2
               'LEER ' + $STR(L_LEER);
            CASE L_LEER OF
               'UBI'     : L_AVISO = "ERR:Lea etiq. ubicacion";
               'EAN'     : L_AVISO = "ERR:Lea EAN13 articulo";
               'AMBOS'   : L_AVISO = "ERR:Lea EAN13 o Ubicacion";
               OTHERWISE : L_AVISO = "ERR:Lea etiq. Ubicacion", L_LEER = 'UBI';
            ENDCASE;
         END;
         (*EV:V2p5 terminales de 5 filas.
         El aviso se muestra en L_BARRAS, pq no cabe*)
         IF L_TERMINAL5F = 'S' THEN BEGIN
            L_AVISO = "ERR:EAN13 o Ubicacion";
            L_BARRAS = L_AVISO[1:14];
         END;
      END;
   END;
   L_BARRAS = ' ';
   DBG2 L_AVISO;
BEGIN
#INCLUDE-GV_RFTPITIDO
   ERR L_AVISO;
END;
END;
(* Si ha leido la etiqueta correcta, y estamos en segunda vuelta *)
(* tenemos que comprobar si hay stock suficiente en la ubicacion *)
(* de picking. Hemos mostrado todo lo que faltaba, hubiera o no. *)
(* Modif NMN 08/05/08 Se a·ade NOT L_PICINV *)
IF NOT L_PICINV AND L_ROTTIP = 'FC' AND L_FILTRA-PICKING = 'S' THEN BEGIN
   (*WAT07--------------------------*)
   (*CONTROL DE CADUCIDAD EN PICKING*)
   DBG2 'Calculo de stock teniendo en cuenta la caducidad';
   L_CANTEORICA = 0;
   L_CLAUSE = ", ALMUBI " +
              " WHERE ALMUBICOD = " + $STR(L_UBIORI1) +
              " AND CNTEXTCOD = ALMUBI.CNTCOD "       +
              " AND ARTCOD    = " + $STR(L_ARTCOD1)   +
              " AND (FECCAD - " + $STR(L_DIAMINCADEXP)+ ")" +
              " > LTR_TO_DATE('" +  L_HOY + "','DD/MM/YYYY')" +
              " AND ((" + $STR(L_DIAMAXCADEXP) + " <> 0 AND " +
              "  FECCAD - " + $STR(L_DIAMAXCADEXP) +
              " <= LTR_TO_DATE('" +  L_HOY +
              "','DD/MM/YYYY')) OR " + $STR(L_DIAMAXCADEXP) + " = 0)";
   DBG2 L_CLAUSE;
   SELECT * FROM CNTNDO SQL-ESCAPE-CLAUSE(BDTIPO,L_CLAUSE);
   FOR CNTNDO SELECTED DO BEGIN
      L_CANTEORICA = L_CANTEORICA + CANUNI;
   END;
END; (*IF L_ROTTIP = 'FC' AND L_FILTRA-PICKING = 'S'*)
ELSE BEGIN
   L_CANTEORICA = 0;
   EXEC SQL SELECT SUM(CNTNDO.CANUNI)
      INTO :L_CANTEORICA
      FROM ALMUBI, CNTNDO
      WHERE ALMUBI.ALMUBICOD = :L_UBIORI1
        AND CNTNDO.CNTEXTCOD = ALMUBI.CNTCOD
        AND CNTNDO.ARTCOD    = :L_ARTCOD1;
   L_CANTEORICA = $NVL(L_CANTEORICA,0);
END;
DBG2 'L_CANTEORICA=' + $STR(L_CANTEORICA);
DBG2 'L_CAN1=' + $STR(L_CAN1);
IF L_CANTEORICA < L_CAN1 THEN BEGIN
   DBG2 'L_CANTEORICA < L_CAN1';
   L_AVISO = "Stock Insuficiente";
   IF L_TERMINAL5F='S' THEN BEGIN
   (*EV:V2p5 terminales de 5 filas*)
      L_BARRAS = L_AVISO[1:14];
   END;
   DBG2 'ERR ' + L_AVISO;
BEGIN
#INCLUDE-GV_RFTPITIDO
   ERR L_AVISO;
END;
END;
IF L_UBIORICOD THEN BEGIN
   DBG2 'ENTRA POR IF L_UBIORICOD';
   L_UBIORI1 = L_UBIORICOD;
   EXEC SQL
   UPDATE ACCTRA SET UBIORICOD = :L_UBIORICOD,
                     ARTCOD    = :L_ARTCOD1
    WHERE ACCCOD    = :L_ACCCOD1;
END;
END;
AT REJECT DO BEGIN
GV_RFSENTIDO = '<';
GV_RFKEY = 8;
#INCLUDE-RFT-PIC-001-P
DBG2 'L_REJECT=1,L_SALIR=1';
L_REJECT = 1;
L_SALIR = 1;
END;
EXIT;

INCLUDE-RFT-PIC-010-P:
  (* Fecha ultima modificacion (23-Jul-2008 12:49:45) *)
   GV_PARENT=$SECTION_NAME;
   CREATE RfLog WITH
      TEXTLINE = $EDIT($NOW,'YY/MM/DD 0H:0I:0S')
         + '|' + $STR($NOW - GV_RFMOM)
         + '|' + $TRIM(GV_RECMAQREF,RIGHT)
         + '|' + $TRIM(GV_RECOPEREF,RIGHT)
         + '|' + $TRIM($SECTION_NAME,RIGHT)
         + '|' + $STR(GV_HISOPECOD)
         + '|' + '#'
         + '|' + GV_RFSENTIDO
         + '|' + $STR(GV_RFKEY)
         + '|' + $TRIM(L_ARTREF,RIGHT)
         + '|' + $TRIM(L_ARTDES,RIGHT)
         + '|' + $TRIM(L_AVISO,RIGHT)
         + '|' + $TRIM(L_BARRAS,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI1,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI2,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI3,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI4,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI5,RIGHT)
         + '|' + $TRIM(L_ALMUBIALI6,RIGHT)
         + '|' + $TRIM(L_RESERVADO1,RIGHT)
         + '|' + $TRIM(L_RESERVADO2,RIGHT)
         + '|' + $TRIM(L_RESERVADO3,RIGHT)
         + '|' + $TRIM(L_RESERVADO4,RIGHT)
         + '|' + $TRIM(L_RESERVADO5,RIGHT)
         + '|' + $TRIM(L_RESERVADO6,RIGHT)
         ; GV_RFSENTIDO = '?'; GV_RFKEY = -99; GV_RFMOM = $NOW;
   LOGIC-MSG-RFT-001;
EXIT;


(*** FIN PPO05 ***)